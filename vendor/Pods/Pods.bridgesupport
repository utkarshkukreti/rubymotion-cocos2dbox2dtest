<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{CCPVRMipmap=&quot;address&quot;*&quot;len&quot;I}' name='CCPVRMipmap'>
<field type='*' name='address' declared_type='unsigned char*'/>
<field type='I' name='len' declared_type='unsigned int'/>
</struct>
<struct type='{CCZHeader=&quot;sig&quot;[4C]&quot;compression_type&quot;S&quot;version&quot;S&quot;reserved&quot;I&quot;len&quot;I}' name='CCZHeader'>
<field type='[4C]' name='sig' declared_type='uint8_t*'/>
<field type='S' name='compression_type' declared_type='uint16_t'/>
<field type='S' name='version' declared_type='uint16_t'/>
<field type='I' name='reserved' declared_type='uint32_t'/>
<field type='I' name='len' declared_type='uint32_t'/>
</struct>
<struct type='{UT_hash_bucket=&quot;hh_head&quot;^{UT_hash_handle}&quot;count&quot;I&quot;expand_mult&quot;I}' name='UT_hash_bucket'>
<field type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}' name='hh_head' declared_type='struct UT_hash_handle*'/>
<field type='I' name='count' declared_type='unsigned int'/>
<field type='I' name='expand_mult' declared_type='unsigned int'/>
</struct>
<struct type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}' name='UT_hash_handle'>
<field type='^{UT_hash_table=^{UT_hash_bucket}III^{UT_hash_handle}iIIIII}' name='tbl' declared_type='struct UT_hash_table*'/>
<field type='^v' name='prev' declared_type='void*'/>
<field type='^v' name='next' declared_type='void*'/>
<field type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}' name='hh_prev' declared_type='struct UT_hash_handle*'/>
<field type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}' name='hh_next' declared_type='struct UT_hash_handle*'/>
<field type='^v' name='key' declared_type='void*'/>
<field type='I' name='keylen' declared_type='unsigned int'/>
<field type='I' name='hashv' declared_type='unsigned int'/>
</struct>
<struct type='{UT_hash_table=&quot;buckets&quot;^{UT_hash_bucket}&quot;num_buckets&quot;I&quot;log2_num_buckets&quot;I&quot;num_items&quot;I&quot;tail&quot;^{UT_hash_handle}&quot;hho&quot;i&quot;ideal_chain_maxlen&quot;I&quot;nonideal_items&quot;I&quot;ineff_expands&quot;I&quot;noexpand&quot;I&quot;signature&quot;I}' name='UT_hash_table'>
<field type='^{UT_hash_bucket=^{UT_hash_handle}II}' name='buckets' declared_type='UT_hash_bucket*'/>
<field type='I' name='num_buckets' declared_type='unsigned int'/>
<field type='I' name='log2_num_buckets' declared_type='unsigned int'/>
<field type='I' name='num_items' declared_type='unsigned int'/>
<field type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}' name='tail' declared_type='struct UT_hash_handle*'/>
<field type='i' name='hho' declared_type='ptrdiff_t'/>
<field type='I' name='ideal_chain_maxlen' declared_type='unsigned int'/>
<field type='I' name='nonideal_items' declared_type='unsigned int'/>
<field type='I' name='ineff_expands' declared_type='unsigned int'/>
<field type='I' name='noexpand' declared_type='unsigned int'/>
<field type='I' name='signature' declared_type='uint32_t'/>
</struct>
<struct type='{b2Color=&quot;b2Color&quot;?}' name='b2Color'>
<field type='?' name='b2Color' declared_type='int ()'/>
</struct>
<struct type='{b2ContactImpulse=&quot;normalImpulses&quot;[2f]&quot;tangentImpulses&quot;[2f]&quot;count&quot;i}' name='b2ContactImpulse'>
<field type='[2f]' name='normalImpulses' declared_type='float32*'/>
<field type='[2f]' name='tangentImpulses' declared_type='float32*'/>
<field type='i' name='count' declared_type='int32'/>
</struct>
<struct type='{b2ContactRegister=&quot;createFcn&quot;^?&quot;destroyFcn&quot;^?&quot;primary&quot;B}' name='b2ContactRegister'>
<field type='^?' name='createFcn' declared_type='b2ContactCreateFcn*' function_pointer='true'>
<arg type='^i' declared_type='int*'/>
<arg type='i' declared_type='int32'/>
<arg type='^i' declared_type='int*'/>
<arg type='i' declared_type='int32'/>
<arg type='^i' declared_type='int*'/>
<retval type='^i' declared_type='int*'/>
</field>
<field type='^?' name='destroyFcn' declared_type='b2ContactDestroyFcn*' function_pointer='true'>
<arg type='^i' declared_type='int*'/>
<arg type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='B' name='primary' declared_type='_Bool'/>
</struct>
<struct type='{b2Filter=&quot;b2Filter&quot;?&quot;maskBits&quot;S&quot;groupIndex&quot;s}' name='b2Filter'>
<field type='?' name='b2Filter' declared_type='int ()'/>
<field type='S' name='maskBits' declared_type='uint16'/>
<field type='s' name='groupIndex' declared_type='int16'/>
</struct>
<struct type='{b2Mat22=&quot;b2Mat22&quot;?}' name='b2Mat22'>
<field type='?' name='b2Mat22' declared_type='int ()'/>
</struct>
<struct type='{b2Profile=&quot;step&quot;f&quot;collide&quot;f&quot;solve&quot;f&quot;solveInit&quot;f&quot;solveVelocity&quot;f&quot;solvePosition&quot;f&quot;broadphase&quot;f&quot;solveTOI&quot;f}' name='b2Profile'>
<field type='f' name='step' declared_type='float32'/>
<field type='f' name='collide' declared_type='float32'/>
<field type='f' name='solve' declared_type='float32'/>
<field type='f' name='solveInit' declared_type='float32'/>
<field type='f' name='solveVelocity' declared_type='float32'/>
<field type='f' name='solvePosition' declared_type='float32'/>
<field type='f' name='broadphase' declared_type='float32'/>
<field type='f' name='solveTOI' declared_type='float32'/>
</struct>
<struct type='{b2Rot=&quot;b2Rot&quot;?}' name='b2Rot'>
<field type='?' name='b2Rot' declared_type='int ()'/>
</struct>
<struct type='{b2StackEntry=&quot;data&quot;*&quot;size&quot;i&quot;usedMalloc&quot;B}' name='b2StackEntry'>
<field type='*' name='data' declared_type='char*'/>
<field type='i' name='size' declared_type='int32'/>
<field type='B' name='usedMalloc' declared_type='_Bool'/>
</struct>
<struct type='{b2TimeStep=&quot;dt&quot;f&quot;inv_dt&quot;f&quot;dtRatio&quot;f&quot;velocityIterations&quot;i&quot;positionIterations&quot;i&quot;warmStarting&quot;B}' name='b2TimeStep'>
<field type='f' name='dt' declared_type='float32'/>
<field type='f' name='inv_dt' declared_type='float32'/>
<field type='f' name='dtRatio' declared_type='float32'/>
<field type='i' name='velocityIterations' declared_type='int32'/>
<field type='i' name='positionIterations' declared_type='int32'/>
<field type='B' name='warmStarting' declared_type='_Bool'/>
</struct>
<struct type='{b2Vec2=&quot;b2Vec2&quot;?}' name='b2Vec2'>
<field type='?' name='b2Vec2' declared_type='int ()'/>
</struct>
<struct type='{b2Vec3=&quot;b2Vec3&quot;?}' name='b2Vec3'>
<field type='?' name='b2Vec3' declared_type='int ()'/>
</struct>
<struct type='{b2Version=&quot;major&quot;i&quot;minor&quot;i&quot;revision&quot;i}' name='b2Version'>
<field type='i' name='major' declared_type='int32'/>
<field type='i' name='minor' declared_type='int32'/>
<field type='i' name='revision' declared_type='int32'/>
</struct>
<struct type='{_bufferInfo=&quot;bufferId&quot;I&quot;bufferState&quot;i&quot;bufferData&quot;^v&quot;format&quot;i&quot;sizeInBytes&quot;i&quot;frequencyInHertz&quot;i}' name='bufferInfo'>
<field type='I' name='bufferId' declared_type='ALuint'/>
<field type='i' name='bufferState' declared_type='int'/>
<field type='^v' name='bufferData' declared_type='void*'/>
<field type='i' name='format' declared_type='ALenum'/>
<field type='i' name='sizeInBytes' declared_type='ALsizei'/>
<field type='i' name='frequencyInHertz' declared_type='ALsizei'/>
</struct>
<struct type='{ccArray=&quot;num&quot;I&quot;max&quot;I&quot;arr&quot;^@}' name='ccArray'>
<field type='I' name='num' declared_type='NSUInteger'/>
<field type='I' name='max' declared_type='NSUInteger'/>
<field type='^@' name='arr' declared_type='CCARRAY_ID*'/>
</struct>
<struct type='{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}' name='ccBMFontDef'>
<field type='S' name='charID' declared_type='unichar'/>
<field type='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}' name='rect' declared_type='CGRect'/>
<field type='s' name='xOffset' declared_type='short'/>
<field type='s' name='yOffset' declared_type='short'/>
<field type='s' name='xAdvance' declared_type='short'/>
</struct>
<struct type='{_BMFontPadding=&quot;left&quot;i&quot;top&quot;i&quot;right&quot;i&quot;bottom&quot;i}' name='ccBMFontPadding'>
<field type='i' name='left' declared_type='int'/>
<field type='i' name='top' declared_type='int'/>
<field type='i' name='right' declared_type='int'/>
<field type='i' name='bottom' declared_type='int'/>
</struct>
<struct type='{_ccBezierConfig=&quot;endPosition&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;controlPoint_1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;controlPoint_2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='ccBezierConfig'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='endPosition' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='controlPoint_1' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='controlPoint_2' declared_type='CGPoint'/>
</struct>
<struct type='{_ccBlendFunc=&quot;src&quot;I&quot;dst&quot;I}' name='ccBlendFunc'>
<field type='I' name='src' declared_type='GLenum'/>
<field type='I' name='dst' declared_type='GLenum'/>
</struct>
<struct type='{ccArray=&quot;num&quot;I&quot;max&quot;I&quot;arr&quot;^@}' name='ccCArray'>
<field type='I' name='num' declared_type='NSUInteger'/>
<field type='I' name='max' declared_type='NSUInteger'/>
<field type='^@' name='arr' declared_type='CCARRAY_ID*'/>
</struct>
<struct type='{_ccColor3B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C}' name='ccColor3B'>
<field type='C' name='r' declared_type='GLubyte'/>
<field type='C' name='g' declared_type='GLubyte'/>
<field type='C' name='b' declared_type='GLubyte'/>
</struct>
<struct type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}' name='ccColor4B'>
<field type='C' name='r' declared_type='GLubyte'/>
<field type='C' name='g' declared_type='GLubyte'/>
<field type='C' name='b' declared_type='GLubyte'/>
<field type='C' name='a' declared_type='GLubyte'/>
</struct>
<struct type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='ccColor4F'>
<field type='f' name='r' declared_type='GLfloat'/>
<field type='f' name='g' declared_type='GLfloat'/>
<field type='f' name='b' declared_type='GLfloat'/>
<field type='f' name='a' declared_type='GLfloat'/>
</struct>
<struct type='{_ccGridSize=&quot;x&quot;i&quot;y&quot;i}' name='ccGridSize'>
<field type='i' name='x' declared_type='NSInteger'/>
<field type='i' name='y' declared_type='NSInteger'/>
</struct>
<struct type='{_ccPointSprite=&quot;pos&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;size&quot;f}' name='ccPointSprite'>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='pos' declared_type='ccVertex2F'/>
<field type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}' name='color' declared_type='ccColor4B'/>
<field type='f' name='size' declared_type='GLfloat'/>
</struct>
<struct type='{_ccQuad2=&quot;tl&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;tr&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;bl&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;br&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}}' name='ccQuad2'>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='tl' declared_type='ccVertex2F'/>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='tr' declared_type='ccVertex2F'/>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='bl' declared_type='ccVertex2F'/>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='br' declared_type='ccVertex2F'/>
</struct>
<struct type='{_ccQuad3=&quot;bl&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;br&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;tl&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;tr&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}}' name='ccQuad3'>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='bl' declared_type='ccVertex3F'/>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='br' declared_type='ccVertex3F'/>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='tl' declared_type='ccVertex3F'/>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='tr' declared_type='ccVertex3F'/>
</struct>
<struct type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}' name='ccTex2F'>
<field type='f' name='u' declared_type='GLfloat'/>
<field type='f' name='v' declared_type='GLfloat'/>
</struct>
<struct type='{_ccTexParams=&quot;minFilter&quot;I&quot;magFilter&quot;I&quot;wrapS&quot;I&quot;wrapT&quot;I}' name='ccTexParams'>
<field type='I' name='minFilter' declared_type='GLuint'/>
<field type='I' name='magFilter' declared_type='GLuint'/>
<field type='I' name='wrapS' declared_type='GLuint'/>
<field type='I' name='wrapT' declared_type='GLuint'/>
</struct>
<struct type='{ccTouchHandlerHelperData=&quot;touchesSel&quot;:&quot;touchSel&quot;:&quot;type&quot;i}' name='ccTouchHandlerHelperData'>
<field type=':' name='touchesSel' declared_type='SEL'/>
<field type=':' name='touchSel' declared_type='SEL'/>
<field type='i' name='type' declared_type='ccTouchSelectorFlag'/>
</struct>
<struct type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='ccV2F_C4B_T2F'>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='vertices' declared_type='ccVertex2F'/>
<field type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}' name='colors' declared_type='ccColor4B'/>
<field type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}' name='texCoords' declared_type='ccTex2F'/>
</struct>
<struct type='{_ccV2F_C4B_T2F_Quad=&quot;bl&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tl&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}' name='ccV2F_C4B_T2F_Quad'>
<field type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='bl' declared_type='ccV2F_C4B_T2F'/>
<field type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='br' declared_type='ccV2F_C4B_T2F'/>
<field type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tl' declared_type='ccV2F_C4B_T2F'/>
<field type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tr' declared_type='ccV2F_C4B_T2F'/>
</struct>
<struct type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='ccV2F_C4F_T2F'>
<field type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='vertices' declared_type='ccVertex2F'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='colors' declared_type='ccColor4F'/>
<field type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}' name='texCoords' declared_type='ccTex2F'/>
</struct>
<struct type='{_ccV2F_C4F_T2F_Quad=&quot;bl&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tl&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}' name='ccV2F_C4F_T2F_Quad'>
<field type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='bl' declared_type='ccV2F_C4F_T2F'/>
<field type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='br' declared_type='ccV2F_C4F_T2F'/>
<field type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tl' declared_type='ccV2F_C4F_T2F'/>
<field type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tr' declared_type='ccV2F_C4F_T2F'/>
</struct>
<struct type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='ccV3F_C4B_T2F'>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='vertices' declared_type='ccVertex3F'/>
<field type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}' name='colors' declared_type='ccColor4B'/>
<field type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}' name='texCoords' declared_type='ccTex2F'/>
</struct>
<struct type='{_ccV3F_C4B_T2F_Quad=&quot;tl&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;bl&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}' name='ccV3F_C4B_T2F_Quad'>
<field type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tl' declared_type='ccV3F_C4B_T2F'/>
<field type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='bl' declared_type='ccV3F_C4B_T2F'/>
<field type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tr' declared_type='ccV3F_C4B_T2F'/>
<field type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='br' declared_type='ccV3F_C4B_T2F'/>
</struct>
<struct type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='ccV3F_C4F_T2F'>
<field type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='vertices' declared_type='ccVertex3F'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='colors' declared_type='ccColor4F'/>
<field type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}' name='texCoords' declared_type='ccTex2F'/>
</struct>
<struct type='{_ccV3F_C4F_T2F_Quad=&quot;tl&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;bl&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}' name='ccV3F_C4F_T2F_Quad'>
<field type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tl' declared_type='ccV3F_C4F_T2F'/>
<field type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='bl' declared_type='ccV3F_C4F_T2F'/>
<field type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='tr' declared_type='ccV3F_C4F_T2F'/>
<field type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}' name='br' declared_type='ccV3F_C4F_T2F'/>
</struct>
<struct type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}' name='ccVertex2F'>
<field type='f' name='x' declared_type='GLfloat'/>
<field type='f' name='y' declared_type='GLfloat'/>
</struct>
<struct type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='ccVertex3F'>
<field type='f' name='x' declared_type='GLfloat'/>
<field type='f' name='y' declared_type='GLfloat'/>
<field type='f' name='z' declared_type='GLfloat'/>
</struct>
<struct type='{kmAABB=&quot;min&quot;{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;max&quot;{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}}' name='kmAABB'>
<field type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='min' declared_type='kmVec3'/>
<field type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='max' declared_type='kmVec3'/>
</struct>
<struct type='{kmMat3=&quot;mat&quot;[9f]}' name='kmMat3'>
<field type='[9f]' name='mat' declared_type='float*'/>
</struct>
<struct type='{kmMat4=&quot;mat&quot;[16f]}' name='kmMat4'>
<field type='[16f]' name='mat' declared_type='float*'/>
</struct>
<struct type='{kmPlane=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f}' name='kmPlane'>
<field type='f' name='a' declared_type='float'/>
<field type='f' name='b' declared_type='float'/>
<field type='f' name='c' declared_type='float'/>
<field type='f' name='d' declared_type='float'/>
</struct>
<struct type='{kmQuaternion=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f&quot;w&quot;f}' name='kmQuaternion'>
<field type='f' name='x' declared_type='float'/>
<field type='f' name='y' declared_type='float'/>
<field type='f' name='z' declared_type='float'/>
<field type='f' name='w' declared_type='float'/>
</struct>
<struct type='{kmRay2=&quot;start&quot;{kmVec2=&quot;x&quot;f&quot;y&quot;f}&quot;dir&quot;{kmVec2=&quot;x&quot;f&quot;y&quot;f}}' name='kmRay2'>
<field type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}' name='start' declared_type='kmVec2'/>
<field type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}' name='dir' declared_type='kmVec2'/>
</struct>
<struct type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}' name='kmVec2'>
<field type='f' name='x' declared_type='float'/>
<field type='f' name='y' declared_type='float'/>
</struct>
<struct type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}' name='kmVec3'>
<field type='f' name='x' declared_type='float'/>
<field type='f' name='y' declared_type='float'/>
<field type='f' name='z' declared_type='float'/>
</struct>
<struct type='{kmVec4=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f&quot;w&quot;f}' name='kmVec4'>
<field type='f' name='x' declared_type='float'/>
<field type='f' name='y' declared_type='float'/>
<field type='f' name='z' declared_type='float'/>
<field type='f' name='w' declared_type='float'/>
</struct>
<struct type='{km_mat4_stack=&quot;capacity&quot;i&quot;item_count&quot;i&quot;top&quot;^{kmMat4}&quot;stack&quot;^{kmMat4}}' name='km_mat4_stack'>
<field type='i' name='capacity' declared_type='int'/>
<field type='i' name='item_count' declared_type='int'/>
<field type='^{kmMat4=[16f]}' name='top' declared_type='kmMat4*'/>
<field type='^{kmMat4=[16f]}' name='stack' declared_type='kmMat4*'/>
</struct>
<struct type='{png_color_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C}' name='png_color'>
<field type='C' name='red' declared_type='png_byte'/>
<field type='C' name='green' declared_type='png_byte'/>
<field type='C' name='blue' declared_type='png_byte'/>
</struct>
<struct type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='png_color_16'>
<field type='C' name='index' declared_type='png_byte'/>
<field type='S' name='red' declared_type='png_uint_16'/>
<field type='S' name='green' declared_type='png_uint_16'/>
<field type='S' name='blue' declared_type='png_uint_16'/>
<field type='S' name='gray' declared_type='png_uint_16'/>
</struct>
<struct type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='png_color_16_struct'>
<field type='C' name='index' declared_type='png_byte'/>
<field type='S' name='red' declared_type='png_uint_16'/>
<field type='S' name='green' declared_type='png_uint_16'/>
<field type='S' name='blue' declared_type='png_uint_16'/>
<field type='S' name='gray' declared_type='png_uint_16'/>
</struct>
<struct type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='png_color_8'>
<field type='C' name='red' declared_type='png_byte'/>
<field type='C' name='green' declared_type='png_byte'/>
<field type='C' name='blue' declared_type='png_byte'/>
<field type='C' name='gray' declared_type='png_byte'/>
<field type='C' name='alpha' declared_type='png_byte'/>
</struct>
<struct type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='png_color_8_struct'>
<field type='C' name='red' declared_type='png_byte'/>
<field type='C' name='green' declared_type='png_byte'/>
<field type='C' name='blue' declared_type='png_byte'/>
<field type='C' name='gray' declared_type='png_byte'/>
<field type='C' name='alpha' declared_type='png_byte'/>
</struct>
<struct type='{png_color_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C}' name='png_color_struct'>
<field type='C' name='red' declared_type='png_byte'/>
<field type='C' name='green' declared_type='png_byte'/>
<field type='C' name='blue' declared_type='png_byte'/>
</struct>
<struct type='{png_info_struct=&quot;width&quot;I&quot;height&quot;I&quot;valid&quot;I&quot;rowbytes&quot;I&quot;palette&quot;^{png_color_struct}&quot;num_palette&quot;S&quot;num_trans&quot;S&quot;bit_depth&quot;C&quot;color_type&quot;C&quot;compression_type&quot;C&quot;filter_type&quot;C&quot;interlace_type&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C&quot;spare_byte&quot;C&quot;signature&quot;[8C]&quot;gamma&quot;f&quot;srgb_intent&quot;C&quot;num_text&quot;i&quot;max_text&quot;i&quot;text&quot;^{png_text_struct}&quot;mod_time&quot;{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}&quot;sig_bit&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;trans&quot;*&quot;trans_values&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;background&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;x_offset&quot;i&quot;y_offset&quot;i&quot;offset_unit_type&quot;C&quot;x_pixels_per_unit&quot;I&quot;y_pixels_per_unit&quot;I&quot;phys_unit_type&quot;C&quot;hist&quot;^S&quot;x_white&quot;f&quot;y_white&quot;f&quot;x_red&quot;f&quot;y_red&quot;f&quot;x_green&quot;f&quot;y_green&quot;f&quot;x_blue&quot;f&quot;y_blue&quot;f&quot;pcal_purpose&quot;*&quot;pcal_X0&quot;i&quot;pcal_X1&quot;i&quot;pcal_units&quot;*&quot;pcal_params&quot;^*&quot;pcal_type&quot;C&quot;pcal_nparams&quot;C&quot;free_me&quot;I&quot;unknown_chunks&quot;^{png_unknown_chunk_t}&quot;unknown_chunks_num&quot;I&quot;iccp_name&quot;*&quot;iccp_profile&quot;*&quot;iccp_proflen&quot;I&quot;iccp_compression&quot;C&quot;splt_palettes&quot;^{png_sPLT_struct}&quot;splt_palettes_num&quot;I&quot;scal_unit&quot;C&quot;scal_pixel_width&quot;d&quot;scal_pixel_height&quot;d&quot;scal_s_width&quot;*&quot;scal_s_height&quot;*&quot;row_pointers&quot;^*&quot;int_gamma&quot;i&quot;int_x_white&quot;i&quot;int_y_white&quot;i&quot;int_x_red&quot;i&quot;int_y_red&quot;i&quot;int_x_green&quot;i&quot;int_y_green&quot;i&quot;int_x_blue&quot;i&quot;int_y_blue&quot;i}' name='png_info'>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='height' declared_type='png_uint_32'/>
<field type='L' name='valid' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='^{png_color_struct=CCC}' name='palette' declared_type='png_colorp'/>
<field type='S' name='num_palette' declared_type='png_uint_16'/>
<field type='S' name='num_trans' declared_type='png_uint_16'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='compression_type' declared_type='png_byte'/>
<field type='C' name='filter_type' declared_type='png_byte'/>
<field type='C' name='interlace_type' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
<field type='C' name='spare_byte' declared_type='png_byte'/>
<field type='[8C]' name='signature' declared_type='png_byte*'/>
<field type='f' name='gamma' declared_type='float'/>
<field type='C' name='srgb_intent' declared_type='png_byte'/>
<field type='i' name='num_text' declared_type='int'/>
<field type='i' name='max_text' declared_type='int'/>
<field type='^{png_text_struct=i**I}' name='text' declared_type='png_textp'/>
<field type='{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}' name='mod_time' declared_type='png_time'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='sig_bit' declared_type='png_color_8'/>
<field type='*' name='trans' declared_type='png_bytep'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='trans_values' declared_type='png_color_16'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background' declared_type='png_color_16'/>
<field type='l' name='x_offset' declared_type='png_int_32'/>
<field type='l' name='y_offset' declared_type='png_int_32'/>
<field type='C' name='offset_unit_type' declared_type='png_byte'/>
<field type='L' name='x_pixels_per_unit' declared_type='png_uint_32'/>
<field type='L' name='y_pixels_per_unit' declared_type='png_uint_32'/>
<field type='C' name='phys_unit_type' declared_type='png_byte'/>
<field type='^S' name='hist' declared_type='png_uint_16p'/>
<field type='f' name='x_white' declared_type='float'/>
<field type='f' name='y_white' declared_type='float'/>
<field type='f' name='x_red' declared_type='float'/>
<field type='f' name='y_red' declared_type='float'/>
<field type='f' name='x_green' declared_type='float'/>
<field type='f' name='y_green' declared_type='float'/>
<field type='f' name='x_blue' declared_type='float'/>
<field type='f' name='y_blue' declared_type='float'/>
<field type='*' name='pcal_purpose' declared_type='png_charp'/>
<field type='l' name='pcal_X0' declared_type='png_int_32'/>
<field type='l' name='pcal_X1' declared_type='png_int_32'/>
<field type='*' name='pcal_units' declared_type='png_charp'/>
<field type='^*' name='pcal_params' declared_type='png_charpp'/>
<field type='C' name='pcal_type' declared_type='png_byte'/>
<field type='C' name='pcal_nparams' declared_type='png_byte'/>
<field type='L' name='free_me' declared_type='png_uint_32'/>
<field type='^{png_unknown_chunk_t=[5C]*IC}' name='unknown_chunks' declared_type='png_unknown_chunkp'/>
<field type='L' name='unknown_chunks_num' declared_type='png_size_t'/>
<field type='*' name='iccp_name' declared_type='png_charp'/>
<field type='*' name='iccp_profile' declared_type='png_charp'/>
<field type='L' name='iccp_proflen' declared_type='png_uint_32'/>
<field type='C' name='iccp_compression' declared_type='png_byte'/>
<field type='^{png_sPLT_struct=*C^{png_sPLT_entry_struct}i}' name='splt_palettes' declared_type='png_sPLT_tp'/>
<field type='L' name='splt_palettes_num' declared_type='png_uint_32'/>
<field type='C' name='scal_unit' declared_type='png_byte'/>
<field type='d' name='scal_pixel_width' declared_type='double'/>
<field type='d' name='scal_pixel_height' declared_type='double'/>
<field type='*' name='scal_s_width' declared_type='png_charp'/>
<field type='*' name='scal_s_height' declared_type='png_charp'/>
<field type='^*' name='row_pointers' declared_type='png_bytepp'/>
<field type='l' name='int_gamma' declared_type='png_fixed_point'/>
<field type='l' name='int_x_white' declared_type='png_fixed_point'/>
<field type='l' name='int_y_white' declared_type='png_fixed_point'/>
<field type='l' name='int_x_red' declared_type='png_fixed_point'/>
<field type='l' name='int_y_red' declared_type='png_fixed_point'/>
<field type='l' name='int_x_green' declared_type='png_fixed_point'/>
<field type='l' name='int_y_green' declared_type='png_fixed_point'/>
<field type='l' name='int_x_blue' declared_type='png_fixed_point'/>
<field type='l' name='int_y_blue' declared_type='png_fixed_point'/>
</struct>
<struct type='{png_info_struct=&quot;width&quot;I&quot;height&quot;I&quot;valid&quot;I&quot;rowbytes&quot;I&quot;palette&quot;^{png_color_struct}&quot;num_palette&quot;S&quot;num_trans&quot;S&quot;bit_depth&quot;C&quot;color_type&quot;C&quot;compression_type&quot;C&quot;filter_type&quot;C&quot;interlace_type&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C&quot;spare_byte&quot;C&quot;signature&quot;[8C]&quot;gamma&quot;f&quot;srgb_intent&quot;C&quot;num_text&quot;i&quot;max_text&quot;i&quot;text&quot;^{png_text_struct}&quot;mod_time&quot;{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}&quot;sig_bit&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;trans&quot;*&quot;trans_values&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;background&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;x_offset&quot;i&quot;y_offset&quot;i&quot;offset_unit_type&quot;C&quot;x_pixels_per_unit&quot;I&quot;y_pixels_per_unit&quot;I&quot;phys_unit_type&quot;C&quot;hist&quot;^S&quot;x_white&quot;f&quot;y_white&quot;f&quot;x_red&quot;f&quot;y_red&quot;f&quot;x_green&quot;f&quot;y_green&quot;f&quot;x_blue&quot;f&quot;y_blue&quot;f&quot;pcal_purpose&quot;*&quot;pcal_X0&quot;i&quot;pcal_X1&quot;i&quot;pcal_units&quot;*&quot;pcal_params&quot;^*&quot;pcal_type&quot;C&quot;pcal_nparams&quot;C&quot;free_me&quot;I&quot;unknown_chunks&quot;^{png_unknown_chunk_t}&quot;unknown_chunks_num&quot;I&quot;iccp_name&quot;*&quot;iccp_profile&quot;*&quot;iccp_proflen&quot;I&quot;iccp_compression&quot;C&quot;splt_palettes&quot;^{png_sPLT_struct}&quot;splt_palettes_num&quot;I&quot;scal_unit&quot;C&quot;scal_pixel_width&quot;d&quot;scal_pixel_height&quot;d&quot;scal_s_width&quot;*&quot;scal_s_height&quot;*&quot;row_pointers&quot;^*&quot;int_gamma&quot;i&quot;int_x_white&quot;i&quot;int_y_white&quot;i&quot;int_x_red&quot;i&quot;int_y_red&quot;i&quot;int_x_green&quot;i&quot;int_y_green&quot;i&quot;int_x_blue&quot;i&quot;int_y_blue&quot;i}' name='png_info_struct'>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='height' declared_type='png_uint_32'/>
<field type='L' name='valid' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='^{png_color_struct=CCC}' name='palette' declared_type='png_colorp'/>
<field type='S' name='num_palette' declared_type='png_uint_16'/>
<field type='S' name='num_trans' declared_type='png_uint_16'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='compression_type' declared_type='png_byte'/>
<field type='C' name='filter_type' declared_type='png_byte'/>
<field type='C' name='interlace_type' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
<field type='C' name='spare_byte' declared_type='png_byte'/>
<field type='[8C]' name='signature' declared_type='png_byte*'/>
<field type='f' name='gamma' declared_type='float'/>
<field type='C' name='srgb_intent' declared_type='png_byte'/>
<field type='i' name='num_text' declared_type='int'/>
<field type='i' name='max_text' declared_type='int'/>
<field type='^{png_text_struct=i**I}' name='text' declared_type='png_textp'/>
<field type='{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}' name='mod_time' declared_type='png_time'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='sig_bit' declared_type='png_color_8'/>
<field type='*' name='trans' declared_type='png_bytep'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='trans_values' declared_type='png_color_16'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background' declared_type='png_color_16'/>
<field type='l' name='x_offset' declared_type='png_int_32'/>
<field type='l' name='y_offset' declared_type='png_int_32'/>
<field type='C' name='offset_unit_type' declared_type='png_byte'/>
<field type='L' name='x_pixels_per_unit' declared_type='png_uint_32'/>
<field type='L' name='y_pixels_per_unit' declared_type='png_uint_32'/>
<field type='C' name='phys_unit_type' declared_type='png_byte'/>
<field type='^S' name='hist' declared_type='png_uint_16p'/>
<field type='f' name='x_white' declared_type='float'/>
<field type='f' name='y_white' declared_type='float'/>
<field type='f' name='x_red' declared_type='float'/>
<field type='f' name='y_red' declared_type='float'/>
<field type='f' name='x_green' declared_type='float'/>
<field type='f' name='y_green' declared_type='float'/>
<field type='f' name='x_blue' declared_type='float'/>
<field type='f' name='y_blue' declared_type='float'/>
<field type='*' name='pcal_purpose' declared_type='png_charp'/>
<field type='l' name='pcal_X0' declared_type='png_int_32'/>
<field type='l' name='pcal_X1' declared_type='png_int_32'/>
<field type='*' name='pcal_units' declared_type='png_charp'/>
<field type='^*' name='pcal_params' declared_type='png_charpp'/>
<field type='C' name='pcal_type' declared_type='png_byte'/>
<field type='C' name='pcal_nparams' declared_type='png_byte'/>
<field type='L' name='free_me' declared_type='png_uint_32'/>
<field type='^{png_unknown_chunk_t=[5C]*IC}' name='unknown_chunks' declared_type='png_unknown_chunkp'/>
<field type='L' name='unknown_chunks_num' declared_type='png_size_t'/>
<field type='*' name='iccp_name' declared_type='png_charp'/>
<field type='*' name='iccp_profile' declared_type='png_charp'/>
<field type='L' name='iccp_proflen' declared_type='png_uint_32'/>
<field type='C' name='iccp_compression' declared_type='png_byte'/>
<field type='^{png_sPLT_struct=*C^{png_sPLT_entry_struct}i}' name='splt_palettes' declared_type='png_sPLT_tp'/>
<field type='L' name='splt_palettes_num' declared_type='png_uint_32'/>
<field type='C' name='scal_unit' declared_type='png_byte'/>
<field type='d' name='scal_pixel_width' declared_type='double'/>
<field type='d' name='scal_pixel_height' declared_type='double'/>
<field type='*' name='scal_s_width' declared_type='png_charp'/>
<field type='*' name='scal_s_height' declared_type='png_charp'/>
<field type='^*' name='row_pointers' declared_type='png_bytepp'/>
<field type='l' name='int_gamma' declared_type='png_fixed_point'/>
<field type='l' name='int_x_white' declared_type='png_fixed_point'/>
<field type='l' name='int_y_white' declared_type='png_fixed_point'/>
<field type='l' name='int_x_red' declared_type='png_fixed_point'/>
<field type='l' name='int_y_red' declared_type='png_fixed_point'/>
<field type='l' name='int_x_green' declared_type='png_fixed_point'/>
<field type='l' name='int_y_green' declared_type='png_fixed_point'/>
<field type='l' name='int_x_blue' declared_type='png_fixed_point'/>
<field type='l' name='int_y_blue' declared_type='png_fixed_point'/>
</struct>
<struct type='{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}' name='png_row_info'>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
</struct>
<struct type='{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}' name='png_row_info_struct'>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
</struct>
<struct type='{png_sPLT_entry_struct=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;alpha&quot;S&quot;frequency&quot;S}' name='png_sPLT_entry'>
<field type='S' name='red' declared_type='png_uint_16'/>
<field type='S' name='green' declared_type='png_uint_16'/>
<field type='S' name='blue' declared_type='png_uint_16'/>
<field type='S' name='alpha' declared_type='png_uint_16'/>
<field type='S' name='frequency' declared_type='png_uint_16'/>
</struct>
<struct type='{png_sPLT_entry_struct=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;alpha&quot;S&quot;frequency&quot;S}' name='png_sPLT_entry_struct'>
<field type='S' name='red' declared_type='png_uint_16'/>
<field type='S' name='green' declared_type='png_uint_16'/>
<field type='S' name='blue' declared_type='png_uint_16'/>
<field type='S' name='alpha' declared_type='png_uint_16'/>
<field type='S' name='frequency' declared_type='png_uint_16'/>
</struct>
<struct type='{png_sPLT_struct=&quot;name&quot;*&quot;depth&quot;C&quot;entries&quot;^{png_sPLT_entry_struct}&quot;nentries&quot;i}' name='png_sPLT_struct'>
<field type='*' name='name' declared_type='png_charp'/>
<field type='C' name='depth' declared_type='png_byte'/>
<field type='^{png_sPLT_entry_struct=SSSSS}' name='entries' declared_type='png_sPLT_entryp'/>
<field type='l' name='nentries' declared_type='png_int_32'/>
</struct>
<struct type='{png_sPLT_struct=&quot;name&quot;*&quot;depth&quot;C&quot;entries&quot;^{png_sPLT_entry_struct}&quot;nentries&quot;i}' name='png_sPLT_t'>
<field type='*' name='name' declared_type='png_charp'/>
<field type='C' name='depth' declared_type='png_byte'/>
<field type='^{png_sPLT_entry_struct=SSSSS}' name='entries' declared_type='png_sPLT_entryp'/>
<field type='l' name='nentries' declared_type='png_int_32'/>
</struct>
<struct type='{png_struct_def=&quot;jmpbuf&quot;[18i]&quot;error_fn&quot;^?&quot;warning_fn&quot;^?&quot;error_ptr&quot;^v&quot;write_data_fn&quot;^?&quot;read_data_fn&quot;^?&quot;io_ptr&quot;^v&quot;read_user_transform_fn&quot;^?&quot;write_user_transform_fn&quot;^?&quot;user_transform_ptr&quot;^v&quot;user_transform_depth&quot;C&quot;user_transform_channels&quot;C&quot;mode&quot;I&quot;flags&quot;I&quot;transformations&quot;I&quot;zstream&quot;{z_stream_s=&quot;next_in&quot;*&quot;avail_in&quot;I&quot;total_in&quot;I&quot;next_out&quot;*&quot;avail_out&quot;I&quot;total_out&quot;I&quot;msg&quot;*&quot;state&quot;^{internal_state}&quot;zalloc&quot;^?&quot;zfree&quot;^?&quot;opaque&quot;^v&quot;data_type&quot;i&quot;adler&quot;I&quot;reserved&quot;I}&quot;zbuf&quot;*&quot;zbuf_size&quot;I&quot;zlib_level&quot;i&quot;zlib_method&quot;i&quot;zlib_window_bits&quot;i&quot;zlib_mem_level&quot;i&quot;zlib_strategy&quot;i&quot;width&quot;I&quot;height&quot;I&quot;num_rows&quot;I&quot;usr_width&quot;I&quot;rowbytes&quot;I&quot;user_chunk_cache_max&quot;I&quot;iwidth&quot;I&quot;row_number&quot;I&quot;prev_row&quot;*&quot;row_buf&quot;*&quot;sub_row&quot;*&quot;up_row&quot;*&quot;avg_row&quot;*&quot;paeth_row&quot;*&quot;row_info&quot;{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}&quot;idat_size&quot;I&quot;crc&quot;I&quot;palette&quot;^{png_color_struct}&quot;num_palette&quot;S&quot;num_trans&quot;S&quot;chunk_name&quot;[5C]&quot;compression&quot;C&quot;filter&quot;C&quot;interlaced&quot;C&quot;pass&quot;C&quot;do_filter&quot;C&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;usr_bit_depth&quot;C&quot;pixel_depth&quot;C&quot;channels&quot;C&quot;usr_channels&quot;C&quot;sig_bytes&quot;C&quot;filler&quot;S&quot;background_gamma_type&quot;C&quot;background_gamma&quot;f&quot;background&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;background_1&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;output_flush_fn&quot;^?&quot;flush_dist&quot;I&quot;flush_rows&quot;I&quot;gamma_shift&quot;i&quot;gamma&quot;f&quot;screen_gamma&quot;f&quot;gamma_table&quot;*&quot;gamma_from_1&quot;*&quot;gamma_to_1&quot;*&quot;gamma_16_table&quot;^^S&quot;gamma_16_from_1&quot;^^S&quot;gamma_16_to_1&quot;^^S&quot;sig_bit&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;shift&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;trans&quot;*&quot;trans_values&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;read_row_fn&quot;^?&quot;write_row_fn&quot;^?&quot;info_fn&quot;^?&quot;row_fn&quot;^?&quot;end_fn&quot;^?&quot;save_buffer_ptr&quot;*&quot;save_buffer&quot;*&quot;current_buffer_ptr&quot;*&quot;current_buffer&quot;*&quot;push_length&quot;I&quot;skip_length&quot;I&quot;save_buffer_size&quot;I&quot;save_buffer_max&quot;I&quot;buffer_size&quot;I&quot;current_buffer_size&quot;I&quot;process_mode&quot;i&quot;cur_palette&quot;i&quot;current_text_size&quot;I&quot;current_text_left&quot;I&quot;current_text&quot;*&quot;current_text_ptr&quot;*&quot;palette_lookup&quot;*&quot;dither_index&quot;*&quot;hist&quot;^S&quot;heuristic_method&quot;C&quot;num_prev_filters&quot;C&quot;prev_filters&quot;*&quot;filter_weights&quot;^S&quot;inv_filter_weights&quot;^S&quot;filter_costs&quot;^S&quot;inv_filter_costs&quot;^S&quot;time_buffer&quot;*&quot;free_me&quot;I&quot;user_chunk_ptr&quot;^v&quot;read_user_chunk_fn&quot;^?&quot;num_chunk_list&quot;i&quot;chunk_list&quot;*&quot;rgb_to_gray_status&quot;C&quot;rgb_to_gray_red_coeff&quot;S&quot;rgb_to_gray_green_coeff&quot;S&quot;rgb_to_gray_blue_coeff&quot;S&quot;mng_features_permitted&quot;I&quot;int_gamma&quot;i&quot;filter_type&quot;C&quot;asm_flags&quot;I&quot;mem_ptr&quot;^v&quot;malloc_fn&quot;^?&quot;free_fn&quot;^?&quot;big_row_buf&quot;*&quot;dither_sort&quot;*&quot;index_to_palette&quot;*&quot;palette_to_index&quot;*&quot;compression_type&quot;C&quot;user_width_max&quot;I&quot;user_height_max&quot;I&quot;unknown_chunk&quot;{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}&quot;old_big_row_buf_size&quot;I&quot;old_prev_row_size&quot;I&quot;chunkdata&quot;*}' name='png_struct'>
<field type='[18i]' name='jmpbuf' declared_type='jmp_buf'/>
<field type='^?' name='error_fn' declared_type='png_error_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_const_charp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='warning_fn' declared_type='png_error_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_const_charp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='error_ptr' declared_type='png_voidp'/>
<field type='^?' name='write_data_fn' declared_type='png_rw_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='read_data_fn' declared_type='png_rw_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='io_ptr' declared_type='png_voidp'/>
<field type='^?' name='read_user_transform_fn' declared_type='png_user_transform_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_row_info_struct=IICCCC}' declared_type='png_row_infop'/>
<arg type='*' declared_type='png_bytep'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='write_user_transform_fn' declared_type='png_user_transform_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_row_info_struct=IICCCC}' declared_type='png_row_infop'/>
<arg type='*' declared_type='png_bytep'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='user_transform_ptr' declared_type='png_voidp'/>
<field type='C' name='user_transform_depth' declared_type='png_byte'/>
<field type='C' name='user_transform_channels' declared_type='png_byte'/>
<field type='L' name='mode' declared_type='png_uint_32'/>
<field type='L' name='flags' declared_type='png_uint_32'/>
<field type='L' name='transformations' declared_type='png_uint_32'/>
<field type='{z_stream_s=&quot;next_in&quot;*&quot;avail_in&quot;I&quot;total_in&quot;I&quot;next_out&quot;*&quot;avail_out&quot;I&quot;total_out&quot;I&quot;msg&quot;*&quot;state&quot;^{internal_state}&quot;zalloc&quot;^?&quot;zfree&quot;^?&quot;opaque&quot;^v&quot;data_type&quot;i&quot;adler&quot;I&quot;reserved&quot;I}' name='zstream' declared_type='z_stream'/>
<field type='*' name='zbuf' declared_type='png_bytep'/>
<field type='L' name='zbuf_size' declared_type='png_size_t'/>
<field type='i' name='zlib_level' declared_type='int'/>
<field type='i' name='zlib_method' declared_type='int'/>
<field type='i' name='zlib_window_bits' declared_type='int'/>
<field type='i' name='zlib_mem_level' declared_type='int'/>
<field type='i' name='zlib_strategy' declared_type='int'/>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='height' declared_type='png_uint_32'/>
<field type='L' name='num_rows' declared_type='png_uint_32'/>
<field type='L' name='usr_width' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='L' name='user_chunk_cache_max' declared_type='png_uint_32'/>
<field type='L' name='iwidth' declared_type='png_uint_32'/>
<field type='L' name='row_number' declared_type='png_uint_32'/>
<field type='*' name='prev_row' declared_type='png_bytep'/>
<field type='*' name='row_buf' declared_type='png_bytep'/>
<field type='*' name='sub_row' declared_type='png_bytep'/>
<field type='*' name='up_row' declared_type='png_bytep'/>
<field type='*' name='avg_row' declared_type='png_bytep'/>
<field type='*' name='paeth_row' declared_type='png_bytep'/>
<field type='{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}' name='row_info' declared_type='png_row_info'/>
<field type='L' name='idat_size' declared_type='png_uint_32'/>
<field type='L' name='crc' declared_type='png_uint_32'/>
<field type='^{png_color_struct=CCC}' name='palette' declared_type='png_colorp'/>
<field type='S' name='num_palette' declared_type='png_uint_16'/>
<field type='S' name='num_trans' declared_type='png_uint_16'/>
<field type='[5C]' name='chunk_name' declared_type='png_byte*'/>
<field type='C' name='compression' declared_type='png_byte'/>
<field type='C' name='filter' declared_type='png_byte'/>
<field type='C' name='interlaced' declared_type='png_byte'/>
<field type='C' name='pass' declared_type='png_byte'/>
<field type='C' name='do_filter' declared_type='png_byte'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='usr_bit_depth' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='usr_channels' declared_type='png_byte'/>
<field type='C' name='sig_bytes' declared_type='png_byte'/>
<field type='S' name='filler' declared_type='png_uint_16'/>
<field type='C' name='background_gamma_type' declared_type='png_byte'/>
<field type='f' name='background_gamma' declared_type='float'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background' declared_type='png_color_16'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background_1' declared_type='png_color_16'/>
<field type='^?' name='output_flush_fn' declared_type='png_flush_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='L' name='flush_dist' declared_type='png_uint_32'/>
<field type='L' name='flush_rows' declared_type='png_uint_32'/>
<field type='i' name='gamma_shift' declared_type='int'/>
<field type='f' name='gamma' declared_type='float'/>
<field type='f' name='screen_gamma' declared_type='float'/>
<field type='*' name='gamma_table' declared_type='png_bytep'/>
<field type='*' name='gamma_from_1' declared_type='png_bytep'/>
<field type='*' name='gamma_to_1' declared_type='png_bytep'/>
<field type='^^S' name='gamma_16_table' declared_type='png_uint_16pp'/>
<field type='^^S' name='gamma_16_from_1' declared_type='png_uint_16pp'/>
<field type='^^S' name='gamma_16_to_1' declared_type='png_uint_16pp'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='sig_bit' declared_type='png_color_8'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='shift' declared_type='png_color_8'/>
<field type='*' name='trans' declared_type='png_bytep'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='trans_values' declared_type='png_color_16'/>
<field type='^?' name='read_row_fn' declared_type='png_read_status_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='write_row_fn' declared_type='png_write_status_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='info_fn' declared_type='png_progressive_info_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' declared_type='png_infop'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='row_fn' declared_type='png_progressive_row_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='end_fn' declared_type='png_progressive_end_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' declared_type='png_infop'/>
<retval type='v' declared_type='void'/>
</field>
<field type='*' name='save_buffer_ptr' declared_type='png_bytep'/>
<field type='*' name='save_buffer' declared_type='png_bytep'/>
<field type='*' name='current_buffer_ptr' declared_type='png_bytep'/>
<field type='*' name='current_buffer' declared_type='png_bytep'/>
<field type='L' name='push_length' declared_type='png_uint_32'/>
<field type='L' name='skip_length' declared_type='png_uint_32'/>
<field type='L' name='save_buffer_size' declared_type='png_size_t'/>
<field type='L' name='save_buffer_max' declared_type='png_size_t'/>
<field type='L' name='buffer_size' declared_type='png_size_t'/>
<field type='L' name='current_buffer_size' declared_type='png_size_t'/>
<field type='i' name='process_mode' declared_type='int'/>
<field type='i' name='cur_palette' declared_type='int'/>
<field type='L' name='current_text_size' declared_type='png_size_t'/>
<field type='L' name='current_text_left' declared_type='png_size_t'/>
<field type='*' name='current_text' declared_type='png_charp'/>
<field type='*' name='current_text_ptr' declared_type='png_charp'/>
<field type='*' name='palette_lookup' declared_type='png_bytep'/>
<field type='*' name='dither_index' declared_type='png_bytep'/>
<field type='^S' name='hist' declared_type='png_uint_16p'/>
<field type='C' name='heuristic_method' declared_type='png_byte'/>
<field type='C' name='num_prev_filters' declared_type='png_byte'/>
<field type='*' name='prev_filters' declared_type='png_bytep'/>
<field type='^S' name='filter_weights' declared_type='png_uint_16p'/>
<field type='^S' name='inv_filter_weights' declared_type='png_uint_16p'/>
<field type='^S' name='filter_costs' declared_type='png_uint_16p'/>
<field type='^S' name='inv_filter_costs' declared_type='png_uint_16p'/>
<field type='*' name='time_buffer' declared_type='png_charp'/>
<field type='L' name='free_me' declared_type='png_uint_32'/>
<field type='^v' name='user_chunk_ptr' declared_type='png_voidp'/>
<field type='^?' name='read_user_chunk_fn' declared_type='png_user_chunk_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_unknown_chunk_t=[5C]*IC}' declared_type='png_unknown_chunkp'/>
<retval type='i' declared_type='int'/>
</field>
<field type='i' name='num_chunk_list' declared_type='int'/>
<field type='*' name='chunk_list' declared_type='png_bytep'/>
<field type='C' name='rgb_to_gray_status' declared_type='png_byte'/>
<field type='S' name='rgb_to_gray_red_coeff' declared_type='png_uint_16'/>
<field type='S' name='rgb_to_gray_green_coeff' declared_type='png_uint_16'/>
<field type='S' name='rgb_to_gray_blue_coeff' declared_type='png_uint_16'/>
<field type='L' name='mng_features_permitted' declared_type='png_uint_32'/>
<field type='l' name='int_gamma' declared_type='png_fixed_point'/>
<field type='C' name='filter_type' declared_type='png_byte'/>
<field type='L' name='asm_flags' declared_type='png_uint_32'/>
<field type='^v' name='mem_ptr' declared_type='png_voidp'/>
<field type='^?' name='malloc_fn' declared_type='png_malloc_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='^v' declared_type='png_voidp'/>
</field>
<field type='^?' name='free_fn' declared_type='png_free_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^v' declared_type='png_voidp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='*' name='big_row_buf' declared_type='png_bytep'/>
<field type='*' name='dither_sort' declared_type='png_bytep'/>
<field type='*' name='index_to_palette' declared_type='png_bytep'/>
<field type='*' name='palette_to_index' declared_type='png_bytep'/>
<field type='C' name='compression_type' declared_type='png_byte'/>
<field type='L' name='user_width_max' declared_type='png_uint_32'/>
<field type='L' name='user_height_max' declared_type='png_uint_32'/>
<field type='{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}' name='unknown_chunk' declared_type='png_unknown_chunk'/>
<field type='L' name='old_big_row_buf_size' declared_type='png_uint_32'/>
<field type='L' name='old_prev_row_size' declared_type='png_uint_32'/>
<field type='*' name='chunkdata' declared_type='png_charp'/>
</struct>
<struct type='{png_struct_def=&quot;jmpbuf&quot;[18i]&quot;error_fn&quot;^?&quot;warning_fn&quot;^?&quot;error_ptr&quot;^v&quot;write_data_fn&quot;^?&quot;read_data_fn&quot;^?&quot;io_ptr&quot;^v&quot;read_user_transform_fn&quot;^?&quot;write_user_transform_fn&quot;^?&quot;user_transform_ptr&quot;^v&quot;user_transform_depth&quot;C&quot;user_transform_channels&quot;C&quot;mode&quot;I&quot;flags&quot;I&quot;transformations&quot;I&quot;zstream&quot;{z_stream_s=&quot;next_in&quot;*&quot;avail_in&quot;I&quot;total_in&quot;I&quot;next_out&quot;*&quot;avail_out&quot;I&quot;total_out&quot;I&quot;msg&quot;*&quot;state&quot;^{internal_state}&quot;zalloc&quot;^?&quot;zfree&quot;^?&quot;opaque&quot;^v&quot;data_type&quot;i&quot;adler&quot;I&quot;reserved&quot;I}&quot;zbuf&quot;*&quot;zbuf_size&quot;I&quot;zlib_level&quot;i&quot;zlib_method&quot;i&quot;zlib_window_bits&quot;i&quot;zlib_mem_level&quot;i&quot;zlib_strategy&quot;i&quot;width&quot;I&quot;height&quot;I&quot;num_rows&quot;I&quot;usr_width&quot;I&quot;rowbytes&quot;I&quot;user_chunk_cache_max&quot;I&quot;iwidth&quot;I&quot;row_number&quot;I&quot;prev_row&quot;*&quot;row_buf&quot;*&quot;sub_row&quot;*&quot;up_row&quot;*&quot;avg_row&quot;*&quot;paeth_row&quot;*&quot;row_info&quot;{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}&quot;idat_size&quot;I&quot;crc&quot;I&quot;palette&quot;^{png_color_struct}&quot;num_palette&quot;S&quot;num_trans&quot;S&quot;chunk_name&quot;[5C]&quot;compression&quot;C&quot;filter&quot;C&quot;interlaced&quot;C&quot;pass&quot;C&quot;do_filter&quot;C&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;usr_bit_depth&quot;C&quot;pixel_depth&quot;C&quot;channels&quot;C&quot;usr_channels&quot;C&quot;sig_bytes&quot;C&quot;filler&quot;S&quot;background_gamma_type&quot;C&quot;background_gamma&quot;f&quot;background&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;background_1&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;output_flush_fn&quot;^?&quot;flush_dist&quot;I&quot;flush_rows&quot;I&quot;gamma_shift&quot;i&quot;gamma&quot;f&quot;screen_gamma&quot;f&quot;gamma_table&quot;*&quot;gamma_from_1&quot;*&quot;gamma_to_1&quot;*&quot;gamma_16_table&quot;^^S&quot;gamma_16_from_1&quot;^^S&quot;gamma_16_to_1&quot;^^S&quot;sig_bit&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;shift&quot;{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}&quot;trans&quot;*&quot;trans_values&quot;{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}&quot;read_row_fn&quot;^?&quot;write_row_fn&quot;^?&quot;info_fn&quot;^?&quot;row_fn&quot;^?&quot;end_fn&quot;^?&quot;save_buffer_ptr&quot;*&quot;save_buffer&quot;*&quot;current_buffer_ptr&quot;*&quot;current_buffer&quot;*&quot;push_length&quot;I&quot;skip_length&quot;I&quot;save_buffer_size&quot;I&quot;save_buffer_max&quot;I&quot;buffer_size&quot;I&quot;current_buffer_size&quot;I&quot;process_mode&quot;i&quot;cur_palette&quot;i&quot;current_text_size&quot;I&quot;current_text_left&quot;I&quot;current_text&quot;*&quot;current_text_ptr&quot;*&quot;palette_lookup&quot;*&quot;dither_index&quot;*&quot;hist&quot;^S&quot;heuristic_method&quot;C&quot;num_prev_filters&quot;C&quot;prev_filters&quot;*&quot;filter_weights&quot;^S&quot;inv_filter_weights&quot;^S&quot;filter_costs&quot;^S&quot;inv_filter_costs&quot;^S&quot;time_buffer&quot;*&quot;free_me&quot;I&quot;user_chunk_ptr&quot;^v&quot;read_user_chunk_fn&quot;^?&quot;num_chunk_list&quot;i&quot;chunk_list&quot;*&quot;rgb_to_gray_status&quot;C&quot;rgb_to_gray_red_coeff&quot;S&quot;rgb_to_gray_green_coeff&quot;S&quot;rgb_to_gray_blue_coeff&quot;S&quot;mng_features_permitted&quot;I&quot;int_gamma&quot;i&quot;filter_type&quot;C&quot;asm_flags&quot;I&quot;mem_ptr&quot;^v&quot;malloc_fn&quot;^?&quot;free_fn&quot;^?&quot;big_row_buf&quot;*&quot;dither_sort&quot;*&quot;index_to_palette&quot;*&quot;palette_to_index&quot;*&quot;compression_type&quot;C&quot;user_width_max&quot;I&quot;user_height_max&quot;I&quot;unknown_chunk&quot;{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}&quot;old_big_row_buf_size&quot;I&quot;old_prev_row_size&quot;I&quot;chunkdata&quot;*}' name='png_struct_def'>
<field type='[18i]' name='jmpbuf' declared_type='jmp_buf'/>
<field type='^?' name='error_fn' declared_type='png_error_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_const_charp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='warning_fn' declared_type='png_error_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_const_charp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='error_ptr' declared_type='png_voidp'/>
<field type='^?' name='write_data_fn' declared_type='png_rw_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='read_data_fn' declared_type='png_rw_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='io_ptr' declared_type='png_voidp'/>
<field type='^?' name='read_user_transform_fn' declared_type='png_user_transform_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_row_info_struct=IICCCC}' declared_type='png_row_infop'/>
<arg type='*' declared_type='png_bytep'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='write_user_transform_fn' declared_type='png_user_transform_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_row_info_struct=IICCCC}' declared_type='png_row_infop'/>
<arg type='*' declared_type='png_bytep'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^v' name='user_transform_ptr' declared_type='png_voidp'/>
<field type='C' name='user_transform_depth' declared_type='png_byte'/>
<field type='C' name='user_transform_channels' declared_type='png_byte'/>
<field type='L' name='mode' declared_type='png_uint_32'/>
<field type='L' name='flags' declared_type='png_uint_32'/>
<field type='L' name='transformations' declared_type='png_uint_32'/>
<field type='{z_stream_s=&quot;next_in&quot;*&quot;avail_in&quot;I&quot;total_in&quot;I&quot;next_out&quot;*&quot;avail_out&quot;I&quot;total_out&quot;I&quot;msg&quot;*&quot;state&quot;^{internal_state}&quot;zalloc&quot;^?&quot;zfree&quot;^?&quot;opaque&quot;^v&quot;data_type&quot;i&quot;adler&quot;I&quot;reserved&quot;I}' name='zstream' declared_type='z_stream'/>
<field type='*' name='zbuf' declared_type='png_bytep'/>
<field type='L' name='zbuf_size' declared_type='png_size_t'/>
<field type='i' name='zlib_level' declared_type='int'/>
<field type='i' name='zlib_method' declared_type='int'/>
<field type='i' name='zlib_window_bits' declared_type='int'/>
<field type='i' name='zlib_mem_level' declared_type='int'/>
<field type='i' name='zlib_strategy' declared_type='int'/>
<field type='L' name='width' declared_type='png_uint_32'/>
<field type='L' name='height' declared_type='png_uint_32'/>
<field type='L' name='num_rows' declared_type='png_uint_32'/>
<field type='L' name='usr_width' declared_type='png_uint_32'/>
<field type='L' name='rowbytes' declared_type='png_uint_32'/>
<field type='L' name='user_chunk_cache_max' declared_type='png_uint_32'/>
<field type='L' name='iwidth' declared_type='png_uint_32'/>
<field type='L' name='row_number' declared_type='png_uint_32'/>
<field type='*' name='prev_row' declared_type='png_bytep'/>
<field type='*' name='row_buf' declared_type='png_bytep'/>
<field type='*' name='sub_row' declared_type='png_bytep'/>
<field type='*' name='up_row' declared_type='png_bytep'/>
<field type='*' name='avg_row' declared_type='png_bytep'/>
<field type='*' name='paeth_row' declared_type='png_bytep'/>
<field type='{png_row_info_struct=&quot;width&quot;I&quot;rowbytes&quot;I&quot;color_type&quot;C&quot;bit_depth&quot;C&quot;channels&quot;C&quot;pixel_depth&quot;C}' name='row_info' declared_type='png_row_info'/>
<field type='L' name='idat_size' declared_type='png_uint_32'/>
<field type='L' name='crc' declared_type='png_uint_32'/>
<field type='^{png_color_struct=CCC}' name='palette' declared_type='png_colorp'/>
<field type='S' name='num_palette' declared_type='png_uint_16'/>
<field type='S' name='num_trans' declared_type='png_uint_16'/>
<field type='[5C]' name='chunk_name' declared_type='png_byte*'/>
<field type='C' name='compression' declared_type='png_byte'/>
<field type='C' name='filter' declared_type='png_byte'/>
<field type='C' name='interlaced' declared_type='png_byte'/>
<field type='C' name='pass' declared_type='png_byte'/>
<field type='C' name='do_filter' declared_type='png_byte'/>
<field type='C' name='color_type' declared_type='png_byte'/>
<field type='C' name='bit_depth' declared_type='png_byte'/>
<field type='C' name='usr_bit_depth' declared_type='png_byte'/>
<field type='C' name='pixel_depth' declared_type='png_byte'/>
<field type='C' name='channels' declared_type='png_byte'/>
<field type='C' name='usr_channels' declared_type='png_byte'/>
<field type='C' name='sig_bytes' declared_type='png_byte'/>
<field type='S' name='filler' declared_type='png_uint_16'/>
<field type='C' name='background_gamma_type' declared_type='png_byte'/>
<field type='f' name='background_gamma' declared_type='float'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background' declared_type='png_color_16'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='background_1' declared_type='png_color_16'/>
<field type='^?' name='output_flush_fn' declared_type='png_flush_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='L' name='flush_dist' declared_type='png_uint_32'/>
<field type='L' name='flush_rows' declared_type='png_uint_32'/>
<field type='i' name='gamma_shift' declared_type='int'/>
<field type='f' name='gamma' declared_type='float'/>
<field type='f' name='screen_gamma' declared_type='float'/>
<field type='*' name='gamma_table' declared_type='png_bytep'/>
<field type='*' name='gamma_from_1' declared_type='png_bytep'/>
<field type='*' name='gamma_to_1' declared_type='png_bytep'/>
<field type='^^S' name='gamma_16_table' declared_type='png_uint_16pp'/>
<field type='^^S' name='gamma_16_from_1' declared_type='png_uint_16pp'/>
<field type='^^S' name='gamma_16_to_1' declared_type='png_uint_16pp'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='sig_bit' declared_type='png_color_8'/>
<field type='{png_color_8_struct=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;gray&quot;C&quot;alpha&quot;C}' name='shift' declared_type='png_color_8'/>
<field type='*' name='trans' declared_type='png_bytep'/>
<field type='{png_color_16_struct=&quot;index&quot;C&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;gray&quot;S}' name='trans_values' declared_type='png_color_16'/>
<field type='^?' name='read_row_fn' declared_type='png_read_status_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='write_row_fn' declared_type='png_write_status_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='info_fn' declared_type='png_progressive_info_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' declared_type='png_infop'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='row_fn' declared_type='png_progressive_row_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='*' declared_type='png_bytep'/>
<arg type='L' declared_type='png_uint_32'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='end_fn' declared_type='png_progressive_end_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' declared_type='png_infop'/>
<retval type='v' declared_type='void'/>
</field>
<field type='*' name='save_buffer_ptr' declared_type='png_bytep'/>
<field type='*' name='save_buffer' declared_type='png_bytep'/>
<field type='*' name='current_buffer_ptr' declared_type='png_bytep'/>
<field type='*' name='current_buffer' declared_type='png_bytep'/>
<field type='L' name='push_length' declared_type='png_uint_32'/>
<field type='L' name='skip_length' declared_type='png_uint_32'/>
<field type='L' name='save_buffer_size' declared_type='png_size_t'/>
<field type='L' name='save_buffer_max' declared_type='png_size_t'/>
<field type='L' name='buffer_size' declared_type='png_size_t'/>
<field type='L' name='current_buffer_size' declared_type='png_size_t'/>
<field type='i' name='process_mode' declared_type='int'/>
<field type='i' name='cur_palette' declared_type='int'/>
<field type='L' name='current_text_size' declared_type='png_size_t'/>
<field type='L' name='current_text_left' declared_type='png_size_t'/>
<field type='*' name='current_text' declared_type='png_charp'/>
<field type='*' name='current_text_ptr' declared_type='png_charp'/>
<field type='*' name='palette_lookup' declared_type='png_bytep'/>
<field type='*' name='dither_index' declared_type='png_bytep'/>
<field type='^S' name='hist' declared_type='png_uint_16p'/>
<field type='C' name='heuristic_method' declared_type='png_byte'/>
<field type='C' name='num_prev_filters' declared_type='png_byte'/>
<field type='*' name='prev_filters' declared_type='png_bytep'/>
<field type='^S' name='filter_weights' declared_type='png_uint_16p'/>
<field type='^S' name='inv_filter_weights' declared_type='png_uint_16p'/>
<field type='^S' name='filter_costs' declared_type='png_uint_16p'/>
<field type='^S' name='inv_filter_costs' declared_type='png_uint_16p'/>
<field type='*' name='time_buffer' declared_type='png_charp'/>
<field type='L' name='free_me' declared_type='png_uint_32'/>
<field type='^v' name='user_chunk_ptr' declared_type='png_voidp'/>
<field type='^?' name='read_user_chunk_fn' declared_type='png_user_chunk_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^{png_unknown_chunk_t=[5C]*IC}' declared_type='png_unknown_chunkp'/>
<retval type='i' declared_type='int'/>
</field>
<field type='i' name='num_chunk_list' declared_type='int'/>
<field type='*' name='chunk_list' declared_type='png_bytep'/>
<field type='C' name='rgb_to_gray_status' declared_type='png_byte'/>
<field type='S' name='rgb_to_gray_red_coeff' declared_type='png_uint_16'/>
<field type='S' name='rgb_to_gray_green_coeff' declared_type='png_uint_16'/>
<field type='S' name='rgb_to_gray_blue_coeff' declared_type='png_uint_16'/>
<field type='L' name='mng_features_permitted' declared_type='png_uint_32'/>
<field type='l' name='int_gamma' declared_type='png_fixed_point'/>
<field type='C' name='filter_type' declared_type='png_byte'/>
<field type='L' name='asm_flags' declared_type='png_uint_32'/>
<field type='^v' name='mem_ptr' declared_type='png_voidp'/>
<field type='^?' name='malloc_fn' declared_type='png_malloc_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='L' declared_type='png_size_t'/>
<retval type='^v' declared_type='png_voidp'/>
</field>
<field type='^?' name='free_fn' declared_type='png_free_ptr' function_pointer='true'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' declared_type='png_structp'/>
<arg type='^v' declared_type='png_voidp'/>
<retval type='v' declared_type='void'/>
</field>
<field type='*' name='big_row_buf' declared_type='png_bytep'/>
<field type='*' name='dither_sort' declared_type='png_bytep'/>
<field type='*' name='index_to_palette' declared_type='png_bytep'/>
<field type='*' name='palette_to_index' declared_type='png_bytep'/>
<field type='C' name='compression_type' declared_type='png_byte'/>
<field type='L' name='user_width_max' declared_type='png_uint_32'/>
<field type='L' name='user_height_max' declared_type='png_uint_32'/>
<field type='{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}' name='unknown_chunk' declared_type='png_unknown_chunk'/>
<field type='L' name='old_big_row_buf_size' declared_type='png_uint_32'/>
<field type='L' name='old_prev_row_size' declared_type='png_uint_32'/>
<field type='*' name='chunkdata' declared_type='png_charp'/>
</struct>
<struct type='{png_text_struct=&quot;compression&quot;i&quot;key&quot;*&quot;text&quot;*&quot;text_length&quot;I}' name='png_text'>
<field type='i' name='compression' declared_type='int'/>
<field type='*' name='key' declared_type='png_charp'/>
<field type='*' name='text' declared_type='png_charp'/>
<field type='L' name='text_length' declared_type='png_size_t'/>
</struct>
<struct type='{png_text_struct=&quot;compression&quot;i&quot;key&quot;*&quot;text&quot;*&quot;text_length&quot;I}' name='png_text_struct'>
<field type='i' name='compression' declared_type='int'/>
<field type='*' name='key' declared_type='png_charp'/>
<field type='*' name='text' declared_type='png_charp'/>
<field type='L' name='text_length' declared_type='png_size_t'/>
</struct>
<struct type='{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}' name='png_time'>
<field type='S' name='year' declared_type='png_uint_16'/>
<field type='C' name='month' declared_type='png_byte'/>
<field type='C' name='day' declared_type='png_byte'/>
<field type='C' name='hour' declared_type='png_byte'/>
<field type='C' name='minute' declared_type='png_byte'/>
<field type='C' name='second' declared_type='png_byte'/>
</struct>
<struct type='{png_time_struct=&quot;year&quot;S&quot;month&quot;C&quot;day&quot;C&quot;hour&quot;C&quot;minute&quot;C&quot;second&quot;C}' name='png_time_struct'>
<field type='S' name='year' declared_type='png_uint_16'/>
<field type='C' name='month' declared_type='png_byte'/>
<field type='C' name='day' declared_type='png_byte'/>
<field type='C' name='hour' declared_type='png_byte'/>
<field type='C' name='minute' declared_type='png_byte'/>
<field type='C' name='second' declared_type='png_byte'/>
</struct>
<struct type='{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}' name='png_unknown_chunk'>
<field type='[5C]' name='name' declared_type='png_byte*'/>
<field type='*' name='data' declared_type='png_byte*'/>
<field type='L' name='size' declared_type='png_size_t'/>
<field type='C' name='location' declared_type='png_byte'/>
</struct>
<struct type='{png_unknown_chunk_t=&quot;name&quot;[5C]&quot;data&quot;*&quot;size&quot;I&quot;location&quot;C}' name='png_unknown_chunk_t'>
<field type='[5C]' name='name' declared_type='png_byte*'/>
<field type='*' name='data' declared_type='png_byte*'/>
<field type='L' name='size' declared_type='png_size_t'/>
<field type='C' name='location' declared_type='png_byte'/>
</struct>
<struct type='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;startPos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;I&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}' name='sCCParticle'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='pos' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='startPos' declared_type='CGPoint'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='color' declared_type='ccColor4F'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='deltaColor' declared_type='ccColor4F'/>
<field type='f' name='size' declared_type='float'/>
<field type='f' name='deltaSize' declared_type='float'/>
<field type='f' name='rotation' declared_type='float'/>
<field type='f' name='deltaRotation' declared_type='float'/>
<field type='f' name='timeToLive' declared_type='ccTime'/>
<field type='I' name='atlasIndex' declared_type='NSUInteger'/>
<field type='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})' name='mode' declared_type='union sCCParticle::'/>
</struct>
<struct type='{sImageTGA=&quot;status&quot;i&quot;type&quot;C&quot;pixelDepth&quot;C&quot;width&quot;s&quot;height&quot;s&quot;imageData&quot;*&quot;flipped&quot;i}' name='sImageTGA'>
<field type='i' name='status' declared_type='int'/>
<field type='C' name='type' declared_type='unsigned char'/>
<field type='C' name='pixelDepth' declared_type='unsigned char'/>
<field type='s' name='width' declared_type='short'/>
<field type='s' name='height' declared_type='short'/>
<field type='*' name='imageData' declared_type='unsigned char*'/>
<field type='i' name='flipped' declared_type='int'/>
</struct>
<struct type='{_sourceGroup=&quot;startIndex&quot;i&quot;currentIndex&quot;i&quot;totalSources&quot;i&quot;enabled&quot;B&quot;nonInterruptible&quot;B&quot;sourceStatuses&quot;^i}' name='sourceGroup'>
<field type='i' name='startIndex' declared_type='int'/>
<field type='i' name='currentIndex' declared_type='int'/>
<field type='i' name='totalSources' declared_type='int'/>
<field type='B' name='enabled' declared_type='_Bool'/>
<field type='B' name='nonInterruptible' declared_type='_Bool'/>
<field type='^i' name='sourceStatuses' declared_type='int*'/>
</struct>
<struct type='{_sourceInfo=&quot;usable&quot;B&quot;sourceId&quot;I&quot;attachedBufferId&quot;I}' name='sourceInfo'>
<field type='B' name='usable' declared_type='_Bool'/>
<field type='I' name='sourceId' declared_type='ALuint'/>
<field type='I' name='attachedBufferId' declared_type='ALuint'/>
</struct>
<struct type='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;startPos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;I&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}' name='tCCParticle'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='pos' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='startPos' declared_type='CGPoint'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='color' declared_type='ccColor4F'/>
<field type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}' name='deltaColor' declared_type='ccColor4F'/>
<field type='f' name='size' declared_type='float'/>
<field type='f' name='deltaSize' declared_type='float'/>
<field type='f' name='rotation' declared_type='float'/>
<field type='f' name='deltaRotation' declared_type='float'/>
<field type='f' name='timeToLive' declared_type='ccTime'/>
<field type='I' name='atlasIndex' declared_type='NSUInteger'/>
<field type='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})' name='mode' declared_type='union sCCParticle::'/>
</struct>
<struct type='{_hashElement=&quot;actions&quot;^{ccArray}&quot;actionIndex&quot;I&quot;currentActionSalvaged&quot;B&quot;paused&quot;B&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}&quot;target&quot;@&quot;currentAction&quot;@&quot;CCAction&quot;}' name='tHashElement'>
<field type='^{ccArray=II^@}' name='actions' declared_type='struct ccArray*'/>
<field type='I' name='actionIndex' declared_type='NSUInteger'/>
<field type='B' name='currentActionSalvaged' declared_type='BOOL'/>
<field type='B' name='paused' declared_type='BOOL'/>
<field type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}' name='hh' declared_type='UT_hash_handle'/>
<field type='@' name='target' declared_type='id'/>
<field type='@&quot;CCAction&quot;' name='currentAction' declared_type='CCAction*'/>
</struct>
<struct type='{sImageTGA=&quot;status&quot;i&quot;type&quot;C&quot;pixelDepth&quot;C&quot;width&quot;s&quot;height&quot;s&quot;imageData&quot;*&quot;flipped&quot;i}' name='tImageTGA'>
<field type='i' name='status' declared_type='int'/>
<field type='C' name='type' declared_type='unsigned char'/>
<field type='C' name='pixelDepth' declared_type='unsigned char'/>
<field type='s' name='width' declared_type='short'/>
<field type='s' name='height' declared_type='short'/>
<field type='*' name='imageData' declared_type='unsigned char*'/>
<field type='i' name='flipped' declared_type='int'/>
</struct>
<constant type='B' name='b2AABB' declared_type='_Bool'/>
<constant type='i' name='b2BlockAllocator' declared_type='int'/>
<constant type='i' name='b2Body' declared_type='int'/>
<constant type='i' name='b2BroadPhase' declared_type='int'/>
<constant type='i' name='b2ChainAndCircleContact' declared_type='int'/>
<constant type='i' name='b2ChainAndPolygonContact' declared_type='int'/>
<constant type='i' name='b2ChainShape' declared_type='int'/>
<constant type='i' name='b2CircleContact' declared_type='int'/>
<constant type='i' name='b2CircleShape' declared_type='int'/>
<constant type='i' name='b2Contact' declared_type='int'/>
<constant type='i' name='b2ContactFilter' declared_type='int'/>
<constant type='i' name='b2ContactListener' declared_type='int'/>
<constant type='i' name='b2ContactManager' declared_type='int'/>
<constant type='i' name='b2ContactSolver' declared_type='int'/>
<constant type='i' name='b2Controller' declared_type='int'/>
<constant type='i' name='b2DestructionListener' declared_type='int'/>
<constant type='v' name='b2DistanceJoint' declared_type='void'/>
<constant type='i' name='b2DistanceProxy' declared_type='int'/>
<constant type='i' name='b2Draw' declared_type='int'/>
<constant type='i' name='b2DynamicTree' declared_type='int'/>
<constant type='i' name='b2EdgeAndCircleContact' declared_type='int'/>
<constant type='i' name='b2EdgeAndPolygonContact' declared_type='int'/>
<constant type='i' name='b2EdgeShape' declared_type='int'/>
<constant type='i' name='b2Fixture' declared_type='int'/>
<constant type='i' name='b2FrictionJoint' declared_type='int'/>
<constant type='i' name='b2GearJoint' declared_type='int'/>
<constant type='i' name='b2Island' declared_type='int'/>
<constant type='i' name='b2Joint' declared_type='int'/>
<constant type='i' name='b2MotorJoint' declared_type='int'/>
<constant type='i' name='b2MouseJoint' declared_type='int'/>
<constant type='i' name='b2PolygonAndCircleContact' declared_type='int'/>
<constant type='i' name='b2PolygonContact' declared_type='int'/>
<constant type='i' name='b2PolygonShape' declared_type='int'/>
<constant type='i' name='b2PrismaticJoint' declared_type='int'/>
<constant type='i' name='b2PulleyJoint' declared_type='int'/>
<constant type='i' name='b2QueryCallback' declared_type='int'/>
<constant type='i' name='b2RayCastCallback' declared_type='int'/>
<constant type='i' name='b2RevoluteJoint' declared_type='int'/>
<constant type='i' name='b2Rope' declared_type='int'/>
<constant type='i' name='b2RopeJoint' declared_type='int'/>
<constant type='i' name='b2Shape' declared_type='int'/>
<constant type='i' name='b2StackAllocator' declared_type='int'/>
<constant type='i' name='b2Timer' declared_type='int'/>
<constant const='true' type='{b2Vec2=?}' name='b2Vec2_zero' declared_type='struct b2Vec2'/>
<constant type='i' name='b2WeldJoint' declared_type='int'/>
<constant type='i' name='b2WheelJoint' declared_type='int'/>
<constant type='i' name='b2World' declared_type='int'/>
<constant const='true' type='i' name='b2_blockSizes' declared_type='int'/>
<constant const='true' type='i' name='b2_chunkArrayIncrement' declared_type='int'/>
<constant const='true' type='i' name='b2_maxBlockSize' declared_type='int'/>
<constant const='true' type='i' name='b2_maxStackEntries' declared_type='int32'/>
<constant const='true' type='i' name='b2_nullFeature' declared_type='int'/>
<constant const='true' type='i' name='b2_stackSize' declared_type='int32'/>
<constant type='{b2Version=iii}' name='b2_version' declared_type='struct b2Version'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccBLACK' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccBLUE' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccGRAY' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccGREEN' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccMAGENTA' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccORANGE' declared_type='ccColor3B'/>
<constant const='true' type='*' name='ccPositionColor_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionColor_vert' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTextureA8Color_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTextureA8Color_vert' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTextureColorAlphaTest_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTextureColor_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTextureColor_vert' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTexture_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTexture_uColor_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTexture_uColor_vert' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPositionTexture_vert' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPosition_uColor_frag' declared_type='GLchar*'/>
<constant const='true' type='*' name='ccPosition_uColor_vert' declared_type='GLchar*'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccRED' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccWHITE' declared_type='ccColor3B'/>
<constant const='true' type='{_ccColor3B=CCC}' name='ccYELLOW' declared_type='ccColor3B'/>
<constant type='B' name='kCCProfilerCategoryBatchSprite' declared_type='BOOL'/>
<constant type='B' name='kCCProfilerCategoryParticles' declared_type='BOOL'/>
<constant type='B' name='kCCProfilerCategorySprite' declared_type='BOOL'/>
<constant const='true' type='@' name='kCDN_AsynchLoadComplete' declared_type='NSString*'/>
<constant const='true' type='@' name='kCDN_AudioManagerInitialised' declared_type='NSString*'/>
<constant const='true' type='@' name='kCDN_BadAlContext' declared_type='NSString*'/>
<constant const='true' type='i' name='kCDNoBuffer' declared_type='int'/>
<constant const='true' type='f' name='kCD_GainDefault' declared_type='float'/>
<constant const='true' type='f' name='kCD_PanDefault' declared_type='float'/>
<constant const='true' type='f' name='kCD_PanFullLeft' declared_type='float'/>
<constant const='true' type='f' name='kCD_PanFullRight' declared_type='float'/>
<constant const='true' type='f' name='kCD_PitchDefault' declared_type='float'/>
<constant const='true' type='f' name='kCD_PitchHigherOneOctave' declared_type='float'/>
<constant const='true' type='f' name='kCD_PitchLowerOneOctave' declared_type='float'/>
<constant type='{b2Vec2=?}' name='operator' declared_type='struct b2Vec2'/>
<constant const='true' type='[18c]' name='png_libpng_ver' declared_type='char*'/>
<constant const='true' type='[7i]' name='png_pass_dsp_mask' declared_type='int*'/>
<constant const='true' type='[7i]' name='png_pass_inc' declared_type='int*'/>
<constant const='true' type='[7i]' name='png_pass_mask' declared_type='int*'/>
<constant const='true' type='[7i]' name='png_pass_start' declared_type='int*'/>
<constant const='true' type='[7i]' name='png_pass_yinc' declared_type='int*'/>
<constant const='true' type='[7i]' name='png_pass_ystart' declared_type='int*'/>
<string_constant value='CCAnimationFrameDisplayedNotification' nsstring='true' name='CCAnimationFrameDisplayedNotification'/>
<string_constant value='Aphex.rc' name='COCOSDENSHION_VERSION'/>
<string_constant value=' libpng version 1.2.44 - June 26, 2010
' name='PNG_HEADER_VERSION_STRING'/>
<string_constant value='1.2.44' name='PNG_LIBPNG_VER_STRING'/>
<string_constant value='
' name='PNG_STRING_NEWLINE'/>
<string_constant value='a_color' nsstring='true' name='kCCAttributeNameColor'/>
<string_constant value='a_position' nsstring='true' name='kCCAttributeNamePosition'/>
<string_constant value='a_texCoord' nsstring='true' name='kCCAttributeNameTexCoord'/>
<string_constant value='ShaderPositionColor' nsstring='true' name='kCCShader_PositionColor'/>
<string_constant value='ShaderPositionTexture' nsstring='true' name='kCCShader_PositionTexture'/>
<string_constant value='ShaderPositionTextureA8Color' nsstring='true' name='kCCShader_PositionTextureA8Color'/>
<string_constant value='ShaderPositionTextureColor' nsstring='true' name='kCCShader_PositionTextureColor'/>
<string_constant value='ShaderPositionTextureColorAlphaTest' nsstring='true' name='kCCShader_PositionTextureColorAlphaTest'/>
<string_constant value='ShaderPositionTexture_uColor' nsstring='true' name='kCCShader_PositionTexture_uColor'/>
<string_constant value='ShaderPosition_uColor' nsstring='true' name='kCCShader_Position_uColor'/>
<string_constant value='u_alpha_value' name='kCCUniformAlphaTestValue'/>
<string_constant value='u_MVPMatrix' name='kCCUniformMVPMatrix_s'/>
<string_constant value='u_texture' name='kCCUniformSampler_s'/>
<enum value='4294967295' name='CCSpriteIndexNotInitialized'/>
<enum value='1' name='CCTMXOrientationHex'/>
<enum value='2' name='CCTMXOrientationIso'/>
<enum value='0' name='CCTMXOrientationOrtho'/>
<enum value='0' name='CCTextAlignmentLeft'/>
<enum value='1' name='CCZ_COMPRESSION_BZIP2'/>
<enum value='2' name='CCZ_COMPRESSION_GZIP'/>
<enum value='3' name='CCZ_COMPRESSION_NONE'/>
<enum value='0' name='CCZ_COMPRESSION_ZLIB'/>
<enum value='771' name='CC_BLEND_DST'/>
<enum value='1' name='CC_BLEND_SRC'/>
<enum value='0' name='CC_DIRECTOR_IOS_USE_BACKGROUND_THREAD'/>
<enum value='0' name='CC_DIRECTOR_MAC_THREAD'/>
<enum value='0.1f' name='CC_DIRECTOR_STATS_INTERVAL'/>
<enum value='1' name='CC_ENABLE_DEPRECATED'/>
<enum value='0' name='CC_ENABLE_GL_STATE_CACHE'/>
<enum value='0' name='CC_ENABLE_PROFILERS'/>
<enum value='0' name='CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL'/>
<enum value='8' name='CC_GL_ALL'/>
<enum value='8' name='CC_GL_BLEND'/>
<enum value='0' name='CC_LABELATLAS_DEBUG_DRAW'/>
<enum value='0' name='CC_LABELBMFONT_DEBUG_DRAW'/>
<enum value='0' name='CC_MAC_USE_DISPLAY_LINK_THREAD'/>
<enum value='2' name='CC_MAC_USE_MAIN_THREAD'/>
<enum value='1' name='CC_MAC_USE_OWN_THREAD'/>
<enum value='1' name='CC_NODE_RENDER_SUBPIXEL'/>
<enum value='16' name='CC_PVRMIPMAP_MAX'/>
<enum value='1' name='CC_SPRITEBATCHNODE_RENDER_SUBPIXEL'/>
<enum value='0' name='CC_SPRITE_DEBUG_DRAW'/>
<enum value='0' name='CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP'/>
<enum value='1' name='CC_TEXTURE_ATLAS_USE_VAO'/>
<enum value='1' name='CC_USE_LA88_LABELS'/>
<enum value='0' name='CD_BS_EMPTY'/>
<enum value='2' name='CD_BS_FAILED'/>
<enum value='1' name='CD_BS_LOADED'/>
<enum value='16' name='CD_BUFFERS_INCREMENT'/>
<enum value='64' name='CD_BUFFERS_START'/>
<enum value='200211438' name='CD_IGNORE_AUDIO_SESSION'/>
<enum value='267312043' name='CD_MUTE'/>
<enum value='267313068' name='CD_NO_SOURCE'/>
<enum value='8000' name='CD_SAMPLE_RATE_BASIC'/>
<enum value='44100' name='CD_SAMPLE_RATE_DEFAULT'/>
<enum value='44100' name='CD_SAMPLE_RATE_HIGH'/>
<enum value='16000' name='CD_SAMPLE_RATE_LOW'/>
<enum value='22050' name='CD_SAMPLE_RATE_MID'/>
<enum value='32' name='CD_SOURCE_LIMIT'/>
<enum value='131072' name='COCOS2D_VERSION'/>
<enum value='10' name='HASH_BKT_CAPACITY_THRESH'/>
<enum value='2971803890' name='HASH_BLOOM_SIGNATURE'/>
<enum value='32' name='HASH_INITIAL_NUM_BUCKETS'/>
<enum value='5' name='HASH_INITIAL_NUM_BUCKETS_LOG2'/>
<enum value='2685476833' name='HASH_SIGNATURE'/>
<enum value='0' name='KM_FALSE'/>
<enum value='5888' name='KM_GL_MODELVIEW'/>
<enum value='5889' name='KM_GL_PROJECTION'/>
<enum value='5890' name='KM_GL_TEXTURE'/>
<enum value='2' name='KM_PLANE_BOTTOM'/>
<enum value='5' name='KM_PLANE_FAR'/>
<enum value='0' name='KM_PLANE_LEFT'/>
<enum value='4' name='KM_PLANE_NEAR'/>
<enum value='1' name='KM_PLANE_RIGHT'/>
<enum value='3' name='KM_PLANE_TOP'/>
<enum value='1' name='KM_TRUE'/>
<enum value='8' name='PNG_AFTER_IDAT'/>
<enum value='248' name='PNG_ALL_FILTERS'/>
<enum value='5' name='PNG_ALL_MNG_FEATURES'/>
<enum value='2' name='PNG_BACKGROUND_GAMMA_FILE'/>
<enum value='1' name='PNG_BACKGROUND_GAMMA_SCREEN'/>
<enum value='3' name='PNG_BACKGROUND_GAMMA_UNIQUE'/>
<enum value='0' name='PNG_BACKGROUND_GAMMA_UNKNOWN'/>
<enum value='5' name='PNG_CHUNK_NAME_LENGTH'/>
<enum value='4' name='PNG_COLOR_MASK_ALPHA'/>
<enum value='2' name='PNG_COLOR_MASK_COLOR'/>
<enum value='1' name='PNG_COLOR_MASK_PALETTE'/>
<enum value='4' name='PNG_COLOR_TYPE_GA'/>
<enum value='0' name='PNG_COLOR_TYPE_GRAY'/>
<enum value='4' name='PNG_COLOR_TYPE_GRAY_ALPHA'/>
<enum value='3' name='PNG_COLOR_TYPE_PALETTE'/>
<enum value='2' name='PNG_COLOR_TYPE_RGB'/>
<enum value='6' name='PNG_COLOR_TYPE_RGBA'/>
<enum value='6' name='PNG_COLOR_TYPE_RGB_ALPHA'/>
<enum value='0' name='PNG_COMPRESSION_TYPE_BASE'/>
<enum value='0' name='PNG_COMPRESSION_TYPE_DEFAULT'/>
<enum value='0' name='PNG_CRC_DEFAULT'/>
<enum value='1' name='PNG_CRC_ERROR_QUIT'/>
<enum value='5' name='PNG_CRC_NO_CHANGE'/>
<enum value='4' name='PNG_CRC_QUIET_USE'/>
<enum value='2' name='PNG_CRC_WARN_DISCARD'/>
<enum value='3' name='PNG_CRC_WARN_USE'/>
<enum value='1' name='PNG_DESTROY_WILL_FREE_DATA'/>
<enum value='2' name='PNG_EQUATION_ARBITRARY'/>
<enum value='1' name='PNG_EQUATION_BASE_E'/>
<enum value='3' name='PNG_EQUATION_HYPERBOLIC'/>
<enum value='4' name='PNG_EQUATION_LAST'/>
<enum value='0' name='PNG_EQUATION_LINEAR'/>
<enum value='1' name='PNG_FILLER_AFTER'/>
<enum value='0' name='PNG_FILLER_BEFORE'/>
<enum value='64' name='PNG_FILTER_AVG'/>
<enum value='0' name='PNG_FILTER_HEURISTIC_DEFAULT'/>
<enum value='3' name='PNG_FILTER_HEURISTIC_LAST'/>
<enum value='1' name='PNG_FILTER_HEURISTIC_UNWEIGHTED'/>
<enum value='2' name='PNG_FILTER_HEURISTIC_WEIGHTED'/>
<enum value='8' name='PNG_FILTER_NONE'/>
<enum value='128' name='PNG_FILTER_PAETH'/>
<enum value='16' name='PNG_FILTER_SUB'/>
<enum value='0' name='PNG_FILTER_TYPE_BASE'/>
<enum value='0' name='PNG_FILTER_TYPE_DEFAULT'/>
<enum value='32' name='PNG_FILTER_UP'/>
<enum value='3' name='PNG_FILTER_VALUE_AVG'/>
<enum value='5' name='PNG_FILTER_VALUE_LAST'/>
<enum value='0' name='PNG_FILTER_VALUE_NONE'/>
<enum value='4' name='PNG_FILTER_VALUE_PAETH'/>
<enum value='1' name='PNG_FILTER_VALUE_SUB'/>
<enum value='2' name='PNG_FILTER_VALUE_UP'/>
<enum value='1' name='PNG_FLAG_MNG_EMPTY_PLTE'/>
<enum value='4' name='PNG_FLAG_MNG_FILTER_64'/>
<enum value='32767' name='PNG_FREE_ALL'/>
<enum value='8' name='PNG_FREE_HIST'/>
<enum value='16' name='PNG_FREE_ICCP'/>
<enum value='1024' name='PNG_FREE_LIST'/>
<enum value='16928' name='PNG_FREE_MUL'/>
<enum value='128' name='PNG_FREE_PCAL'/>
<enum value='4096' name='PNG_FREE_PLTE'/>
<enum value='64' name='PNG_FREE_ROWS'/>
<enum value='256' name='PNG_FREE_SCAL'/>
<enum value='32' name='PNG_FREE_SPLT'/>
<enum value='16384' name='PNG_FREE_TEXT'/>
<enum value='8192' name='PNG_FREE_TRNS'/>
<enum value='512' name='PNG_FREE_UNKN'/>
<enum value='3' name='PNG_HANDLE_CHUNK_ALWAYS'/>
<enum value='0' name='PNG_HANDLE_CHUNK_AS_DEFAULT'/>
<enum value='2' name='PNG_HANDLE_CHUNK_IF_SAFE'/>
<enum value='1' name='PNG_HANDLE_CHUNK_NEVER'/>
<enum value='4' name='PNG_HAVE_IDAT'/>
<enum value='16' name='PNG_HAVE_IEND'/>
<enum value='1' name='PNG_HAVE_IHDR'/>
<enum value='2' name='PNG_HAVE_PLTE'/>
<enum value='32768' name='PNG_INFO_IDAT'/>
<enum value='8' name='PNG_INFO_PLTE'/>
<enum value='32' name='PNG_INFO_bKGD'/>
<enum value='4' name='PNG_INFO_cHRM'/>
<enum value='1' name='PNG_INFO_gAMA'/>
<enum value='64' name='PNG_INFO_hIST'/>
<enum value='4096' name='PNG_INFO_iCCP'/>
<enum value='256' name='PNG_INFO_oFFs'/>
<enum value='1024' name='PNG_INFO_pCAL'/>
<enum value='128' name='PNG_INFO_pHYs'/>
<enum value='2' name='PNG_INFO_sBIT'/>
<enum value='16384' name='PNG_INFO_sCAL'/>
<enum value='8192' name='PNG_INFO_sPLT'/>
<enum value='2048' name='PNG_INFO_sRGB'/>
<enum value='512' name='PNG_INFO_tIME'/>
<enum value='16' name='PNG_INFO_tRNS'/>
<enum value='1' name='PNG_INTERLACE_ADAM7'/>
<enum value='2' name='PNG_INTERLACE_LAST'/>
<enum value='0' name='PNG_INTERLACE_NONE'/>
<enum value='64' name='PNG_INTRAPIXEL_DIFFERENCING'/>
<enum value='1' name='PNG_ITXT_COMPRESSION_NONE'/>
<enum value='2' name='PNG_ITXT_COMPRESSION_zTXt'/>
<enum value='79' name='PNG_KEYWORD_MAX_LENGTH'/>
<enum value='1' name='PNG_LIBPNG_BUILD_ALPHA'/>
<enum value='4' name='PNG_LIBPNG_BUILD_BASE_TYPE'/>
<enum value='2' name='PNG_LIBPNG_BUILD_BETA'/>
<enum value='8' name='PNG_LIBPNG_BUILD_PATCH'/>
<enum value='16' name='PNG_LIBPNG_BUILD_PRIVATE'/>
<enum value='3' name='PNG_LIBPNG_BUILD_RC'/>
<enum value='7' name='PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK'/>
<enum value='32' name='PNG_LIBPNG_BUILD_SPECIAL'/>
<enum value='4' name='PNG_LIBPNG_BUILD_STABLE'/>
<enum value='4' name='PNG_LIBPNG_BUILD_TYPE'/>
<enum value='10244' name='PNG_LIBPNG_VER'/>
<enum value='0' name='PNG_LIBPNG_VER_BUILD'/>
<enum value='13' name='PNG_LIBPNG_VER_DLLNUM'/>
<enum value='1' name='PNG_LIBPNG_VER_MAJOR'/>
<enum value='2' name='PNG_LIBPNG_VER_MINOR'/>
<enum value='44' name='PNG_LIBPNG_VER_RELEASE'/>
<enum value='0' name='PNG_LIBPNG_VER_SONUM'/>
<enum value='91' name='PNG_LITERAL_LEFT_SQUARE_BRACKET'/>
<enum value='93' name='PNG_LITERAL_RIGHT_SQUARE_BRACKET'/>
<enum value='35' name='PNG_LITERAL_SHARP'/>
<enum value='256' name='PNG_MAX_PALETTE_LENGTH'/>
<enum value='2147483647' name='PNG_MAX_UINT'/>
<enum value='0' name='PNG_NO_FILTERS'/>
<enum value='2' name='PNG_OFFSET_LAST'/>
<enum value='1' name='PNG_OFFSET_MICROMETER'/>
<enum value='0' name='PNG_OFFSET_PIXEL'/>
<enum value='2' name='PNG_RESOLUTION_LAST'/>
<enum value='1' name='PNG_RESOLUTION_METER'/>
<enum value='0' name='PNG_RESOLUTION_UNKNOWN'/>
<enum value='3' name='PNG_SCALE_LAST'/>
<enum value='1' name='PNG_SCALE_METER'/>
<enum value='2' name='PNG_SCALE_RADIAN'/>
<enum value='0' name='PNG_SCALE_UNKNOWN'/>
<enum value='1' name='PNG_SET_WILL_FREE_DATA'/>
<enum value='4294967295' name='PNG_SIZE_MAX'/>
<enum value='3' name='PNG_TEXT_COMPRESSION_LAST'/>
<enum value='-1' name='PNG_TEXT_COMPRESSION_NONE'/>
<enum value='-3' name='PNG_TEXT_COMPRESSION_NONE_WR'/>
<enum value='0' name='PNG_TEXT_COMPRESSION_zTXt'/>
<enum value='-2' name='PNG_TEXT_COMPRESSION_zTXt_WR'/>
<enum value='128' name='PNG_TRANSFORM_BGR'/>
<enum value='16' name='PNG_TRANSFORM_EXPAND'/>
<enum value='8192' name='PNG_TRANSFORM_GRAY_TO_RGB'/>
<enum value='0' name='PNG_TRANSFORM_IDENTITY'/>
<enum value='1024' name='PNG_TRANSFORM_INVERT_ALPHA'/>
<enum value='32' name='PNG_TRANSFORM_INVERT_MONO'/>
<enum value='4' name='PNG_TRANSFORM_PACKING'/>
<enum value='8' name='PNG_TRANSFORM_PACKSWAP'/>
<enum value='64' name='PNG_TRANSFORM_SHIFT'/>
<enum value='1' name='PNG_TRANSFORM_STRIP_16'/>
<enum value='2' name='PNG_TRANSFORM_STRIP_ALPHA'/>
<enum value='2048' name='PNG_TRANSFORM_STRIP_FILLER'/>
<enum value='4096' name='PNG_TRANSFORM_STRIP_FILLER_AFTER'/>
<enum value='2048' name='PNG_TRANSFORM_STRIP_FILLER_BEFORE'/>
<enum value='256' name='PNG_TRANSFORM_SWAP_ALPHA'/>
<enum value='512' name='PNG_TRANSFORM_SWAP_ENDIAN'/>
<enum value='2147483647' name='PNG_UINT_31_MAX'/>
<enum value='4294967295' name='PNG_UINT_32_MAX'/>
<enum value='0' name='PNG_USER_CHUNK_CACHE_MAX'/>
<enum value='0' name='PNG_USER_CHUNK_MALLOC_MAX'/>
<enum value='1000000' name='PNG_USER_HEIGHT_MAX'/>
<enum value='1000000' name='PNG_USER_WIDTH_MAX'/>
<enum value='2' name='PNG_USER_WILL_FREE_DATA'/>
<enum value='1' name='PNG_WARN_UNINITIALIZED_ROW'/>
<enum value='8192' name='PNG_ZBUF_SIZE'/>
<enum value='3' name='PNG_sRGB_INTENT_ABSOLUTE'/>
<enum value='4' name='PNG_sRGB_INTENT_LAST'/>
<enum value='0' name='PNG_sRGB_INTENT_PERCEPTUAL'/>
<enum value='1' name='PNG_sRGB_INTENT_RELATIVE'/>
<enum value='2' name='PNG_sRGB_INTENT_SATURATION'/>
<enum value='1' name='POINT_BEHIND_PLANE'/>
<enum value='0' name='POINT_INFRONT_OF_PLANE'/>
<enum value='2' name='POINT_ON_PLANE'/>
<enum value='5' name='TGA_ERROR_COMPRESSED_FILE'/>
<enum value='1' name='TGA_ERROR_FILE_OPEN'/>
<enum value='3' name='TGA_ERROR_INDEXED_COLOR'/>
<enum value='4' name='TGA_ERROR_MEMORY'/>
<enum value='2' name='TGA_ERROR_READING_FILE'/>
<enum value='0' name='TGA_OK'/>
<enum value='2' name='TMXLayerAttribBase64'/>
<enum value='4' name='TMXLayerAttribGzip'/>
<enum value='1' name='TMXLayerAttribNone'/>
<enum value='8' name='TMXLayerAttribZlib'/>
<enum value='2' name='TMXPropertyLayer'/>
<enum value='1' name='TMXPropertyMap'/>
<enum value='0' name='TMXPropertyNone'/>
<enum value='4' name='TMXPropertyObject'/>
<enum value='3' name='TMXPropertyObjectGroup'/>
<enum value='5' name='TMXPropertyTile'/>
<enum value='0.1f' name='b2_aabbExtension'/>
<enum value='2.0f' name='b2_aabbMultiplier'/>
<enum value='1' name='b2_addState'/>
<enum value='0.034906588' name='b2_angularSleepTolerance'/>
<enum value='0.034906588' name='b2_angularSlop'/>
<enum value='0.2f' name='b2_baumgarte'/>
<enum value='2' name='b2_dynamicBody'/>
<enum value='1.1920929E-7' name='b2_epsilon'/>
<enum value='1' name='b2_kinematicBody'/>
<enum value='0.01f' name='b2_linearSleepTolerance'/>
<enum value='0.005f' name='b2_linearSlop'/>
<enum value='0.13962635' name='b2_maxAngularCorrection'/>
<enum value='3.4028235E+38' name='b2_maxFloat'/>
<enum value='0.2f' name='b2_maxLinearCorrection'/>
<enum value='2' name='b2_maxManifoldPoints'/>
<enum value='8' name='b2_maxPolygonVertices'/>
<enum value='1.5707964' name='b2_maxRotation'/>
<enum value='2.4674013' name='b2_maxRotationSquared'/>
<enum value='8' name='b2_maxSubSteps'/>
<enum value='32' name='b2_maxTOIContacts'/>
<enum value='2.0f' name='b2_maxTranslation'/>
<enum value='4' name='b2_maxTranslationSquared'/>
<enum value='-1' name='b2_nullNode'/>
<enum value='0' name='b2_nullState'/>
<enum value='2' name='b2_persistState'/>
<enum value='3.14159265359f' name='b2_pi'/>
<enum value='0.0099999998' name='b2_polygonRadius'/>
<enum value='3' name='b2_removeState'/>
<enum value='0' name='b2_staticBody'/>
<enum value='0.5f' name='b2_timeToSleep'/>
<enum value='0.75f' name='b2_toiBaugarte'/>
<enum value='1.0f' name='b2_velocityThreshold'/>
<enum value='1' name='e_atLowerLimit'/>
<enum value='2' name='e_atUpperLimit'/>
<enum value='3' name='e_distanceJoint'/>
<enum value='3' name='e_equalLimits'/>
<enum value='9' name='e_frictionJoint'/>
<enum value='6' name='e_gearJoint'/>
<enum value='0' name='e_inactiveLimit'/>
<enum value='11' name='e_motorJoint'/>
<enum value='5' name='e_mouseJoint'/>
<enum value='2' name='e_prismaticJoint'/>
<enum value='4' name='e_pulleyJoint'/>
<enum value='1' name='e_revoluteJoint'/>
<enum value='10' name='e_ropeJoint'/>
<enum value='0' name='e_unknownJoint'/>
<enum value='8' name='e_weldJoint'/>
<enum value='7' name='e_wheelJoint'/>
<enum value='0' name='kAMM_FxOnly'/>
<enum value='1' name='kAMM_FxPlusMusic'/>
<enum value='2' name='kAMM_FxPlusMusicIfNoOtherAudio'/>
<enum value='3' name='kAMM_MediaPlayback'/>
<enum value='4' name='kAMM_PlayAndRecord'/>
<enum value='0' name='kAMRBDoNothing'/>
<enum value='2' name='kAMRBStop'/>
<enum value='1' name='kAMRBStopPlay'/>
<enum value='2' name='kAMStateInitialised'/>
<enum value='1' name='kAMStateInitialising'/>
<enum value='0' name='kAMStateUninitialised'/>
<enum value='0' name='kASC_Left'/>
<enum value='1' name='kASC_Right'/>
<enum value='-1' name='kCCActionTagInvalid'/>
<enum value='0' name='kCCDirectorProjection2D'/>
<enum value='1' name='kCCDirectorProjection3D'/>
<enum value='2' name='kCCDirectorProjectionCustom'/>
<enum value='1' name='kCCDirectorProjectionDefault'/>
<enum value='3758096384' name='kCCFlipedAll'/>
<enum value='536870911' name='kCCFlippedMask'/>
<enum value='0' name='kCCImageFormatJPEG'/>
<enum value='0' name='kCCImageFormatJPG'/>
<enum value='1' name='kCCImageFormatPNG'/>
<enum value='32' name='kCCItemSize'/>
<enum value='-1' name='kCCLabelAutomaticWidth'/>
<enum value='1' name='kCCLineBreakModeCharacterWrap'/>
<enum value='2' name='kCCLineBreakModeClip'/>
<enum value='3' name='kCCLineBreakModeHeadTruncation'/>
<enum value='5' name='kCCLineBreakModeMiddleTruncation'/>
<enum value='4' name='kCCLineBreakModeTailTruncation'/>
<enum value='0' name='kCCLineBreakModeWordWrap'/>
<enum value='168165376' name='kCCMacVersion_10_6'/>
<enum value='168230912' name='kCCMacVersion_10_7'/>
<enum value='168296448' name='kCCMacVersion_10_8'/>
<enum value='-128' name='kCCMenuHandlerPriority'/>
<enum value='1' name='kCCMenuStateTrackingTouch'/>
<enum value='0' name='kCCMenuStateWaiting'/>
<enum value='-1' name='kCCNodeTagInvalid'/>
<enum value='-1' name='kCCParticleDurationInfinity'/>
<enum value='0' name='kCCParticleModeGravity'/>
<enum value='1' name='kCCParticleModeRadius'/>
<enum value='-1' name='kCCParticleStartRadiusEqualToEndRadius'/>
<enum value='-1' name='kCCParticleStartSizeEqualToEndSize'/>
<enum value='0' name='kCCPositionTypeFree'/>
<enum value='2' name='kCCPositionTypeGrouped'/>
<enum value='1' name='kCCPositionTypeRelative'/>
<enum value='-2147483647' name='kCCPriorityNonSystemMin'/>
<enum value='-2147483648' name='kCCPrioritySystem'/>
<enum value='1' name='kCCProgressTimerTypeBar'/>
<enum value='0' name='kCCProgressTimerTypeRadial'/>
<enum value='4294967294' name='kCCRepeatForever'/>
<enum value='0' name='kCCResolutionStandard'/>
<enum value='0' name='kCCResolutionUnknown'/>
<enum value='3' name='kCCResolutioniPad'/>
<enum value='4' name='kCCResolutioniPadRetinaDisplay'/>
<enum value='1' name='kCCResolutioniPhone'/>
<enum value='2' name='kCCResolutioniPhoneRetinaDisplay'/>
<enum value='536870912' name='kCCTMXTileDiagonalFlag'/>
<enum value='2147483648' name='kCCTMXTileHorizontalFlag'/>
<enum value='1073741824' name='kCCTMXTileVerticalFlag'/>
<enum value='1' name='kCCTextAlignmentCenter'/>
<enum value='0' name='kCCTextAlignmentLeft'/>
<enum value='2' name='kCCTextAlignmentRight'/>
<enum value='4' name='kCCTexture2DPixelFormat_A8'/>
<enum value='6' name='kCCTexture2DPixelFormat_AI88'/>
<enum value='0' name='kCCTexture2DPixelFormat_Automatic'/>
<enum value='1' name='kCCTexture2DPixelFormat_Default'/>
<enum value='5' name='kCCTexture2DPixelFormat_I8'/>
<enum value='10' name='kCCTexture2DPixelFormat_PVRTC2'/>
<enum value='9' name='kCCTexture2DPixelFormat_PVRTC4'/>
<enum value='2' name='kCCTexture2DPixelFormat_RGB565'/>
<enum value='8' name='kCCTexture2DPixelFormat_RGB5A1'/>
<enum value='3' name='kCCTexture2DPixelFormat_RGB888'/>
<enum value='7' name='kCCTexture2DPixelFormat_RGBA4444'/>
<enum value='1' name='kCCTexture2DPixelFormat_RGBA8888'/>
<enum value='0' name='kCCTouchBegan'/>
<enum value='3' name='kCCTouchCancelled'/>
<enum value='2' name='kCCTouchEnded'/>
<enum value='4' name='kCCTouchMax'/>
<enum value='1' name='kCCTouchMoved'/>
<enum value='15' name='kCCTouchSelectorAllBits'/>
<enum value='1' name='kCCTouchSelectorBeganBit'/>
<enum value='8' name='kCCTouchSelectorCancelledBit'/>
<enum value='4' name='kCCTouchSelectorEndedBit'/>
<enum value='2' name='kCCTouchSelectorMovedBit'/>
<enum value='0' name='kCCUniformMVPMatrix'/>
<enum value='1' name='kCCUniformSampler'/>
<enum value='2' name='kCCUniform_MAX'/>
<enum value='2' name='kCCVertexAttribFlag_Color'/>
<enum value='0' name='kCCVertexAttribFlag_None'/>
<enum value='7' name='kCCVertexAttribFlag_PosColorTex'/>
<enum value='1' name='kCCVertexAttribFlag_Position'/>
<enum value='4' name='kCCVertexAttribFlag_TexCoords'/>
<enum value='1' name='kCCVertexAttrib_Color'/>
<enum value='3' name='kCCVertexAttrib_MAX'/>
<enum value='0' name='kCCVertexAttrib_Position'/>
<enum value='2' name='kCCVertexAttrib_TexCoords'/>
<enum value='2' name='kCCVerticalTextAlignmentBottom'/>
<enum value='1' name='kCCVerticalTextAlignmentCenter'/>
<enum value='0' name='kCCVerticalTextAlignmentTop'/>
<enum value='67108864' name='kCCiOSVersion_4_0'/>
<enum value='67109120' name='kCCiOSVersion_4_0_1'/>
<enum value='67174400' name='kCCiOSVersion_4_1'/>
<enum value='67239936' name='kCCiOSVersion_4_2'/>
<enum value='67240192' name='kCCiOSVersion_4_2_1'/>
<enum value='67305472' name='kCCiOSVersion_4_3'/>
<enum value='67305728' name='kCCiOSVersion_4_3_1'/>
<enum value='67305984' name='kCCiOSVersion_4_3_2'/>
<enum value='67306240' name='kCCiOSVersion_4_3_3'/>
<enum value='67306496' name='kCCiOSVersion_4_3_4'/>
<enum value='67306752' name='kCCiOSVersion_4_3_5'/>
<enum value='83886080' name='kCCiOSVersion_5_0'/>
<enum value='83886336' name='kCCiOSVersion_5_0_1'/>
<enum value='83951616' name='kCCiOSVersion_5_1_0'/>
<enum value='100663296' name='kCCiOSVersion_6_0_0'/>
<enum value='2' name='kIT_Exponential'/>
<enum value='0' name='kIT_Linear'/>
<enum value='1' name='kIT_SCurve'/>
<enum value='0' name='kLAS_Init'/>
<enum value='1' name='kLAS_Loaded'/>
<enum value='3' name='kLAS_Paused'/>
<enum value='2' name='kLAS_Playing'/>
<enum value='4' name='kLAS_Stopped'/>
<enum value='1' name='kOrientationDownOver'/>
<enum value='0' name='kOrientationLeftOver'/>
<enum value='1' name='kOrientationRightOver'/>
<enum value='0' name='kOrientationUpOver'/>
<enum value='-1' name='kParticleDurationInfinity'/>
<enum value='-1' name='kParticleStartSizeEqualToEndSize'/>
<enum value='0' name='kPositionTypeFree'/>
<enum value='2' name='kPositionTypeGrouped'/>
<enum value='0.015625' name='kmEpsilon'/>
<enum value='3.141592f' name='kmPI'/>
<enum value='0.017453f' name='kmPIOver180'/>
<enum value='57.295779f' name='kmPIUnder180'/>
<function name='CCProfilingBeginTimingBlock'>
<arg type='@' name='timerName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CCProfilingEndTimingBlock'>
<arg type='@' name='timerName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CCProfilingResetTimingBlock'>
<arg type='@' name='timerName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CDGetOpenALAudioData'>
<arg type='^{__CFURL=}' name='inFileURL' declared_type='CFURLRef'/>
<arg type='^i' name='outDataSize' declared_type='ALsizei*'/>
<arg type='^i' name='outDataFormat' declared_type='ALenum*'/>
<arg type='^i' name='outSampleRate' declared_type='ALsizei*'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CDloadCafAudioData'>
<arg type='^{__CFURL=}' name='inFileURL' declared_type='CFURLRef'/>
<arg type='^i' name='outDataSize' declared_type='ALsizei*'/>
<arg type='^i' name='outDataFormat' declared_type='ALenum*'/>
<arg type='^i' name='outSampleRate' declared_type='ALsizei*'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CDloadWaveAudioData'>
<arg type='^{__CFURL=}' name='inFileURL' declared_type='CFURLRef'/>
<arg type='^i' name='outDataSize' declared_type='ALsizei*'/>
<arg type='^i' name='outDataFormat' declared_type='ALenum*'/>
<arg type='^i' name='outSampleRate' declared_type='ALsizei*'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CGAffineToGL'>
<arg const='true' type='^{CGAffineTransform=ffffff}' name='t' declared_type='CGAffineTransform*'/>
<arg type='^f' name='m' declared_type='GLfloat*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='FNTConfigLoadFile'>
<arg type='@' name='file' declared_type='NSString*'/>
<retval type='@' declared_type='CCBMFontConfiguration*'/>
</function>
<function name='FNTConfigRemoveCache'>
<retval type='v' declared_type='void'/>
</function>
<function name='GLToCGAffine'>
<arg const='true' type='^f' name='m' declared_type='GLfloat*'/>
<arg type='^{CGAffineTransform=ffffff}' name='t' declared_type='CGAffineTransform*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='NEON_Matrix4Mul'>
<arg const='true' type='^f' name='a' declared_type='float*'/>
<arg const='true' type='^f' name='b' declared_type='float*'/>
<arg type='^f' name='output' declared_type='float*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='NEON_Matrix4Vector4Mul'>
<arg const='true' type='^f' name='m' declared_type='float*'/>
<arg const='true' type='^f' name='v' declared_type='float*'/>
<arg type='^f' name='output' declared_type='float*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2Alloc'>
<arg type='i' name='size' declared_type='int32'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='b2ClipSegmentToLine'>
<arg type='i' name='vOut' declared_type='int'/>
<arg type='i' name='vIn' declared_type='int'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='b2CollideCircles'>
<arg type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold' declared_type='struct b2Manifold*'/>
<arg const='true' type='^i' name='circleA' declared_type='int*'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollideEdgeAndCircle'>
<arg type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold' declared_type='struct b2Manifold*'/>
<arg const='true' type='^i' name='polygonA' declared_type='int*'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollideEdgeAndPolygon'>
<arg type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold' declared_type='struct b2Manifold*'/>
<arg const='true' type='^i' name='edgeA' declared_type='int*'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollidePolygonAndCircle'>
<arg type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold' declared_type='struct b2Manifold*'/>
<arg const='true' type='^i' name='polygonA' declared_type='int*'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollidePolygons'>
<arg type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold' declared_type='struct b2Manifold*'/>
<arg const='true' type='^i' name='polygonA' declared_type='int*'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='b2Cross'>
<arg const='true' type='i' name='s' declared_type='int'/>
<arg const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function name='b2Distance'>
<arg type='^{b2DistanceOutput=iiii}' name='output' declared_type='struct b2DistanceOutput*'/>
<arg type='^{b2SimplexCache=ii[3i][3i]}' name='cache' declared_type='struct b2SimplexCache*'/>
<arg const='true' type='^{b2DistanceInput={b2DistanceProxy=????i?i[2i]^i}{b2DistanceProxy=????i?i[2i]^i}iiB}' name='input' declared_type='struct b2DistanceInput*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='b2Dot'>
<arg const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<retval type='i' declared_type='int'/>
</function>
<function name='b2Free'>
<arg type='^v' name='mem' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2GetPointStates'>
<arg type='i' name='state1' declared_type='enum b2PointState'/>
<arg type='i' name='state2' declared_type='enum b2PointState'/>
<arg const='true' type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold1' declared_type='struct b2Manifold*'/>
<arg const='true' type='^{b2Manifold={b2ManifoldPoint=iii(b2ContactID={b2ContactFeature=iiii}i)}iiii}' name='manifold2' declared_type='struct b2Manifold*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='b2InvSqrt'>
<arg type='i' name='x' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function inline='true' name='b2IsValid'>
<arg type='i' name='x' declared_type='int'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2Log' variadic='true'>
<arg const='true' type='*' name='string' declared_type='char*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='b2MixFriction'>
<arg type='f' name='friction1' declared_type='float32'/>
<arg type='f' name='friction2' declared_type='float32'/>
<retval type='f' declared_type='float32'/>
</function>
<function inline='true' name='b2MixRestitution'>
<arg type='f' name='restitution1' declared_type='float32'/>
<arg type='f' name='restitution2' declared_type='float32'/>
<retval type='f' declared_type='float32'/>
</function>
<function inline='true' name='b2Mul'>
<arg const='true' type='{b2Mat22=?}' declared_type='struct b2Mat22'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function inline='true' name='b2MulT'>
<arg const='true' type='{b2Mat22=?}' declared_type='struct b2Mat22'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function inline='true' name='b2PairLessThan'>
<arg const='true' type='{b2Pair=ii}' declared_type='struct b2Pair'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2TestOverlap'>
<arg const='true' type='^i' name='shapeA' declared_type='int*'/>
<arg type='i' name='indexA' declared_type='int'/>
<arg const='true' type='^i' name='shapeB' declared_type='int*'/>
<arg type='i' name='indexB' declared_type='int'/>
<arg const='true' type='i' declared_type='int'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2TimeOfImpact'>
<arg type='^{b2TOIOutput=ii}' name='output' declared_type='struct b2TOIOutput*'/>
<arg const='true' type='^i' name='input' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2Vec2'>
<retval type='i' declared_type='int'/>
</function>
<function name='base64Decode'>
<arg type='*' name='in' declared_type='unsigned char*'/>
<arg type='I' name='inLength' declared_type='unsigned int'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<retval type='i' declared_type='int'/>
</function>
<function inline='true' name='ccArrayAppendArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='^{ccArray=II^@}' name='plusArr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayAppendArrayWithResize'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='^{ccArray=II^@}' name='plusArr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayAppendObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayAppendObjectWithResize'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayContainsObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function inline='true' name='ccArrayDoubleCapacity'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayEnsureExtraCapacity'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='I' name='extra' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayFastRemoveObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayFastRemoveObjectAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayFree'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayFullRemoveArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='^{ccArray=II^@}' name='minusArr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayGetIndexOfObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='I' declared_type='NSUInteger'/>
</function>
<function inline='true' name='ccArrayInsertObjectAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayMakeObjectPerformSelectorWithArrayObjects'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type=':' name='sel' declared_type='SEL'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayMakeObjectsPerformSelector'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type=':' name='sel' declared_type='SEL'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayMakeObjectsPerformSelectorWithObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type=':' name='sel' declared_type='SEL'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayNew'>
<arg type='I' name='capacity' declared_type='NSUInteger'/>
<retval type='^{ccArray=II^@}' declared_type='ccArray*'/>
</function>
<function inline='true' name='ccArrayRemoveAllObjects'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayRemoveArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='^{ccArray=II^@}' name='minusArr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayRemoveObject'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='@' name='object' declared_type='id'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayRemoveObjectAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArrayShrink'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccArraySwapObjectsAtIndexes'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccArray*'/>
<arg type='I' name='index1' declared_type='NSUInteger'/>
<arg type='I' name='index2' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayAppendArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='^{ccArray=II^@}' name='plusArr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayAppendArrayWithResize'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='^{ccArray=II^@}' name='plusArr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayAppendValue'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayAppendValueWithResize'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayContainsValue'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function inline='true' name='ccCArrayDoubleCapacity'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayEnsureExtraCapacity'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='I' name='extra' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayFastRemoveValueAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayFree'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayFullRemoveArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='^{ccArray=II^@}' name='minusArr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayGetIndexOfValue'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<retval type='I' declared_type='NSUInteger'/>
</function>
<function inline='true' name='ccCArrayInsertValueAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayNew'>
<arg type='I' name='capacity' declared_type='NSUInteger'/>
<retval type='^{ccArray=II^@}' declared_type='ccCArray*'/>
</function>
<function inline='true' name='ccCArrayRemoveAllValues'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayRemoveArray'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='^{ccArray=II^@}' name='minusArr' declared_type='ccCArray*'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayRemoveValue'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='@' name='value' declared_type='CCARRAY_ID'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccCArrayRemoveValueAtIndex'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccCardinalSplineAt'>
<arg type='{CGPoint=ff}' name='p0' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p1' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p2' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p3' declared_type='CGPoint'/>
<arg type='f' name='tension' declared_type='CGFloat'/>
<arg type='f' name='t' declared_type='ccTime'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccDrawCardinalSpline'>
<arg type='@' name='config' declared_type='CCPointArray*'/>
<arg type='f' name='tension' declared_type='CGFloat'/>
<arg type='I' name='segments' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawCatmullRom'>
<arg type='@' name='arrayOfControlPoints' declared_type='CCPointArray*'/>
<arg type='I' name='segments' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawCircle'>
<arg type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<arg type='f' name='radius' declared_type='float'/>
<arg type='f' name='angle' declared_type='float'/>
<arg type='I' name='segments' declared_type='NSUInteger'/>
<arg type='B' name='drawLineToCenter' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawColor4B'>
<arg type='C' name='r' declared_type='GLubyte'/>
<arg type='C' name='g' declared_type='GLubyte'/>
<arg type='C' name='b' declared_type='GLubyte'/>
<arg type='C' name='a' declared_type='GLubyte'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawColor4F'>
<arg type='f' name='r' declared_type='GLfloat'/>
<arg type='f' name='g' declared_type='GLfloat'/>
<arg type='f' name='b' declared_type='GLfloat'/>
<arg type='f' name='a' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawCubicBezier'>
<arg type='{CGPoint=ff}' name='origin' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='control1' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='control2' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='destination' declared_type='CGPoint'/>
<arg type='I' name='segments' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawLine'>
<arg type='{CGPoint=ff}' name='origin' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='destination' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawPoint'>
<arg type='{CGPoint=ff}' name='point' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawPoints'>
<arg const='true' type='^{CGPoint=ff}' name='points' declared_type='CGPoint*'/>
<arg type='I' name='numberOfPoints' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawPoly'>
<arg const='true' type='^{CGPoint=ff}' name='vertices' declared_type='CGPoint*'/>
<arg type='I' name='numOfVertices' declared_type='NSUInteger'/>
<arg type='B' name='closePolygon' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawQuadBezier'>
<arg type='{CGPoint=ff}' name='origin' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='control' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='destination' declared_type='CGPoint'/>
<arg type='I' name='segments' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawRect'>
<arg type='{CGPoint=ff}' name='origin' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='destination' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawSolidPoly'>
<arg const='true' type='^{CGPoint=ff}' name='poli' declared_type='CGPoint*'/>
<arg type='I' name='numberOfPoints' declared_type='NSUInteger'/>
<arg type='{_ccColor4F=ffff}' name='color' declared_type='ccColor4F'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccDrawSolidRect'>
<arg type='{CGPoint=ff}' name='origin' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='destination' declared_type='CGPoint'/>
<arg type='{_ccColor4F=ffff}' name='color' declared_type='ccColor4F'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLActiveTexture'>
<arg type='I' name='textureEnum' declared_type='GLenum'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLBindTexture2D'>
<arg type='I' name='textureId' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLBlendFunc'>
<arg type='I' name='sfactor' declared_type='GLenum'/>
<arg type='I' name='dfactor' declared_type='GLenum'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLDeleteProgram'>
<arg type='I' name='program' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLDeleteTexture'>
<arg type='I' name='textureId' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLEnable'>
<arg type='i' name='flags' declared_type='ccGLServerState'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLEnableVertexAttribs'>
<arg type='I' name='flags' declared_type='unsigned int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLGetActiveTexture'>
<retval type='I' declared_type='GLenum'/>
</function>
<function name='ccGLInvalidateStateCache'>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLUniformModelViewProjectionMatrix'>
<arg type='@' name='program' declared_type='CCGLProgram*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccGLUseProgram'>
<arg type='I' name='program' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccInflateCCZFile'>
<arg const='true' type='*' name='filename' declared_type='char*'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<retval type='i' declared_type='int'/>
</function>
<function name='ccInflateGZipFile'>
<arg const='true' type='*' name='filename' declared_type='char*'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<retval type='i' declared_type='int'/>
</function>
<function name='ccInflateMemory'>
<arg type='*' name='in' declared_type='unsigned char*'/>
<arg type='I' name='inLength' declared_type='unsigned int'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<retval type='i' declared_type='int'/>
</function>
<function name='ccInflateMemoryWithHint'>
<arg type='*' name='in' declared_type='unsigned char*'/>
<arg type='I' name='inLength' declared_type='unsigned int'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<arg type='I' name='outLenghtHint' declared_type='unsigned int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='ccLoadFileIntoMemory'>
<arg const='true' type='*' name='filename' declared_type='char*'/>
<arg type='^*' name='out' declared_type='unsigned char**'/>
<retval type='i' declared_type='NSInteger'/>
</function>
<function name='ccNextPOT'>
<arg type='L' name='value' declared_type='unsigned long'/>
<retval type='L' declared_type='unsigned long'/>
</function>
<function name='ccPointSize'>
<arg type='f' name='pointSize' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</function>
<function name='ccSetProjectionMatrixDirty'>
<retval type='v' declared_type='void'/>
</function>
<function name='ccVertexLineIntersect'>
<arg type='f' name='Ax' declared_type='float'/>
<arg type='f' name='Ay' declared_type='float'/>
<arg type='f' name='Bx' declared_type='float'/>
<arg type='f' name='By' declared_type='float'/>
<arg type='f' name='Cx' declared_type='float'/>
<arg type='f' name='Cy' declared_type='float'/>
<arg type='f' name='Dx' declared_type='float'/>
<arg type='f' name='Dy' declared_type='float'/>
<arg type='^f' name='T' declared_type='float*'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function name='ccVertexLineToPolygon'>
<arg type='^{CGPoint=ff}' name='points' declared_type='CGPoint*'/>
<arg type='f' name='stroke' declared_type='float'/>
<arg type='^{_ccVertex2F=ff}' name='vertices' declared_type='ccVertex2F*'/>
<arg type='I' name='offset' declared_type='NSUInteger'/>
<arg type='I' name='nuPoints' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='ccc3'>
<arg const='true' type='C' name='r' declared_type='GLubyte'/>
<arg const='true' type='C' name='g' declared_type='GLubyte'/>
<arg const='true' type='C' name='b' declared_type='GLubyte'/>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</function>
<function inline='true' name='ccc4'>
<arg const='true' type='C' name='r' declared_type='GLubyte'/>
<arg const='true' type='C' name='g' declared_type='GLubyte'/>
<arg const='true' type='C' name='b' declared_type='GLubyte'/>
<arg const='true' type='C' name='o' declared_type='GLubyte'/>
<retval type='{_ccColor4B=CCCC}' declared_type='ccColor4B'/>
</function>
<function inline='true' name='ccc4FEqual'>
<arg type='{_ccColor4F=ffff}' name='a' declared_type='ccColor4F'/>
<arg type='{_ccColor4F=ffff}' name='b' declared_type='ccColor4F'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function inline='true' name='ccc4FFromccc3B'>
<arg type='{_ccColor3B=CCC}' name='c' declared_type='ccColor3B'/>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</function>
<function inline='true' name='ccc4FFromccc4B'>
<arg type='{_ccColor4B=CCCC}' name='c' declared_type='ccColor4B'/>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</function>
<function inline='true' name='ccc4f'>
<arg const='true' type='f' name='r' declared_type='GLfloat'/>
<arg const='true' type='f' name='g' declared_type='GLfloat'/>
<arg const='true' type='f' name='b' declared_type='GLfloat'/>
<arg const='true' type='f' name='a' declared_type='GLfloat'/>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</function>
<function inline='true' name='ccg'>
<arg const='true' type='i' name='x' declared_type='NSInteger'/>
<arg const='true' type='i' name='y' declared_type='NSInteger'/>
<retval type='{_ccGridSize=ii}' declared_type='ccGridSize'/>
</function>
<function inline='true' name='ccpAdd'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpAngle'>
<arg type='{CGPoint=ff}' name='a' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='b' declared_type='CGPoint'/>
<retval type='f' declared_type='float'/>
</function>
<function name='ccpAngleSigned'>
<arg type='{CGPoint=ff}' name='a' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='b' declared_type='CGPoint'/>
<retval type='f' declared_type='float'/>
</function>
<function name='ccpClamp'>
<arg type='{CGPoint=ff}' name='p' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='from' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='to' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpCompMult'>
<arg type='{CGPoint=ff}' name='a' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='b' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpCompOp'>
<arg type='{CGPoint=ff}' name='p' declared_type='CGPoint'/>
<arg type='^?' name='opFunc' declared_type='float (*)(float)' function_pointer='true'>
<arg type='f' declared_type='float'/>
<retval type='f' declared_type='float'/>
</arg>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpCross'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function name='ccpDistance'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function inline='true' name='ccpDistanceSQ'>
<arg const='true' type='{CGPoint=ff}' name='p1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='p2' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function inline='true' name='ccpDot'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function name='ccpForAngle'>
<arg const='true' type='f' name='a' declared_type='CGFloat'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpFromSize'>
<arg type='{CGSize=ff}' name='s' declared_type='CGSize'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpFuzzyEqual'>
<arg type='{CGPoint=ff}' name='a' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='b' declared_type='CGPoint'/>
<arg type='f' name='variance' declared_type='float'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function name='ccpIntersectPoint'>
<arg type='{CGPoint=ff}' name='A' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='B' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='C' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='D' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpLength'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function inline='true' name='ccpLengthSQ'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function name='ccpLerp'>
<arg type='{CGPoint=ff}' name='a' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='b' declared_type='CGPoint'/>
<arg type='f' name='alpha' declared_type='float'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpLineIntersect'>
<arg type='{CGPoint=ff}' name='p1' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p2' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p3' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='p4' declared_type='CGPoint'/>
<arg type='^f' name='s' declared_type='float*'/>
<arg type='^f' name='t' declared_type='float*'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function inline='true' name='ccpMidpoint'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpMult'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<arg const='true' type='f' name='s' declared_type='CGFloat'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpNeg'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpNormalize'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpPerp'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpProject'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpRPerp'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function inline='true' name='ccpRotate'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpRotateByAngle'>
<arg type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='pivot' declared_type='CGPoint'/>
<arg type='f' name='angle' declared_type='float'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpSegmentIntersect'>
<arg type='{CGPoint=ff}' name='A' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='B' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='C' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' name='D' declared_type='CGPoint'/>
<retval type='B' declared_type='BOOL'/>
</function>
<function inline='true' name='ccpSub'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='ccpToAngle'>
<arg const='true' type='{CGPoint=ff}' name='v' declared_type='CGPoint'/>
<retval type='f' declared_type='CGFloat'/>
</function>
<function inline='true' name='ccpUnrotate'>
<arg const='true' type='{CGPoint=ff}' name='v1' declared_type='CGPoint'/>
<arg const='true' type='{CGPoint=ff}' name='v2' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</function>
<function name='clampf'>
<arg type='f' name='value' declared_type='float'/>
<arg type='f' name='min_inclusive' declared_type='float'/>
<arg type='f' name='max_inclusive' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function name='cocos2dVersion'>
<retval type='@' declared_type='NSString*'/>
</function>
<function inline='true' name='insertionSort'>
<arg type='^{ccArray=II^@}' name='arr' declared_type='ccCArray*'/>
<arg type='^?' name='comparator' declared_type='int (*)(void *, void *)' function_pointer='true'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='kmAABBAssign'>
<arg type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' name='pOut' declared_type='kmAABB*'/>
<arg const='true' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' name='pIn' declared_type='kmAABB*'/>
<retval const='true' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' declared_type='kmAABB*'/>
</function>
<function name='kmAABBContainsPoint'>
<arg const='true' type='^{kmVec3=fff}' name='pPoint' declared_type='kmVec3*'/>
<arg const='true' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' name='pBox' declared_type='kmAABB*'/>
<retval const='true' type='i' declared_type='int'/>
</function>
<function name='kmAABBScale'>
<arg type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' name='pOut' declared_type='kmAABB*'/>
<arg const='true' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' name='pIn' declared_type='kmAABB*'/>
<arg type='f' name='s' declared_type='float'/>
<retval const='true' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' declared_type='kmAABB*'/>
</function>
<function name='kmAlmostEqual'>
<arg type='f' name='lhs' declared_type='float'/>
<arg type='f' name='rhs' declared_type='float'/>
<retval type='C' declared_type='unsigned char'/>
</function>
<function name='kmDegreesToRadians'>
<arg type='f' name='degrees' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmGLFreeAll'>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLGetMatrix'>
<arg type='I' name='mode' declared_type='kmGLEnum'/>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLLoadIdentity'>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLLoadMatrix'>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLMatrixMode'>
<arg type='I' name='mode' declared_type='kmGLEnum'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLMultMatrix'>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLPopMatrix'>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLPushMatrix'>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLRotatef'>
<arg type='f' name='angle' declared_type='float'/>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<arg type='f' name='z' declared_type='float'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLScalef'>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<arg type='f' name='z' declared_type='float'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmGLTranslatef'>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<arg type='f' name='z' declared_type='float'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmMat3Adjugate'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3AreEqual'>
<arg const='true' type='^{kmMat3=[9f]}' name='pM1' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM2' declared_type='kmMat3*'/>
<retval const='true' type='i' declared_type='int'/>
</function>
<function name='kmMat3Assign'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Determinant'>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='f' declared_type='float'/>
</function>
<function name='kmMat3Fill'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^f' name='pMat' declared_type='float*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Identity'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Inverse'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='pDeterminate' declared_type='float'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3IsIdentity'>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='i' declared_type='int'/>
</function>
<function name='kmMat3Multiply'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM1' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM2' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Rotation'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3RotationAxisAngle'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmVec3=fff}' name='axis' declared_type='struct kmVec3*'/>
<arg type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3RotationQuaternion'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='struct kmQuaternion*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3RotationToAxisAngle'>
<arg type='^{kmVec3=fff}' name='pAxis' declared_type='struct kmVec3*'/>
<arg type='^f' name='radians' declared_type='float*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmMat3RotationX'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3RotationY'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3RotationZ'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3ScalarMultiply'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM' declared_type='kmMat3*'/>
<arg const='true' type='f' name='pFactor' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Scaling'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='x' declared_type='float'/>
<arg const='true' type='f' name='y' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Translation'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='f' name='x' declared_type='float'/>
<arg const='true' type='f' name='y' declared_type='float'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat3Transpose'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='kmMat3*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='kmMat3*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='kmMat3*'/>
</function>
<function name='kmMat4AreEqual'>
<arg const='true' type='^{kmMat4=[16f]}' name='pM1' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM2' declared_type='kmMat4*'/>
<retval const='true' type='i' declared_type='int'/>
</function>
<function name='kmMat4Assign'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4ExtractPlane'>
<arg type='^{kmPlane=ffff}' name='pOut' declared_type='struct kmPlane*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<arg const='true' type='I' name='plane' declared_type='unsigned int'/>
<retval const='true' type='^{kmPlane=ffff}' declared_type='struct kmPlane*'/>
</function>
<function name='kmMat4ExtractRotation'>
<arg type='^{kmMat3=[9f]}' name='pOut' declared_type='struct kmMat3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat3=[9f]}' declared_type='struct kmMat3*'/>
</function>
<function name='kmMat4Fill'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^f' name='pMat' declared_type='float*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4GetForwardVec3'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmMat4GetRightVec3'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmMat4GetUpVec3'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmMat4Identity'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4Inverse'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4IsIdentity'>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='i' declared_type='int'/>
</function>
<function name='kmMat4LookAt'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmVec3=fff}' name='pEye' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pCenter' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pUp' declared_type='struct kmVec3*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4Multiply'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM1' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM2' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4OrthographicProjection'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg type='f' name='left' declared_type='float'/>
<arg type='f' name='right' declared_type='float'/>
<arg type='f' name='bottom' declared_type='float'/>
<arg type='f' name='top' declared_type='float'/>
<arg type='f' name='nearVal' declared_type='float'/>
<arg type='f' name='farVal' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4PerspectiveProjection'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg type='f' name='fovY' declared_type='float'/>
<arg type='f' name='aspect' declared_type='float'/>
<arg type='f' name='zNear' declared_type='float'/>
<arg type='f' name='zFar' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationAxisAngle'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmVec3=fff}' name='axis' declared_type='struct kmVec3*'/>
<arg type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationPitchYawRoll'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='pitch' declared_type='float'/>
<arg const='true' type='f' name='yaw' declared_type='float'/>
<arg const='true' type='f' name='roll' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationQuaternion'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pQ' declared_type='struct kmQuaternion*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationToAxisAngle'>
<arg type='^{kmVec3=fff}' name='pAxis' declared_type='struct kmVec3*'/>
<arg type='^f' name='radians' declared_type='float*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmMat4RotationTranslation'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='rotation' declared_type='struct kmMat3*'/>
<arg const='true' type='^{kmVec3=fff}' name='translation' declared_type='struct kmVec3*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationX'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationY'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4RotationZ'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='radians' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4Scaling'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='x' declared_type='float'/>
<arg const='true' type='f' name='y' declared_type='float'/>
<arg const='true' type='f' name='z' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4Translation'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='f' name='x' declared_type='float'/>
<arg const='true' type='f' name='y' declared_type='float'/>
<arg const='true' type='f' name='z' declared_type='float'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmMat4Transpose'>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pIn' declared_type='kmMat4*'/>
<retval const='true' type='^{kmMat4=[16f]}' declared_type='kmMat4*'/>
</function>
<function name='kmPlaneClassifyPoint'>
<arg const='true' type='^{kmPlane=ffff}' name='pIn' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='pP' declared_type='kmVec3*'/>
<retval const='true' type='i' declared_type='POINT_CLASSIFICATION'/>
</function>
<function name='kmPlaneDot'>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV' declared_type='struct kmVec4*'/>
<retval const='true' type='f' declared_type='float'/>
</function>
<function name='kmPlaneDotCoord'>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='struct kmVec3*'/>
<retval const='true' type='f' declared_type='float'/>
</function>
<function name='kmPlaneDotNormal'>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='struct kmVec3*'/>
<retval const='true' type='f' declared_type='float'/>
</function>
<function name='kmPlaneFromPointNormal'>
<arg type='^{kmPlane=ffff}' name='pOut' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='pPoint' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pNormal' declared_type='struct kmVec3*'/>
<retval const='true' type='^{kmPlane=ffff}' declared_type='kmPlane*'/>
</function>
<function name='kmPlaneFromPoints'>
<arg type='^{kmPlane=ffff}' name='pOut' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='p1' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='p2' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='p3' declared_type='struct kmVec3*'/>
<retval const='true' type='^{kmPlane=ffff}' declared_type='kmPlane*'/>
</function>
<function name='kmPlaneIntersectLine'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV2' declared_type='struct kmVec3*'/>
<retval const='true' type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmPlaneNormalize'>
<arg type='^{kmPlane=ffff}' name='pOut' declared_type='kmPlane*'/>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<retval const='true' type='^{kmPlane=ffff}' declared_type='kmPlane*'/>
</function>
<function name='kmPlaneScale'>
<arg type='^{kmPlane=ffff}' name='pOut' declared_type='kmPlane*'/>
<arg const='true' type='^{kmPlane=ffff}' name='pP' declared_type='kmPlane*'/>
<arg type='f' name='s' declared_type='float'/>
<retval const='true' type='^{kmPlane=ffff}' declared_type='kmPlane*'/>
</function>
<function name='kmQuaternionAdd'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pQ1' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pQ2' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionAssign'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionConjugate'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval const='true' type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionDot'>
<arg const='true' type='^{kmQuaternion=ffff}' name='q1' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q2' declared_type='kmQuaternion*'/>
<retval const='true' type='f' declared_type='float'/>
</function>
<function name='kmQuaternionExp'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionIdentity'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionInverse'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionIsIdentity'>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='kmQuaternionLength'>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmQuaternionLengthSq'>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmQuaternionLn'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionMultiply'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q1' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q2' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionMultiplyVec3'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmVec3=fff}' name='v' declared_type='struct kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='struct kmVec3*'/>
</function>
<function name='kmQuaternionNormalize'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionRotationAxis'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='struct kmVec3*'/>
<arg type='f' name='angle' declared_type='float'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionRotationBetweenVec3'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmVec3=fff}' name='vec1' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='vec2' declared_type='struct kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='fallback' declared_type='struct kmVec3*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionRotationMatrix'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pIn' declared_type='struct kmMat3*'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionRotationYawPitchRoll'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg type='f' name='yaw' declared_type='float'/>
<arg type='f' name='pitch' declared_type='float'/>
<arg type='f' name='roll' declared_type='float'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionScale'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<arg type='f' name='s' declared_type='float'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionSlerp'>
<arg type='^{kmQuaternion=ffff}' name='pOut' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q1' declared_type='kmQuaternion*'/>
<arg const='true' type='^{kmQuaternion=ffff}' name='q2' declared_type='kmQuaternion*'/>
<arg type='f' name='t' declared_type='float'/>
<retval type='^{kmQuaternion=ffff}' declared_type='kmQuaternion*'/>
</function>
<function name='kmQuaternionToAxisAngle'>
<arg const='true' type='^{kmQuaternion=ffff}' name='pIn' declared_type='kmQuaternion*'/>
<arg type='^{kmVec3=fff}' name='pVector' declared_type='struct kmVec3*'/>
<arg type='^f' name='pAngle' declared_type='float*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmRadiansToDegrees'>
<arg type='f' name='radians' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmRay2Fill'>
<arg type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' name='ray' declared_type='kmRay2*'/>
<arg type='f' name='px' declared_type='float'/>
<arg type='f' name='py' declared_type='float'/>
<arg type='f' name='vx' declared_type='float'/>
<arg type='f' name='vy' declared_type='float'/>
<retval type='v' declared_type='void'/>
</function>
<function name='kmRay2IntersectCircle'>
<arg const='true' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' name='ray' declared_type='kmRay2*'/>
<arg const='true' type='{kmVec2=ff}' name='centre' declared_type='kmVec2'/>
<arg const='true' type='f' name='radius' declared_type='float'/>
<arg type='^{kmVec2=ff}' name='intersection' declared_type='kmVec2*'/>
<retval type='C' declared_type='unsigned char'/>
</function>
<function name='kmRay2IntersectLineSegment'>
<arg const='true' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' name='ray' declared_type='kmRay2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p2' declared_type='kmVec2*'/>
<arg type='^{kmVec2=ff}' name='intersection' declared_type='kmVec2*'/>
<retval type='C' declared_type='unsigned char'/>
</function>
<function name='kmRay2IntersectTriangle'>
<arg const='true' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' name='ray' declared_type='kmRay2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p2' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p3' declared_type='kmVec2*'/>
<arg type='^{kmVec2=ff}' name='intersection' declared_type='kmVec2*'/>
<arg type='^{kmVec2=ff}' name='normal_out' declared_type='kmVec2*'/>
<retval type='C' declared_type='unsigned char'/>
</function>
<function name='kmSQR'>
<arg type='f' name='s' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec2Add'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV2' declared_type='kmVec2*'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2AreEqual'>
<arg const='true' type='^{kmVec2=ff}' name='p1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='p2' declared_type='kmVec2*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='kmVec2Dot'>
<arg const='true' type='^{kmVec2=ff}' name='pV1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV2' declared_type='kmVec2*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec2Fill'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2Length'>
<arg const='true' type='^{kmVec2=ff}' name='pIn' declared_type='kmVec2*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec2LengthSq'>
<arg const='true' type='^{kmVec2=ff}' name='pIn' declared_type='kmVec2*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec2Normalize'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pIn' declared_type='kmVec2*'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2Scale'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pIn' declared_type='kmVec2*'/>
<arg const='true' type='f' name='s' declared_type='float'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2Subtract'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV2' declared_type='kmVec2*'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2Transform'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV1' declared_type='kmVec2*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM' declared_type='struct kmMat3*'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec2TransformCoord'>
<arg type='^{kmVec2=ff}' name='pOut' declared_type='kmVec2*'/>
<arg const='true' type='^{kmVec2=ff}' name='pV' declared_type='kmVec2*'/>
<arg const='true' type='^{kmMat3=[9f]}' name='pM' declared_type='struct kmMat3*'/>
<retval type='^{kmVec2=ff}' declared_type='kmVec2*'/>
</function>
<function name='kmVec3Add'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV2' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3AreEqual'>
<arg const='true' type='^{kmVec3=fff}' name='p1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='p2' declared_type='kmVec3*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='kmVec3Assign'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pIn' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Cross'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV2' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Dot'>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV2' declared_type='kmVec3*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec3Fill'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<arg type='f' name='z' declared_type='float'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3InverseTransform'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3InverseTransformNormal'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pVect' declared_type='kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Length'>
<arg const='true' type='^{kmVec3=fff}' name='pIn' declared_type='kmVec3*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec3LengthSq'>
<arg const='true' type='^{kmVec3=fff}' name='pIn' declared_type='kmVec3*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec3Normalize'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pIn' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Scale'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pIn' declared_type='kmVec3*'/>
<arg const='true' type='f' name='s' declared_type='float'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Subtract'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV2' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Transform'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV1' declared_type='kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3TransformCoord'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3TransformNormal'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<arg const='true' type='^{kmVec3=fff}' name='pV' declared_type='kmVec3*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec3Zero'>
<arg type='^{kmVec3=fff}' name='pOut' declared_type='kmVec3*'/>
<retval type='^{kmVec3=fff}' declared_type='kmVec3*'/>
</function>
<function name='kmVec4Add'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV1' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV2' declared_type='kmVec4*'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4AreEqual'>
<arg const='true' type='^{kmVec4=ffff}' name='p1' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='p2' declared_type='kmVec4*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='kmVec4Assign'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pIn' declared_type='kmVec4*'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Dot'>
<arg const='true' type='^{kmVec4=ffff}' name='pV1' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV2' declared_type='kmVec4*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec4Fill'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg type='f' name='x' declared_type='float'/>
<arg type='f' name='y' declared_type='float'/>
<arg type='f' name='z' declared_type='float'/>
<arg type='f' name='w' declared_type='float'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Length'>
<arg const='true' type='^{kmVec4=ffff}' name='pIn' declared_type='kmVec4*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec4LengthSq'>
<arg const='true' type='^{kmVec4=ffff}' name='pIn' declared_type='kmVec4*'/>
<retval type='f' declared_type='float'/>
</function>
<function name='kmVec4Lerp'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV1' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV2' declared_type='kmVec4*'/>
<arg type='f' name='t' declared_type='float'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Normalize'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pIn' declared_type='kmVec4*'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Scale'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pIn' declared_type='kmVec4*'/>
<arg const='true' type='f' name='s' declared_type='float'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Subtract'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV1' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV2' declared_type='kmVec4*'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4Transform'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV' declared_type='kmVec4*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='kmVec4TransformArray'>
<arg type='^{kmVec4=ffff}' name='pOut' declared_type='kmVec4*'/>
<arg type='I' name='outStride' declared_type='unsigned int'/>
<arg const='true' type='^{kmVec4=ffff}' name='pV' declared_type='kmVec4*'/>
<arg type='I' name='vStride' declared_type='unsigned int'/>
<arg const='true' type='^{kmMat4=[16f]}' name='pM' declared_type='struct kmMat4*'/>
<arg type='I' name='count' declared_type='unsigned int'/>
<retval type='^{kmVec4=ffff}' declared_type='kmVec4*'/>
</function>
<function name='km_mat4_stack_initialize'>
<arg type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}' name='stack' declared_type='km_mat4_stack*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='km_mat4_stack_pop'>
<arg type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}' name='stack' declared_type='km_mat4_stack*'/>
<arg type='^{kmMat4=[16f]}' name='pOut' declared_type='kmMat4*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='km_mat4_stack_push'>
<arg type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}' name='stack' declared_type='km_mat4_stack*'/>
<arg const='true' type='^{kmMat4=[16f]}' name='item' declared_type='kmMat4*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='km_mat4_stack_release'>
<arg type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}' name='stack' declared_type='km_mat4_stack*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='m_vertices'>
<retval type='i' declared_type='int'/>
</function>
<function name='max'>
<arg type='f' name='lhs' declared_type='float'/>
<arg type='f' name='rhs' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function inline='true' name='mergesortL'>
<arg type='^{ccArray=II^@}' name='array' declared_type='ccCArray*'/>
<arg type='L' name='width' declared_type='size_t'/>
<arg type='^?' name='compar' declared_type='int (*)(void *, void *)' function_pointer='true'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</arg>
<retval type='i' declared_type='int'/>
</function>
<function name='min'>
<arg type='f' name='lhs' declared_type='float'/>
<arg type='f' name='rhs' declared_type='float'/>
<retval type='f' declared_type='float'/>
</function>
<function name='png_read_destroy'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' name='png_ptr' declared_type='png_structp'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' name='info_ptr' declared_type='png_infop'/>
<arg type='^{png_info_struct=IIII^{png_color_struct}SSCCCCCCCC[8C]fCii^{png_text_struct}{png_time_struct=SCCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}iiCIIC^Sffffffff*ii*^*CCI^{png_unknown_chunk_t}I**IC^{png_sPLT_struct}ICdd**^*iiiiiiiii}' name='end_info_ptr' declared_type='png_infop'/>
<retval type='v' declared_type='void'/>
</function>
<function name='png_write_destroy'>
<arg type='^{png_struct_def=[18i]^?^?^v^?^?^v^?^?^vCCIII{z_stream_s=*II*II*^{internal_state}^?^?^viII}*IiiiiiIIIIIIII******{png_row_info_struct=IICCCC}II^{png_color_struct}SS[5C]CCCCCCCCCCCCSCf{png_color_16_struct=CSSSS}{png_color_16_struct=CSSSS}^?IIiff***^^S^^S^^S{png_color_8_struct=CCCCC}{png_color_8_struct=CCCCC}*{png_color_16_struct=CSSSS}^?^?^?^?^?****IIIIIIiiII****^SCC*^S^S^S^S*I^v^?i*CSSSIiCI^v^?^?****CII{png_unknown_chunk_t=[5C]*IC}II*}' name='png_ptr' declared_type='png_structp'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='pointerswap'>
<arg type='^v' name='a' declared_type='void*'/>
<arg type='^v' name='b' declared_type='void*'/>
<arg type='L' name='width' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sortByPriority'>
<arg type='@' name='first' declared_type='id'/>
<arg type='@' name='second' declared_type='id'/>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='i' declared_type='NSComparisonResult'/>
</function>
<function name='tgaDestroy'>
<arg type='^{sImageTGA=iCCss*i}' name='info' declared_type='tImageTGA*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='tgaLoad'>
<arg const='true' type='*' name='filename' declared_type='char*'/>
<retval type='^{sImageTGA=iCCss*i}' declared_type='tImageTGA*'/>
</function>
<function name='tgaLoadHeader'>
<arg type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}' name='file' declared_type='FILE*'/>
<arg type='^{sImageTGA=iCCss*i}' name='info' declared_type='tImageTGA*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='tgaLoadImageData'>
<arg type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}' name='file' declared_type='FILE*'/>
<arg type='^{sImageTGA=iCCss*i}' name='info' declared_type='tImageTGA*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='tgaRGBtogreyscale'>
<arg type='^{sImageTGA=iCCss*i}' name='info' declared_type='tImageTGA*'/>
<retval type='v' declared_type='void'/>
</function>
<function_alias name='glBindVertexArray' original='glBindVertexArrayOES'/>
<function_alias name='glClearDepth' original='glClearDepthf'/>
<function_alias name='glDeleteVertexArrays' original='glDeleteVertexArraysOES'/>
<function_alias name='glGenVertexArrays' original='glGenVertexArraysOES'/>
<function_alias name='png_benign_error' original='png_error'/>
<function_alias name='png_chunk_benign_error' original='png_chunk_error'/>
<function_alias name='png_memcmp' original='memcmp'/>
<function_alias name='png_memcpy' original='memcpy'/>
<function_alias name='png_memset' original='memset'/>
<function_alias name='png_snprintf' original='snprintf'/>
<function_alias name='png_snprintf2' original='snprintf'/>
<function_alias name='png_snprintf6' original='snprintf'/>
<function_alias name='png_strlen' original='strlen'/>
<class name='CCAccelAmplitude'>
<method selector='actionWithAction:duration:' class_method='true'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:duration:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setRate:'>
<arg type='f' name='rate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCAccelDeccelAmplitude'>
<method selector='actionWithAction:duration:' class_method='true'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:duration:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setRate:'>
<arg type='f' name='rate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCAction'>
<method selector='action' class_method='true'>
<retval type='@' declared_type='id'/>
</method>
<method selector='copyWithZone:'>
<arg type='^{_NSZone=}' name='zone' declared_type='NSZone*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='init'>
<retval type='@' declared_type='id'/>
</method>
<method selector='isDone'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='originalTarget'>
<retval type='@' declared_type='id'/>
</method>
<method selector='setTag:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='startWithTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='step:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stop'>
<retval type='v' declared_type='void'/>
</method>
<method selector='tag'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='target'>
<retval type='@' declared_type='id'/>
</method>
<method selector='update:'>
<arg type='f' name='time' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCActionEase'>
<method selector='actionWithAction:' class_method='true'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCActionInterval'>
<method selector='actionWithDuration:' class_method='true'>
<arg type='f' name='d' declared_type='ccTime' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='elapsed'>
<retval type='f' declared_type='ccTime'/>
</method>
<method selector='initWithDuration:'>
<arg type='f' name='d' declared_type='ccTime' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isDone'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='reverse'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
</class>
<class name='CCActionManager'>
<method selector='addAction:target:paused:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type='B' name='paused' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='getActionByTag:target:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<retval type='@' declared_type='CCAction*'/>
</method>
<method selector='numberOfRunningActionsInTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='pauseAllRunningActions'>
<retval type='@' declared_type='NSSet*'/>
</method>
<method selector='pauseTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAction:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeActionByTag:target:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAllActions'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAllActionsFromTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeTargets:'>
<arg type='@' name='targetsToResume' declared_type='NSSet*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedManager' class_method='true'>
<retval type='@' declared_type='CCActionManager*'/>
</method>
</class>
<class name='CCActionTween'>
<method selector='actionWithDuration:key:from:to:' class_method='true'>
<arg type='f' name='aDuration' declared_type='ccTime' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<arg type='f' name='from' declared_type='float' index='2'/>
<arg type='f' name='to' declared_type='float' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:key:from:to:'>
<arg type='f' name='aDuration' declared_type='ccTime' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<arg type='f' name='from' declared_type='float' index='2'/>
<arg type='f' name='to' declared_type='float' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCAnimate'>
<method selector='actionWithAnimation:' class_method='true'>
<arg type='@' name='animation' declared_type='CCAnimation*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionWithAnimation:restoreOriginalFrame:' class_method='true'>
<arg type='@' name='animation' declared_type='CCAnimation*' index='0'/>
<arg type='B' name='restoreOriginalFrame' declared_type='BOOL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionWithDuration:animation:restoreOriginalFrame:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='animation' declared_type='CCAnimation*' index='1'/>
<arg type='B' name='restoreOriginalFrame' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='animation'>
<retval type='@' declared_type='CCAnimation*'/>
</method>
<method selector='initWithAnimation:'>
<arg type='@' name='animation' declared_type='CCAnimation*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAnimation:restoreOriginalFrame:'>
<arg type='@' name='a' declared_type='CCAnimation*' index='0'/>
<arg type='B' name='restoreOriginalFrame' declared_type='BOOL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:animation:restoreOriginalFrame:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='animation' declared_type='CCAnimation*' index='1'/>
<arg type='B' name='restoreOriginalFrame' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAnimation:'>
<arg type='@' name='animation' declared_type='CCAnimation*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCAnimation'>
<method selector='addFrame:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addFrameWithFilename:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addFrameWithTexture:rect:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFrame:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFrameWithFilename:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFrameWithTexture:rect:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='animation' class_method='true'>
<retval type='@' declared_type='id'/>
</method>
<method selector='animationWithAnimationFrames:delayPerUnit:loops:' class_method='true'>
<arg type='@' name='arrayOfAnimationFrames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delayPerUnit' declared_type='float' index='1'/>
<arg type='I' name='loops' declared_type='NSUInteger' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='animationWithFrames:' class_method='true'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='animationWithFrames:delay:' class_method='true'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delay' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='animationWithSpriteFrames:' class_method='true'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='animationWithSpriteFrames:delay:' class_method='true'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delay' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='delayPerUnit'>
<retval type='f' declared_type='float'/>
</method>
<method selector='duration'>
<retval type='f' declared_type='float'/>
</method>
<method selector='frames'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='initWithAnimationFrames:delayPerUnit:loops:'>
<arg type='@' name='arrayOfAnimationFrames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delayPerUnit' declared_type='float' index='1'/>
<arg type='I' name='loops' declared_type='NSUInteger' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFrames:'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFrames:delay:'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delay' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSpriteFrames:'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSpriteFrames:delay:'>
<arg type='@' name='arrayOfSpriteFrameNames' declared_type='NSArray*' index='0'/>
<arg type='f' name='delay' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='loops'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='restoreOriginalFrame'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setDelayPerUnit:'>
<arg type='f' name='delayPerUnit' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFrames:'>
<arg type='@' name='frames' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLoops:'>
<arg type='I' name='loops' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRestoreOriginalFrame:'>
<arg type='B' name='restoreOriginalFrame' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='totalDelayUnits'>
<retval type='f' declared_type='float'/>
</method>
</class>
<class name='CCAnimationCache'>
<method selector='addAnimation:name:'>
<arg type='@' name='animation' declared_type='CCAnimation*' index='0'/>
<arg type='@' name='name' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addAnimationsWithDictionary:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addAnimationsWithFile:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='animationByName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCAnimation*'/>
</method>
<method selector='purgeSharedAnimationCache' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAnimationByName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedAnimationCache' class_method='true'>
<retval type='@' declared_type='CCAnimationCache*'/>
</method>
</class>
<class name='CCAnimationFrame'>
<method selector='delayUnits'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithSpriteFrame:delayUnits:userInfo:'>
<arg type='@' name='spriteFrame' declared_type='CCSpriteFrame*' index='0'/>
<arg type='f' name='delayUnits' declared_type='float' index='1'/>
<arg type='@' name='userInfo' declared_type='NSDictionary*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setDelayUnits:'>
<arg type='f' name='delayUnits' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSpriteFrame:'>
<arg type='@' name='spriteFrame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUserInfo:'>
<arg type='@' name='userInfo' declared_type='NSDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='spriteFrame'>
<retval type='@' declared_type='CCSpriteFrame*'/>
</method>
<method selector='userInfo'>
<retval type='@' declared_type='NSDictionary*'/>
</method>
</class>
<class name='CCArray'>
<method selector='addObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addObjectsFromArray:'>
<arg type='@' name='otherArray' declared_type='CCArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addObjectsFromNSArray:'>
<arg type='@' name='otherArray' declared_type='NSArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='array' class_method='true'>
<retval type='@' declared_type='id'/>
</method>
<method selector='arrayWithArray:' class_method='true'>
<arg type='@' name='otherArray' declared_type='CCArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='arrayWithCapacity:' class_method='true'>
<arg type='I' name='capacity' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='arrayWithNSArray:' class_method='true'>
<arg type='@' name='otherArray' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='capacity'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='containsObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='count'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='exchangeObject:withObject:'>
<arg type='@' name='object1' declared_type='id' index='0'/>
<arg type='@' name='object2' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='exchangeObjectAtIndex:withObjectAtIndex:'>
<arg type='I' name='index1' declared_type='NSUInteger' index='0'/>
<arg type='I' name='index2' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='fastRemoveObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='fastRemoveObjectAtIndex:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='getNSArray'>
<retval type='@' declared_type='NSArray*'/>
</method>
<method selector='indexOfObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='initWithArray:'>
<arg type='@' name='otherArray' declared_type='CCArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCapacity:'>
<arg type='I' name='capacity' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithNSArray:'>
<arg type='@' name='otherArray' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='insertObject:atIndex:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='insertionSort:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='insertionSortUsingCFuncComparator:'>
<arg type='^?' name='comparator' declared_type='int (*)(void *, void *)' function_pointer='true' index='0'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='isEqualToArray:'>
<arg type='@' name='otherArray' declared_type='CCArray*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='lastObject'>
<retval type='@' declared_type='id'/>
</method>
<method selector='makeObjectPerformSelectorWithArrayObjects:selector:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<arg type=':' name='aSelector' declared_type='SEL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='makeObjectsPerformSelector:'>
<arg type=':' name='aSelector' declared_type='SEL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='makeObjectsPerformSelector:withObject:'>
<arg type=':' name='aSelector' declared_type='SEL' index='0'/>
<arg type='@' name='object' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='mergesortLUsingCFuncComparator:'>
<arg type='^?' name='comparator' declared_type='int (*)(void *, void *)' function_pointer='true' index='0'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='objectAtIndex:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='qsortUsingCFuncComparator:'>
<arg type='^?' name='comparator' declared_type='int (*)(void *, void *)' function_pointer='true' index='0'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='randomObject'>
<retval type='@' declared_type='id'/>
</method>
<method selector='reduceMemoryFootprint'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAllObjects'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeLastObject'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeObjectAtIndex:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeObjectsInArray:'>
<arg type='@' name='otherArray' declared_type='CCArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='replaceObjectAtIndex:withObject:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<arg type='@' name='anObject' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='reverseObjects'>
<retval type='v' declared_type='void'/>
</method>
<method selector='sortUsingFunction:context:'>
<arg type='^?' name='compare' declared_type='NSInteger (*)(id, id, void *)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<arg type='@' declared_type='id'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='NSInteger'/>
</arg>
<arg type='^v' name='context' declared_type='void*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCAtlasNode'>
<method selector='atlasWithTileFile:tileWidth:tileHeight:itemsToRender:' class_method='true'>
<arg type='@' name='tile' declared_type='NSString*' index='0'/>
<arg type='I' name='w' declared_type='NSUInteger' index='1'/>
<arg type='I' name='h' declared_type='NSUInteger' index='2'/>
<arg type='I' name='c' declared_type='NSUInteger' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='initWithTileFile:tileWidth:tileHeight:itemsToRender:'>
<arg type='@' name='tile' declared_type='NSString*' index='0'/>
<arg type='I' name='w' declared_type='NSUInteger' index='1'/>
<arg type='I' name='h' declared_type='NSUInteger' index='2'/>
<arg type='I' name='c' declared_type='NSUInteger' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='quadsToDraw'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setQuadsToDraw:'>
<arg type='I' name='quadsToDraw' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureAtlas:'>
<arg type='@' name='textureAtlas' declared_type='CCTextureAtlas*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='textureAtlas'>
<retval type='@' declared_type='CCTextureAtlas*'/>
</method>
<method selector='updateAtlasValues'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCBMFontConfiguration'>
<method selector='atlasName'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='configurationWithFNTFile:' class_method='true'>
<arg type='@' name='FNTfile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFNTfile:'>
<arg type='@' name='FNTfile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAtlasName:'>
<arg type='@' name='atlasName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCBezierBy'>
<method selector='actionWithDuration:bezier:' class_method='true'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='{_ccBezierConfig={CGPoint=ff}{CGPoint=ff}{CGPoint=ff}}' name='c' declared_type='ccBezierConfig' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:bezier:'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='{_ccBezierConfig={CGPoint=ff}{CGPoint=ff}{CGPoint=ff}}' name='c' declared_type='ccBezierConfig' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCBlink'>
<method selector='actionWithDuration:blinks:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='I' name='blinks' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:blinks:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='I' name='blinks' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCCallBlock'>
<method selector='actionWithBlock:' class_method='true'>
<arg type='@?' name='block' declared_type='void (^)()' function_pointer='true' index='0'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='execute'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithBlock:'>
<arg type='@?' name='block' declared_type='void (^)()' function_pointer='true' index='0'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCCallBlockN'>
<method selector='actionWithBlock:' class_method='true'>
<arg type='@?' name='block' declared_type='void (^)(CCNode *)' function_pointer='true' index='0'>
<arg type='@' declared_type='CCNode*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='execute'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithBlock:'>
<arg type='@?' name='block' declared_type='void (^)(CCNode *)' function_pointer='true' index='0'>
<arg type='@' declared_type='CCNode*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCCallBlockO'>
<method selector='actionWithBlock:object:' class_method='true'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='@' name='object' declared_type='id' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='execute'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithBlock:object:'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='@' name='object' declared_type='id' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='object'>
<retval type='@' declared_type='id'/>
</method>
<method selector='setObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCCallFunc'>
<method selector='actionWithTarget:selector:' class_method='true'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='execute'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithTarget:selector:'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setTargetCallback:'>
<arg type='@' name='targetCallback' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='targetCallback'>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCCallFuncND'>
<method selector='actionWithTarget:selector:data:' class_method='true'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='^v' name='d' declared_type='void*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='callbackMethod'>
<retval type='^?' declared_type='CC_CALLBACK_ND' function_pointer='true'>
<arg type='@' declared_type='id'/>
<arg type=':' declared_type='SEL'/>
<arg type='@' declared_type='id'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='initWithTarget:selector:data:'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='^v' name='d' declared_type='void*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setCallbackMethod:'>
<arg type='^?' name='callbackMethod' declared_type='CC_CALLBACK_ND' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<arg type=':' declared_type='SEL'/>
<arg type='@' declared_type='id'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCCallFuncO'>
<method selector='actionWithTarget:selector:object:' class_method='true'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='@' name='object' declared_type='id' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:selector:object:'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='@' name='object' declared_type='id' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='object'>
<retval type='@' declared_type='id'/>
</method>
<method selector='setObject:'>
<arg type='@' name='object' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCCamera'>
<method selector='centerX:centerY:centerZ:'>
<arg type='^f' name='x' declared_type='float*' index='0'/>
<arg type='^f' name='y' declared_type='float*' index='1'/>
<arg type='^f' name='z' declared_type='float*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='dirty'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='eyeX:eyeY:eyeZ:'>
<arg type='^f' name='x' declared_type='float*' index='0'/>
<arg type='^f' name='y' declared_type='float*' index='1'/>
<arg type='^f' name='z' declared_type='float*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='getZEye' class_method='true'>
<retval type='f' declared_type='float'/>
</method>
<method selector='locate'>
<retval type='v' declared_type='void'/>
</method>
<method selector='restore'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterX:centerY:centerZ:'>
<arg type='f' name='x' declared_type='float' index='0'/>
<arg type='f' name='y' declared_type='float' index='1'/>
<arg type='f' name='z' declared_type='float' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDirty:'>
<arg type='B' name='dirty' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEyeX:eyeY:eyeZ:'>
<arg type='f' name='x' declared_type='float' index='0'/>
<arg type='f' name='y' declared_type='float' index='1'/>
<arg type='f' name='z' declared_type='float' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUpX:upY:upZ:'>
<arg type='f' name='x' declared_type='float' index='0'/>
<arg type='f' name='y' declared_type='float' index='1'/>
<arg type='f' name='z' declared_type='float' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='upX:upY:upZ:'>
<arg type='^f' name='x' declared_type='float*' index='0'/>
<arg type='^f' name='y' declared_type='float*' index='1'/>
<arg type='^f' name='z' declared_type='float*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCCardinalSplineTo'>
<method selector='actionWithDuration:points:tension:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<arg type='f' name='tension' declared_type='CGFloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:points:tension:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<arg type='f' name='tension' declared_type='CGFloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='points'>
<retval type='@' declared_type='CCPointArray*'/>
</method>
<method selector='setPoints:'>
<arg type='@' name='points' declared_type='CCPointArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCCatmullRomBy'>
<method selector='actionWithDuration:points:' class_method='true'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:points:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCCatmullRomTo'>
<method selector='actionWithDuration:points:' class_method='true'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:points:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<arg type='@' name='points' declared_type='CCPointArray*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCConfiguration'>
<method selector='OSVersion'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='checkForGLExtension:'>
<arg type='@' name='searchName' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='maxModelviewStackDepth'>
<retval type='i' declared_type='GLint'/>
</method>
<method selector='maxTextureSize'>
<retval type='i' declared_type='GLint'/>
</method>
<method selector='maxTextureUnits'>
<retval type='i' declared_type='GLint'/>
</method>
<method selector='sharedConfiguration' class_method='true'>
<retval type='@' declared_type='CCConfiguration*'/>
</method>
<method selector='supportsBGRA8888'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='supportsDiscardFramebuffer'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='supportsNPOT'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='supportsPVRTC'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='supportsShareableVAO'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CCDeccelAmplitude'>
<method selector='actionWithAction:duration:' class_method='true'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:duration:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setRate:'>
<arg type='f' name='rate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCDirector'>
<method selector='actionManager'>
<retval type='@' declared_type='CCActionManager*'/>
</method>
<method selector='animationInterval'>
<retval type='d' declared_type='NSTimeInterval'/>
</method>
<method selector='contentScaleFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='convertToGL:'>
<arg type='{CGPoint=ff}' name='p' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertToUI:'>
<arg type='{CGPoint=ff}' name='p' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='createStatsLabel'>
<retval type='v' declared_type='void'/>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='displayStats'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='drawScene'>
<retval type='v' declared_type='void'/>
</method>
<method selector='enableRetinaDisplay:'>
<arg type='B' name='enableRetina' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='end'>
<retval type='v' declared_type='void'/>
</method>
<method selector='getZEye'>
<retval type='f' declared_type='float'/>
</method>
<method selector='isAnimating'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isPaused'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='nextDeltaTimeZero'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='notificationNode'>
<retval type='@' declared_type='id'/>
</method>
<method selector='openGLView'>
<retval type='@' declared_type='CCGLView*'/>
</method>
<method selector='pause'>
<retval type='v' declared_type='void'/>
</method>
<method selector='popScene'>
<retval type='v' declared_type='void'/>
</method>
<method selector='projection'>
<retval type='i' declared_type='ccDirectorProjection'/>
</method>
<method selector='purgeCachedData'>
<retval type='v' declared_type='void'/>
</method>
<method selector='pushScene:'>
<arg type='@' name='scene' declared_type='CCScene*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='replaceScene:'>
<arg type='@' name='scene' declared_type='CCScene*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='reshapeProjection:'>
<arg type='{CGSize=ff}' name='newWindowSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resume'>
<retval type='v' declared_type='void'/>
</method>
<method selector='runWithScene:'>
<arg type='@' name='scene' declared_type='CCScene*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='runningScene'>
<retval type='@' declared_type='CCScene*'/>
</method>
<method selector='runningThread'>
<retval type='@' declared_type='NSThread*'/>
</method>
<method selector='scheduler'>
<retval type='@' declared_type='CCScheduler*'/>
</method>
<method selector='secondsPerFrame'>
<retval type='f' declared_type='ccTime'/>
</method>
<method selector='sendCleanupToScene'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setActionManager:'>
<arg type='@' name='actionManager' declared_type='CCActionManager*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAlphaBlending:'>
<arg type='B' name='on' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAnimationInterval:'>
<arg type='d' name='animationInterval' declared_type='NSTimeInterval' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContentScaleFactor:'>
<arg type='f' name='scaleFactor' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegate:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDepthTest:'>
<arg type='B' name='on' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDisplayFPS:'>
<arg type='B' name='display' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDisplayStats:'>
<arg type='B' name='displayStats' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGLDefaultValues'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNextDeltaTimeZero:'>
<arg type='B' name='nextDeltaTimeZero' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNotificationNode:'>
<arg type='@' name='notificationNode' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpenGLView:'>
<arg type='@' name='view' declared_type='CCGLView*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProjection:'>
<arg type='i' name='projection' declared_type='ccDirectorProjection' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScheduler:'>
<arg type='@' name='scheduler' declared_type='CCScheduler*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTouchDispatcher:'>
<arg type='@' name='touchDispatcher' declared_type='CCTouchDispatcher*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedDirector' class_method='true'>
<retval type='@' declared_type='CCDirector*'/>
</method>
<method selector='startAnimation'>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopAnimation'>
<retval type='v' declared_type='void'/>
</method>
<method selector='totalFrames'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='touchDispatcher'>
<retval type='@' declared_type='CCTouchDispatcher*'/>
</method>
<method selector='winSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='winSizeInPixels'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
</class>
<class name='CCDirectorDisplayLink'>
<method selector='mainLoop:'>
<arg type='@' name='sender' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCES2Renderer'>
<method selector='colorRenderbuffer'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='context'>
<retval type='@' declared_type='EAGLContext*'/>
</method>
<method selector='defaultFramebuffer'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='msaaColorbuffer'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='msaaFramebuffer'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='resizeFromLayer:'>
<arg type='@' name='layer' declared_type='CAEAGLLayer*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CCEaseElastic'>
<method selector='actionWithAction:period:' class_method='true'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='period' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:period:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='period' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='period'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setPeriod:'>
<arg type='f' name='period' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCEaseRateAction'>
<method selector='actionWithAction:rate:' class_method='true'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='rate' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:rate:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='rate' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setRate:'>
<arg type='f' name='rate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCFadeTo'>
<method selector='actionWithDuration:opacity:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='C' name='opactiy' declared_type='GLubyte' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:opacity:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='C' name='opacity' declared_type='GLubyte' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCFileUtils'>
<method selector='bundle'>
<retval type='@' declared_type='NSBundle*'/>
</method>
<method selector='enableFallbackSuffixes'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='fileManager'>
<retval type='@' declared_type='NSFileManager*'/>
</method>
<method selector='fullPathFromRelativePath:' class_method='true'>
<arg type='@' name='relPath' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fullPathFromRelativePath:'>
<arg type='@' name='relPath' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fullPathFromRelativePath:resolutionType:' class_method='true'>
<arg type='@' name='relPath' declared_type='NSString*' index='0'/>
<arg type='^i' name='resolutionType' declared_type='ccResolutionType*' index='1'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fullPathFromRelativePath:resolutionType:'>
<arg type='@' name='relPath' declared_type='NSString*' index='0'/>
<arg type='^i' name='resolutionType' declared_type='ccResolutionType*' index='1'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='iPadFileExistsAtPath:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPadFileExistsAtPath:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPadRetinaDisplayFileExistsAtPath:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPadRetinaDisplayFileExistsAtPath:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPadRetinaDisplaySuffix'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='iPadSuffix'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='iPhoneRetinaDisplayFileExistsAtPath:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPhoneRetinaDisplayFileExistsAtPath:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='iPhoneRetinaDisplaySuffix'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='purgeCachedEntries'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSuffixFromFile:' class_method='true'>
<arg type='@' name='path' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='removeSuffixFromFile:'>
<arg type='@' name='path' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='setBundle:'>
<arg type='@' name='bundle' declared_type='NSBundle*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEnableFallbackSuffixes:'>
<arg type='B' name='enableFallbackSuffixes' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFileManager:'>
<arg type='@' name='fileManager' declared_type='NSFileManager*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRetinaDisplaySuffix:' class_method='true'>
<arg type='@' name='suffix' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setiPadRetinaDisplaySuffix:'>
<arg type='@' name='iPadRetinaDisplaySuffix' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setiPadSuffix:'>
<arg type='@' name='iPadSuffix' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setiPhoneRetinaDisplaySuffix:'>
<arg type='@' name='iPhoneRetinaDisplaySuffix' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedFileUtils' class_method='true'>
<retval type='@' declared_type='CCFileUtils*'/>
</method>
</class>
<class name='CCFiniteTimeAction'>
<method selector='duration'>
<retval type='f' declared_type='ccTime'/>
</method>
<method selector='reverse'>
<retval type='@' declared_type='CCFiniteTimeAction*'/>
</method>
<method selector='setDuration:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCFlipX'>
<method selector='actionWithFlipX:' class_method='true'>
<arg type='B' name='x' declared_type='BOOL' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFlipX:'>
<arg type='B' name='x' declared_type='BOOL' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCFlipX3D'>
<method selector='actionWithDuration:' class_method='true'>
<arg type='f' name='d' declared_type='ccTime' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:'>
<arg type='f' name='d' declared_type='ccTime' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCFlipY'>
<method selector='actionWithFlipY:' class_method='true'>
<arg type='B' name='y' declared_type='BOOL' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFlipY:'>
<arg type='B' name='y' declared_type='BOOL' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCFollow'>
<method selector='actionWithTarget:' class_method='true'>
<arg type='@' name='followedNode' declared_type='CCNode*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionWithTarget:worldBoundary:' class_method='true'>
<arg type='@' name='followedNode' declared_type='CCNode*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='boundarySet'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithTarget:'>
<arg type='@' name='followedNode' declared_type='CCNode*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:worldBoundary:'>
<arg type='@' name='followedNode' declared_type='CCNode*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setBoundarySet:'>
<arg type='B' name='boundarySet' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCGLProgram'>
<method selector='addAttribute:index:'>
<arg type='@' name='attributeName' declared_type='NSString*' index='0'/>
<arg type='I' name='index' declared_type='GLuint' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='fragmentShaderLog'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='initWithVertexShaderByteArray:fragmentShaderByteArray:'>
<arg const='true' type='*' name='vShaderByteArray' declared_type='GLchar*' index='0'/>
<arg const='true' type='*' name='fShaderByteArray' declared_type='GLchar*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithVertexShaderFilename:fragmentShaderFilename:'>
<arg type='@' name='vShaderFilename' declared_type='NSString*' index='0'/>
<arg type='@' name='fShaderFilename' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='link'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='programLog'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='setUniformForModelViewProjectionMatrix'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:with2fv:count:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='^f' name='floats' declared_type='GLfloat*' index='1'/>
<arg type='I' name='numberOfArrays' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:with3fv:count:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='^f' name='floats' declared_type='GLfloat*' index='1'/>
<arg type='I' name='numberOfArrays' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:with4fv:count:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='^v' name='floats' declared_type='GLvoid*' index='1'/>
<arg type='I' name='numberOfArrays' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withF1:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='f' name='f1' declared_type='GLfloat' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withF1:f2:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='f' name='f1' declared_type='GLfloat' index='1'/>
<arg type='f' name='f2' declared_type='GLfloat' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withF1:f2:f3:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='f' name='f1' declared_type='GLfloat' index='1'/>
<arg type='f' name='f2' declared_type='GLfloat' index='2'/>
<arg type='f' name='f3' declared_type='GLfloat' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withF1:f2:f3:f4:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='f' name='f1' declared_type='GLfloat' index='1'/>
<arg type='f' name='f2' declared_type='GLfloat' index='2'/>
<arg type='f' name='f3' declared_type='GLfloat' index='3'/>
<arg type='f' name='f4' declared_type='GLfloat' index='4'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withI1:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='i' name='i1' declared_type='GLint' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUniformLocation:withMatrix4fv:count:'>
<arg type='I' name='location' declared_type='NSUInteger' index='0'/>
<arg type='^v' name='matrix_array' declared_type='GLvoid*' index='1'/>
<arg type='I' name='numberOfMatrix' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='updateUniforms'>
<retval type='v' declared_type='void'/>
</method>
<method selector='use'>
<retval type='v' declared_type='void'/>
</method>
<method selector='vertexShaderLog'>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
<class name='CCGLView'>
<method selector='context'>
<retval type='@' declared_type='EAGLContext*'/>
</method>
<method selector='convertPointFromViewToSurface:'>
<arg type='{CGPoint=ff}' name='point' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertRectFromViewToSurface:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='depthFormat'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='initWithFrame:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFrame:pixelFormat:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<arg type='@' name='format' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFrame:pixelFormat:depthFormat:preserveBackbuffer:sharegroup:multiSampling:numberOfSamples:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<arg type='@' name='format' declared_type='NSString*' index='1'/>
<arg type='I' name='depth' declared_type='GLuint' index='2'/>
<arg type='B' name='retained' declared_type='BOOL' index='3'/>
<arg type='@' name='sharegroup' declared_type='EAGLSharegroup*' index='4'/>
<arg type='B' name='sampling' declared_type='BOOL' index='5'/>
<arg type='I' name='nSamples' declared_type='unsigned int' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='lockOpenGLContext'>
<retval type='v' declared_type='void'/>
</method>
<method selector='multiSampling'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='pixelFormat'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='setMultiSampling:'>
<arg type='B' name='multiSampling' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTouchDelegate:'>
<arg type='@' name='touchDelegate' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='surfaceSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='swapBuffers'>
<retval type='v' declared_type='void'/>
</method>
<method selector='touchDelegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='unlockOpenGLContext'>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewWithFrame:' class_method='true'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='viewWithFrame:pixelFormat:' class_method='true'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<arg type='@' name='format' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='viewWithFrame:pixelFormat:depthFormat:' class_method='true'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<arg type='@' name='format' declared_type='NSString*' index='1'/>
<arg type='I' name='depth' declared_type='GLuint' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='viewWithFrame:pixelFormat:depthFormat:preserveBackbuffer:sharegroup:multiSampling:numberOfSamples:' class_method='true'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='frame' declared_type='CGRect' index='0'/>
<arg type='@' name='format' declared_type='NSString*' index='1'/>
<arg type='I' name='depth' declared_type='GLuint' index='2'/>
<arg type='B' name='retained' declared_type='BOOL' index='3'/>
<arg type='@' name='sharegroup' declared_type='EAGLSharegroup*' index='4'/>
<arg type='B' name='multisampling' declared_type='BOOL' index='5'/>
<arg type='I' name='samples' declared_type='unsigned int' index='6'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCGrabber'>
<method selector='afterRender:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='beforeRender:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='grab:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCGrid3D'>
<method selector='originalVertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccVertex3F=fff}' declared_type='ccVertex3F'/>
</method>
<method selector='setVertex:vertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<arg type='{_ccVertex3F=fff}' name='vertex' declared_type='ccVertex3F' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='vertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccVertex3F=fff}' declared_type='ccVertex3F'/>
</method>
</class>
<class name='CCGrid3DAction'>
<method selector='originalVertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccVertex3F=fff}' declared_type='ccVertex3F'/>
</method>
<method selector='setVertex:vertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<arg type='{_ccVertex3F=fff}' name='vertex' declared_type='ccVertex3F' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='vertex:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccVertex3F=fff}' declared_type='ccVertex3F'/>
</method>
</class>
<class name='CCGridAction'>
<method selector='actionWithSize:duration:' class_method='true'>
<arg type='{_ccGridSize=ii}' name='size' declared_type='ccGridSize' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='grid'>
<retval type='@' declared_type='CCGridBase*'/>
</method>
<method selector='gridSize'>
<retval type='{_ccGridSize=ii}' declared_type='ccGridSize'/>
</method>
<method selector='initWithSize:duration:'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<arg type='f' name='d' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setGridSize:'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCGridBase'>
<method selector='active'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='afterDraw:'>
<arg type='@' name='target' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='beforeDraw'>
<retval type='v' declared_type='void'/>
</method>
<method selector='blit'>
<retval type='v' declared_type='void'/>
</method>
<method selector='calculateVertexPoints'>
<retval type='v' declared_type='void'/>
</method>
<method selector='grabber'>
<retval type='@' declared_type='CCGrabber*'/>
</method>
<method selector='gridSize'>
<retval type='{_ccGridSize=ii}' declared_type='ccGridSize'/>
</method>
<method selector='gridWithSize:' class_method='true'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='gridWithSize:texture:flippedTexture:' class_method='true'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='1'/>
<arg type='B' name='flipped' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSize:'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSize:texture:flippedTexture:'>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='0'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='1'/>
<arg type='B' name='flipped' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isTextureFlipped'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='reuse'>
<retval type='v' declared_type='void'/>
</method>
<method selector='reuseGrid'>
<retval type='i' declared_type='int'/>
</method>
<method selector='setActive:'>
<arg type='B' name='active' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGrabber:'>
<arg type='@' name='grabber' declared_type='CCGrabber*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsTextureFlipped:'>
<arg type='B' name='isTextureFlipped' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setReuseGrid:'>
<arg type='i' name='reuseGrid' declared_type='int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShaderProgram:'>
<arg type='@' name='shaderProgram' declared_type='CCGLProgram*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStep:'>
<arg type='{CGPoint=ff}' name='step' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shaderProgram'>
<retval type='@' declared_type='CCGLProgram*'/>
</method>
<method selector='step'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
</class>
<class name='CCJumpBy'>
<method selector='actionWithDuration:position:height:jumps:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='1'/>
<arg type='f' name='height' declared_type='ccTime' index='2'/>
<arg type='I' name='jumps' declared_type='NSUInteger' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:position:height:jumps:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='1'/>
<arg type='f' name='height' declared_type='ccTime' index='2'/>
<arg type='I' name='jumps' declared_type='NSUInteger' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCJumpTiles3D'>
<method selector='actionWithJumps:amplitude:grid:duration:' class_method='true'>
<arg type='i' name='j' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithJumps:amplitude:grid:duration:'>
<arg type='i' name='j' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLabelAtlas'>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='charmapfile' declared_type='NSString*' index='1'/>
<arg type='I' name='w' declared_type='NSUInteger' index='2'/>
<arg type='I' name='h' declared_type='NSUInteger' index='3'/>
<arg type='I' name='firstElement' declared_type='NSUInteger' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:fntFile:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fontFile' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:charMapFile:itemWidth:itemHeight:startCharMap:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='charmapfile' declared_type='NSString*' index='1'/>
<arg type='I' name='w' declared_type='NSUInteger' index='2'/>
<arg type='I' name='h' declared_type='NSUInteger' index='3'/>
<arg type='I' name='firstElement' declared_type='NSUInteger' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:fntFile:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fontFile' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCLabelBMFont'>
<method selector='alignment'>
<retval type='i' declared_type='CCTextAlignment'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='createFontChars'>
<retval type='v' declared_type='void'/>
</method>
<method selector='fntFile'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='initWithString:fntFile:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:fntFile:width:alignment:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<arg type='f' name='width' declared_type='float' index='2'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:fntFile:width:alignment:imageOffset:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<arg type='f' name='width' declared_type='float' index='2'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='3'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:fntFile:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:fntFile:width:alignment:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<arg type='f' name='width' declared_type='float' index='2'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:fntFile:width:alignment:imageOffset:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='fntFile' declared_type='NSString*' index='1'/>
<arg type='f' name='width' declared_type='float' index='2'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='3'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='purgeCachedData' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAlignment:'>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFntFile:'>
<arg type='@' name='fntFile' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWidth:'>
<arg type='f' name='width' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLabelTTF'>
<method selector='dimensions'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='fontName'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fontSize'>
<retval type='f' declared_type='float'/>
</method>
<method selector='horizontalAlignment'>
<retval type='i' declared_type='CCTextAlignment'/>
</method>
<method selector='initWithString:dimensions:alignment:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='@' name='name' declared_type='NSString*' index='3'/>
<arg type='f' name='size' declared_type='CGFloat' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:'>
<arg type='@' name='str' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='@' name='name' declared_type='NSString*' index='3'/>
<arg type='f' name='size' declared_type='CGFloat' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:lineBreakMode:fontName:fontSize:'>
<arg type='@' name='str' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vertAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:'>
<arg type='@' name='str' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='4'/>
<arg type='@' name='name' declared_type='NSString*' index='5'/>
<arg type='f' name='size' declared_type='CGFloat' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='name' declared_type='NSString*' index='1'/>
<arg type='f' name='size' declared_type='CGFloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:alignment:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='@' name='name' declared_type='NSString*' index='3'/>
<arg type='f' name='size' declared_type='CGFloat' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:hAlignment:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='@' name='name' declared_type='NSString*' index='3'/>
<arg type='f' name='size' declared_type='CGFloat' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:hAlignment:lineBreakMode:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vertAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vertAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='4'/>
<arg type='@' name='name' declared_type='NSString*' index='5'/>
<arg type='f' name='size' declared_type='CGFloat' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='labelWithString:fontName:fontSize:' class_method='true'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='name' declared_type='NSString*' index='1'/>
<arg type='f' name='size' declared_type='CGFloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setDimensions:'>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFontName:'>
<arg type='@' name='fontName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFontSize:'>
<arg type='f' name='fontSize' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setHorizontalAlignment:'>
<arg type='i' name='horizontalAlignment' declared_type='CCTextAlignment' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setString:'>
<arg type='@' name='str' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVerticalAlignment:'>
<arg type='i' name='verticalAlignment' declared_type='CCVerticalTextAlignment' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='verticalAlignment'>
<retval type='i' declared_type='CCVerticalTextAlignment'/>
</method>
</class>
<class name='CCLayer'>
<method selector='isAccelerometerEnabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isTouchEnabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='registerWithTouchDispatcher'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsAccelerometerEnabled:'>
<arg type='B' name='isAccelerometerEnabled' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsTouchEnabled:'>
<arg type='B' name='isTouchEnabled' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLayerColor'>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='changeHeight:'>
<arg type='f' name='h' declared_type='GLfloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='changeWidth:'>
<arg type='f' name='w' declared_type='GLfloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='changeWidth:height:'>
<arg type='f' name='w' declared_type='GLfloat' index='0'/>
<arg type='f' name='h' declared_type='GLfloat' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='initWithColor:'>
<arg type='{_ccColor4B=CCCC}' name='color' declared_type='ccColor4B' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithColor:width:height:'>
<arg type='{_ccColor4B=CCCC}' name='color' declared_type='ccColor4B' index='0'/>
<arg type='f' name='w' declared_type='GLfloat' index='1'/>
<arg type='f' name='h' declared_type='GLfloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerWithColor:' class_method='true'>
<arg type='{_ccColor4B=CCCC}' name='color' declared_type='ccColor4B' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerWithColor:width:height:' class_method='true'>
<arg type='{_ccColor4B=CCCC}' name='color' declared_type='ccColor4B' index='0'/>
<arg type='f' name='w' declared_type='GLfloat' index='1'/>
<arg type='f' name='h' declared_type='GLfloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLayerGradient'>
<method selector='compressedInterpolation'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='endColor'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='endOpacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='initWithColor:fadingTo:'>
<arg type='{_ccColor4B=CCCC}' name='start' declared_type='ccColor4B' index='0'/>
<arg type='{_ccColor4B=CCCC}' name='end' declared_type='ccColor4B' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithColor:fadingTo:alongVector:'>
<arg type='{_ccColor4B=CCCC}' name='start' declared_type='ccColor4B' index='0'/>
<arg type='{_ccColor4B=CCCC}' name='end' declared_type='ccColor4B' index='1'/>
<arg type='{CGPoint=ff}' name='v' declared_type='CGPoint' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerWithColor:fadingTo:' class_method='true'>
<arg type='{_ccColor4B=CCCC}' name='start' declared_type='ccColor4B' index='0'/>
<arg type='{_ccColor4B=CCCC}' name='end' declared_type='ccColor4B' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerWithColor:fadingTo:alongVector:' class_method='true'>
<arg type='{_ccColor4B=CCCC}' name='start' declared_type='ccColor4B' index='0'/>
<arg type='{_ccColor4B=CCCC}' name='end' declared_type='ccColor4B' index='1'/>
<arg type='{CGPoint=ff}' name='v' declared_type='CGPoint' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setCompressedInterpolation:'>
<arg type='B' name='compressedInterpolation' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndColor:'>
<arg type='{_ccColor3B=CCC}' name='endColor' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndOpacity:'>
<arg type='C' name='endOpacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartColor:'>
<arg type='{_ccColor3B=CCC}' name='startColor' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartOpacity:'>
<arg type='C' name='startOpacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVector:'>
<arg type='{CGPoint=ff}' name='vector' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='startColor'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='startOpacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='vector'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
</class>
<class name='CCLayerMultiplex'>
<method selector='initWithLayers:vaList:'>
<arg type='@' name='layer' declared_type='CCLayer*' index='0'/>
<arg type='*' name='params' declared_type='va_list' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method variadic='true' sentinel='0' selector='layerWithLayers:' class_method='true'>
<arg type='@' name='layer' declared_type='CCLayer*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='switchTo:'>
<arg type='I' name='n' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='switchToAndReleaseMe:'>
<arg type='I' name='n' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLens3D'>
<method selector='actionWithPosition:radius:grid:duration:' class_method='true'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithPosition:radius:grid:duration:'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='lensEffect'>
<retval type='f' declared_type='float'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='setLensEffect:'>
<arg type='f' name='lensEffect' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosition:'>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCLiquid'>
<method selector='actionWithWaves:amplitude:grid:duration:' class_method='true'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenu'>
<method selector='alignItemsHorizontally'>
<retval type='v' declared_type='void'/>
</method>
<method selector='alignItemsHorizontallyWithPadding:'>
<arg type='f' name='padding' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method variadic='true' sentinel='0' selector='alignItemsInColumns:'>
<arg type='@' name='columns' declared_type='NSNumber*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='alignItemsInColumns:vaList:'>
<arg type='@' name='columns' declared_type='NSNumber*' index='0'/>
<arg type='*' name='args' declared_type='va_list' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method variadic='true' sentinel='0' selector='alignItemsInRows:'>
<arg type='@' name='rows' declared_type='NSNumber*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='alignItemsInRows:vaList:'>
<arg type='@' name='rows' declared_type='NSNumber*' index='0'/>
<arg type='*' name='args' declared_type='va_list' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='alignItemsVertically'>
<retval type='v' declared_type='void'/>
</method>
<method selector='alignItemsVerticallyWithPadding:'>
<arg type='f' name='padding' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='enabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithArray:'>
<arg type='@' name='arrayOfItems' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithItems:vaList:'>
<arg type='@' name='item' declared_type='CCMenuItem*' index='0'/>
<arg type='*' name='args' declared_type='va_list' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='menuWithArray:' class_method='true'>
<arg type='@' name='arrayOfItems' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method variadic='true' sentinel='0' selector='menuWithItems:' class_method='true'>
<arg type='@' name='item' declared_type='CCMenuItem*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='setEnabled:'>
<arg type='B' name='enabled' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setHandlerPriority:'>
<arg type='i' name='newPriority' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItem'>
<method selector='activate'>
<retval type='v' declared_type='void'/>
</method>
<method selector='cleanup'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithBlock:'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:selector:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isEnabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isSelected'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='itemWithBlock:' class_method='true'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithTarget:selector:' class_method='true'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rect'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='selected'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlock:'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsEnabled:'>
<arg type='B' name='enabled' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTarget:selector:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unselected'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItemAtlasFont'>
<method selector='initFromString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='5'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initFromString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@' name='rec' declared_type='id' index='5'/>
<arg type=':' name='cb' declared_type='SEL' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='5'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@' name='target' declared_type='id' index='5'/>
<arg type=':' name='selector' declared_type='SEL' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='5'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@' name='rec' declared_type='id' index='5'/>
<arg type=':' name='cb' declared_type='SEL' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='5'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='charMapFile' declared_type='NSString*' index='1'/>
<arg type='i' name='itemWidth' declared_type='int' index='2'/>
<arg type='i' name='itemHeight' declared_type='int' index='3'/>
<arg type='c' name='startCharMap' declared_type='char' index='4'/>
<arg type='@' name='target' declared_type='id' index='5'/>
<arg type=':' name='selector' declared_type='SEL' index='6'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCMenuItemFont'>
<method selector='fontName' class_method='true'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fontName'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='fontSize' class_method='true'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='fontSize'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='initFromString:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initFromString:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='r' declared_type='id' index='1'/>
<arg type=':' name='s' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='r' declared_type='id' index='1'/>
<arg type=':' name='s' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromString:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='r' declared_type='id' index='1'/>
<arg type=':' name='s' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithString:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='r' declared_type='id' index='1'/>
<arg type=':' name='s' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setFontName:' class_method='true'>
<arg type='@' name='n' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFontName:'>
<arg type='@' name='n' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFontSize:' class_method='true'>
<arg type='I' name='s' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFontSize:'>
<arg type='I' name='s' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItemImage'>
<method selector='initFromNormalImage:selectedImage:disabledImage:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initFromNormalImage:selectedImage:disabledImage:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@' name='r' declared_type='id' index='3'/>
<arg type=':' name='s' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithNormalImage:selectedImage:disabledImage:block:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithNormalImage:selectedImage:disabledImage:target:selector:'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@' name='r' declared_type='id' index='3'/>
<arg type=':' name='s' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalImage:selectedImage:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalImage:selectedImage:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='2'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalImage:selectedImage:disabledImage:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalImage:selectedImage:disabledImage:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@' name='r' declared_type='id' index='3'/>
<arg type=':' name='s' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalImage:selectedImage:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='r' declared_type='id' index='2'/>
<arg type=':' name='s' declared_type='SEL' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalImage:selectedImage:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalImage:selectedImage:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='2'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalImage:selectedImage:disabledImage:block:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalImage:selectedImage:disabledImage:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='value3' declared_type='NSString*' index='2'/>
<arg type='@' name='r' declared_type='id' index='3'/>
<arg type=':' name='s' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalImage:selectedImage:target:selector:' class_method='true'>
<arg type='@' name='value' declared_type='NSString*' index='0'/>
<arg type='@' name='value2' declared_type='NSString*' index='1'/>
<arg type='@' name='r' declared_type='id' index='2'/>
<arg type=':' name='s' declared_type='SEL' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setDisabledSpriteFrame:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNormalSpriteFrame:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSelectedSpriteFrame:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItemLabel'>
<method selector='disabledColor'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='initWithLabel:block:'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithLabel:target:selector:'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type=':' name='selector' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithLabel:' class_method='true'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithLabel:block:' class_method='true'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithLabel:target:selector:' class_method='true'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type=':' name='selector' declared_type='SEL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='label'>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='setDisabledColor:'>
<arg type='{_ccColor3B=CCC}' name='disabledColor' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsEnabled:'>
<arg type='B' name='enabled' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLabel:'>
<arg type='@' name='label' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setString:'>
<arg type='@' name='label' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItemSprite'>
<method selector='disabledImage'>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='initFromNormalSprite:selectedSprite:disabledSprite:block:'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initFromNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@' name='target' declared_type='id' index='3'/>
<arg type=':' name='selector' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithNormalSprite:selectedSprite:disabledSprite:block:'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@' name='target' declared_type='id' index='3'/>
<arg type=':' name='selector' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalSprite:selectedSprite:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalSprite:selectedSprite:block:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='2'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalSprite:selectedSprite:disabledSprite:block:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalSprite:selectedSprite:disabledSprite:target:selector:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@' name='target' declared_type='id' index='3'/>
<arg type=':' name='selector' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemFromNormalSprite:selectedSprite:target:selector:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='target' declared_type='id' index='2'/>
<arg type=':' name='selector' declared_type='SEL' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalSprite:selectedSprite:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalSprite:selectedSprite:block:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='2'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalSprite:selectedSprite:disabledSprite:block:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='3'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalSprite:selectedSprite:disabledSprite:target:selector:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='disabledSprite' declared_type='CCNode*' index='2'/>
<arg type='@' name='target' declared_type='id' index='3'/>
<arg type=':' name='selector' declared_type='SEL' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithNormalSprite:selectedSprite:target:selector:' class_method='true'>
<arg type='@' name='normalSprite' declared_type='CCNode*' index='0'/>
<arg type='@' name='selectedSprite' declared_type='CCNode*' index='1'/>
<arg type='@' name='target' declared_type='id' index='2'/>
<arg type=':' name='selector' declared_type='SEL' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='normalImage'>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='selectedImage'>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='setDisabledImage:'>
<arg type='@' name='disabledImage' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNormalImage:'>
<arg type='@' name='normalImage' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSelectedImage:'>
<arg type='@' name='selectedImage' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMenuItemToggle'>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='initWithItems:block:'>
<arg type='@' name='arrayOfItems' declared_type='NSArray*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:selector:items:vaList:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<arg type='@' name='item' declared_type='CCMenuItem*' index='2'/>
<arg type='*' name='args' declared_type='va_list' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='itemWithItems:block:' class_method='true'>
<arg type='@' name='arrayOfItems' declared_type='NSArray*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='1'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method variadic='true' sentinel='0' selector='itemWithTarget:selector:items:' class_method='true'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<arg type='@' name='item' declared_type='CCMenuItem*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='selectedIndex'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='selectedItem'>
<retval type='@' declared_type='CCMenuItem*'/>
</method>
<method selector='setSelectedIndex:'>
<arg type='I' name='selectedIndex' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSubItems:'>
<arg type='@' name='subItems' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='subItems'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
</class>
<class name='CCMotionStreak'>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='initWithFade:minSeg:width:color:texture:'>
<arg type='f' name='fade' declared_type='float' index='0'/>
<arg type='f' name='minSeg' declared_type='float' index='1'/>
<arg type='f' name='stroke' declared_type='float' index='2'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='3'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFade:minSeg:width:color:textureFilename:'>
<arg type='f' name='fade' declared_type='float' index='0'/>
<arg type='f' name='minSeg' declared_type='float' index='1'/>
<arg type='f' name='stroke' declared_type='float' index='2'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='3'/>
<arg type='@' name='path' declared_type='NSString*' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isFastMode'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='reset'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFastMode:'>
<arg type='B' name='fastMode' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='streakWithFade:minSeg:width:color:texture:' class_method='true'>
<arg type='f' name='fade' declared_type='float' index='0'/>
<arg type='f' name='minSeg' declared_type='float' index='1'/>
<arg type='f' name='stroke' declared_type='float' index='2'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='3'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='streakWithFade:minSeg:width:color:textureFilename:' class_method='true'>
<arg type='f' name='fade' declared_type='float' index='0'/>
<arg type='f' name='minSeg' declared_type='float' index='1'/>
<arg type='f' name='stroke' declared_type='float' index='2'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='3'/>
<arg type='@' name='path' declared_type='NSString*' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='tintWithColor:'>
<arg type='{_ccColor3B=CCC}' name='colors' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCMoveBy'>
<method selector='actionWithDuration:position:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='deltaPosition' declared_type='CGPoint' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:position:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='deltaPosition' declared_type='CGPoint' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCMoveTo'>
<method selector='actionWithDuration:position:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:position:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCNode'>
<method selector='actionManager'>
<retval type='@' declared_type='CCActionManager*'/>
</method>
<method selector='addChild:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addChild:z:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addChild:z:tag:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<arg type='i' name='tag' declared_type='NSInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='anchorPoint'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='anchorPointInPoints'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='boundingBox'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='camera'>
<retval type='@' declared_type='CCCamera*'/>
</method>
<method selector='children'>
<retval type='@' declared_type='CCArray*'/>
</method>
<method selector='cleanup'>
<retval type='v' declared_type='void'/>
</method>
<method selector='contentSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='convertToNodeSpace:'>
<arg type='{CGPoint=ff}' name='worldPoint' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertToNodeSpaceAR:'>
<arg type='{CGPoint=ff}' name='worldPoint' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertToWorldSpace:'>
<arg type='{CGPoint=ff}' name='nodePoint' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertToWorldSpaceAR:'>
<arg type='{CGPoint=ff}' name='nodePoint' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertTouchToNodeSpace:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='convertTouchToNodeSpaceAR:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='draw'>
<retval type='v' declared_type='void'/>
</method>
<method selector='getActionByTag:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<retval type='@' declared_type='CCAction*'/>
</method>
<method selector='getChildByTag:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='glServerState'>
<retval type='i' declared_type='ccGLServerState'/>
</method>
<method selector='grid'>
<retval type='@' declared_type='CCGridBase*'/>
</method>
<method selector='ignoreAnchorPointForPosition'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='init'>
<retval type='@' declared_type='id'/>
</method>
<method selector='isRelativeAnchorPoint'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isRunning'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='node' class_method='true'>
<retval type='@' declared_type='id'/>
</method>
<method selector='nodeToParentTransform'>
<retval type='{CGAffineTransform=ffffff}' declared_type='CGAffineTransform'/>
</method>
<method selector='nodeToWorldTransform'>
<retval type='{CGAffineTransform=ffffff}' declared_type='CGAffineTransform'/>
</method>
<method selector='numberOfRunningActions'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='onEnter'>
<retval type='v' declared_type='void'/>
</method>
<method selector='onEnterTransitionDidFinish'>
<retval type='v' declared_type='void'/>
</method>
<method selector='onExit'>
<retval type='v' declared_type='void'/>
</method>
<method selector='onExitTransitionDidStart'>
<retval type='v' declared_type='void'/>
</method>
<method selector='orderOfArrival'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='parent'>
<retval type='@' declared_type='CCNode*'/>
</method>
<method selector='parentToNodeTransform'>
<retval type='{CGAffineTransform=ffffff}' declared_type='CGAffineTransform'/>
</method>
<method selector='pauseSchedulerAndActions'>
<retval type='v' declared_type='void'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='removeAllChildrenWithCleanup:'>
<arg type='B' name='cleanup' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeChild:cleanup:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<arg type='B' name='cleanup' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeChildByTag:cleanup:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<arg type='B' name='cleanup' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeFromParentAndCleanup:'>
<arg type='B' name='cleanup' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='reorderChild:z:'>
<arg type='@' name='child' declared_type='CCNode*' index='0'/>
<arg type='i' name='zOrder' declared_type='NSInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeSchedulerAndActions'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rotation'>
<retval type='f' declared_type='float'/>
</method>
<method selector='runAction:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<retval type='@' declared_type='CCAction*'/>
</method>
<method selector='scale'>
<retval type='f' declared_type='float'/>
</method>
<method selector='scaleX'>
<retval type='f' declared_type='float'/>
</method>
<method selector='scaleY'>
<retval type='f' declared_type='float'/>
</method>
<method selector='schedule:'>
<arg type=':' name='s' declared_type='SEL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='schedule:interval:'>
<arg type=':' name='s' declared_type='SEL' index='0'/>
<arg type='f' name='seconds' declared_type='ccTime' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='schedule:interval:repeat:delay:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<arg type='f' name='interval' declared_type='ccTime' index='1'/>
<arg type='I' name='repeat' declared_type='uint' index='2'/>
<arg type='f' name='delay' declared_type='ccTime' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleOnce:delay:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<arg type='f' name='delay' declared_type='ccTime' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleUpdate'>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleUpdateWithPriority:'>
<arg type='i' name='priority' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduler'>
<retval type='@' declared_type='CCScheduler*'/>
</method>
<method selector='setActionManager:'>
<arg type='@' name='actionManager' declared_type='CCActionManager*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAnchorPoint:'>
<arg type='{CGPoint=ff}' name='anchorPoint' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContentSize:'>
<arg type='{CGSize=ff}' name='contentSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGlServerState:'>
<arg type='i' name='glServerState' declared_type='ccGLServerState' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGrid:'>
<arg type='@' name='grid' declared_type='CCGridBase*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIgnoreAnchorPointForPosition:'>
<arg type='B' name='ignoreAnchorPointForPosition' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIsRelativeAnchorPoint:'>
<arg type='B' name='value' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOrderOfArrival:'>
<arg type='I' name='orderOfArrival' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setParent:'>
<arg type='@' name='parent' declared_type='CCNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosition:'>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRotation:'>
<arg type='f' name='rotation' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScale:'>
<arg type='f' name='scale' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScaleX:'>
<arg type='f' name='scaleX' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScaleY:'>
<arg type='f' name='scaleY' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScheduler:'>
<arg type='@' name='scheduler' declared_type='CCScheduler*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShaderProgram:'>
<arg type='@' name='shaderProgram' declared_type='CCGLProgram*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSkewX:'>
<arg type='f' name='skewX' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSkewY:'>
<arg type='f' name='skewY' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTag:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUserData:'>
<arg type='^v' name='userData' declared_type='void*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUserObject:'>
<arg type='@' name='userObject' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVertexZ:'>
<arg type='f' name='vertexZ' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVisible:'>
<arg type='B' name='visible' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setZOrder:'>
<arg type='I' name='z' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shaderProgram'>
<retval type='@' declared_type='CCGLProgram*'/>
</method>
<method selector='skewX'>
<retval type='f' declared_type='float'/>
</method>
<method selector='skewY'>
<retval type='f' declared_type='float'/>
</method>
<method selector='sortAllChildren'>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopAction:'>
<arg type='@' name='action' declared_type='CCAction*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopActionByTag:'>
<arg type='i' name='tag' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopAllActions'>
<retval type='v' declared_type='void'/>
</method>
<method selector='tag'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='transform'>
<retval type='v' declared_type='void'/>
</method>
<method selector='transformAncestors'>
<retval type='v' declared_type='void'/>
</method>
<method selector='unschedule:'>
<arg type=':' name='s' declared_type='SEL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleAllSelectors'>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleUpdate'>
<retval type='v' declared_type='void'/>
</method>
<method selector='userData'>
<retval type='^v' declared_type='void*'/>
</method>
<method selector='userObject'>
<retval type='@' declared_type='id'/>
</method>
<method selector='vertexZ'>
<retval type='f' declared_type='float'/>
</method>
<method selector='visible'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='visit'>
<retval type='v' declared_type='void'/>
</method>
<method selector='worldToNodeTransform'>
<retval type='{CGAffineTransform=ffffff}' declared_type='CGAffineTransform'/>
</method>
<method selector='zOrder'>
<retval type='i' declared_type='NSInteger'/>
</method>
</class>
<class name='CCOrbitCamera'>
<method selector='actionWithDuration:radius:deltaRadius:angleZ:deltaAngleZ:angleX:deltaAngleX:' class_method='true'>
<arg type='f' name='t' declared_type='float' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='f' name='dr' declared_type='float' index='2'/>
<arg type='f' name='z' declared_type='float' index='3'/>
<arg type='f' name='dz' declared_type='float' index='4'/>
<arg type='f' name='x' declared_type='float' index='5'/>
<arg type='f' name='dx' declared_type='float' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:radius:deltaRadius:angleZ:deltaAngleZ:angleX:deltaAngleX:'>
<arg type='f' name='t' declared_type='float' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='f' name='dr' declared_type='float' index='2'/>
<arg type='f' name='z' declared_type='float' index='3'/>
<arg type='f' name='dz' declared_type='float' index='4'/>
<arg type='f' name='x' declared_type='float' index='5'/>
<arg type='f' name='dx' declared_type='float' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='sphericalRadius:zenith:azimuth:'>
<arg type='^f' name='r' declared_type='float*' index='0'/>
<arg type='^f' name='zenith' declared_type='float*' index='1'/>
<arg type='^f' name='azimuth' declared_type='float*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCParallaxNode'>
<method selector='addChild:z:parallaxRatio:positionOffset:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<arg type='{CGPoint=ff}' name='c' declared_type='CGPoint' index='2'/>
<arg type='{CGPoint=ff}' name='positionOffset' declared_type='CGPoint' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='parallaxArray'>
<retval type='^{ccArray=II^@}' declared_type='ccArray*'/>
</method>
<method selector='setParallaxArray:'>
<arg type='^{ccArray=II^@}' name='parallaxArray' declared_type='ccArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCParticleBatchNode'>
<method selector='addChild:z:tag:'>
<arg type='@' name='child' declared_type='CCParticleSystem*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<arg type='i' name='aTag' declared_type='NSInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='batchNodeWithFile:' class_method='true'>
<arg type='@' name='imageFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithFile:capacity:' class_method='true'>
<arg type='@' name='fileImage' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithTexture:' class_method='true'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithTexture:capacity:' class_method='true'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='disableParticle:'>
<arg type='I' name='particleIndex' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithFile:capacity:'>
<arg type='@' name='fileImage' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='insertChild:inAtlasAtIndex:'>
<arg type='@' name='pSystem' declared_type='CCParticleSystem*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeChild:cleanup:'>
<arg type='@' name='pSystem' declared_type='CCParticleSystem*' index='0'/>
<arg type='B' name='doCleanUp' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureAtlas:'>
<arg type='@' name='textureAtlas' declared_type='CCTextureAtlas*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='textureAtlas'>
<retval type='@' declared_type='CCTextureAtlas*'/>
</method>
</class>
<class name='CCParticleSystem'>
<method selector='active'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='angle'>
<retval type='f' declared_type='float'/>
</method>
<method selector='angleVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='atlasIndex'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='autoRemoveOnFinish'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='batchNode'>
<retval type='@' declared_type='CCParticleBatchNode*'/>
</method>
<method selector='blendAdditive'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='duration'>
<retval type='f' declared_type='float'/>
</method>
<method selector='emissionRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='emitterMode'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='endColor'>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</method>
<method selector='endColorVar'>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</method>
<method selector='endRadius'>
<retval type='f' declared_type='float'/>
</method>
<method selector='endRadiusVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='endSize'>
<retval type='f' declared_type='float'/>
</method>
<method selector='endSizeVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='endSpin'>
<retval type='f' declared_type='float'/>
</method>
<method selector='endSpinVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='gravity'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='initWithDictionary:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFile:'>
<arg type='@' name='plistFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTotalParticles:'>
<arg type='I' name='numberOfParticles' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isFull'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='life'>
<retval type='f' declared_type='float'/>
</method>
<method selector='lifeVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='particleCount'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='particleWithFile:' class_method='true'>
<arg type='@' name='plistFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='posVar'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='positionType'>
<retval type='i' declared_type='tCCPositionType'/>
</method>
<method selector='postStep'>
<retval type='v' declared_type='void'/>
</method>
<method selector='radialAccel'>
<retval type='f' declared_type='float'/>
</method>
<method selector='radialAccelVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='resetSystem'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rotatePerSecond'>
<retval type='f' declared_type='float'/>
</method>
<method selector='rotatePerSecondVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setAngle:'>
<arg type='f' name='angle' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAngleVar:'>
<arg type='f' name='angleVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAtlasIndex:'>
<arg type='I' name='atlasIndex' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAutoRemoveOnFinish:'>
<arg type='B' name='autoRemoveOnFinish' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBatchNode:'>
<arg type='@' name='batchNode' declared_type='CCParticleBatchNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendAdditive:'>
<arg type='B' name='blendAdditive' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDuration:'>
<arg type='f' name='duration' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEmissionRate:'>
<arg type='f' name='emissionRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEmitterMode:'>
<arg type='i' name='emitterMode' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndColor:'>
<arg type='{_ccColor4F=ffff}' name='endColor' declared_type='ccColor4F' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndColorVar:'>
<arg type='{_ccColor4F=ffff}' name='endColorVar' declared_type='ccColor4F' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndRadius:'>
<arg type='f' name='endRadius' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndRadiusVar:'>
<arg type='f' name='endRadiusVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndSize:'>
<arg type='f' name='endSize' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndSizeVar:'>
<arg type='f' name='endSizeVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndSpin:'>
<arg type='f' name='endSpin' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndSpinVar:'>
<arg type='f' name='endSpinVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGravity:'>
<arg type='{CGPoint=ff}' name='gravity' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLife:'>
<arg type='f' name='life' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLifeVar:'>
<arg type='f' name='lifeVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosVar:'>
<arg type='{CGPoint=ff}' name='posVar' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPositionType:'>
<arg type='i' name='positionType' declared_type='tCCPositionType' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRadialAccel:'>
<arg type='f' name='radialAccel' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRadialAccelVar:'>
<arg type='f' name='radialAccelVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRotatePerSecond:'>
<arg type='f' name='rotatePerSecond' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRotatePerSecondVar:'>
<arg type='f' name='rotatePerSecondVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSourcePosition:'>
<arg type='{CGPoint=ff}' name='sourcePosition' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSpeed:'>
<arg type='f' name='speed' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSpeedVar:'>
<arg type='f' name='speedVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartColor:'>
<arg type='{_ccColor4F=ffff}' name='startColor' declared_type='ccColor4F' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartColorVar:'>
<arg type='{_ccColor4F=ffff}' name='startColorVar' declared_type='ccColor4F' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartRadius:'>
<arg type='f' name='startRadius' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartRadiusVar:'>
<arg type='f' name='startRadiusVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartSize:'>
<arg type='f' name='startSize' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartSizeVar:'>
<arg type='f' name='startSizeVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartSpin:'>
<arg type='f' name='startSpin' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartSpinVar:'>
<arg type='f' name='startSpinVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTangentialAccel:'>
<arg type='f' name='tangentialAccel' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTangentialAccelVar:'>
<arg type='f' name='tangentialAccelVar' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTotalParticles:'>
<arg type='I' name='totalParticles' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sourcePosition'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='speed'>
<retval type='f' declared_type='float'/>
</method>
<method selector='speedVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startColor'>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</method>
<method selector='startColorVar'>
<retval type='{_ccColor4F=ffff}' declared_type='ccColor4F'/>
</method>
<method selector='startRadius'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startRadiusVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startSize'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startSizeVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startSpin'>
<retval type='f' declared_type='float'/>
</method>
<method selector='startSpinVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='stopSystem'>
<retval type='v' declared_type='void'/>
</method>
<method selector='tangentialAccel'>
<retval type='f' declared_type='float'/>
</method>
<method selector='tangentialAccelVar'>
<retval type='f' declared_type='float'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='totalParticles'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='update:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='updateQuadWithParticle:newPosition:'>
<arg type='^{sCCParticle={CGPoint=ff}{CGPoint=ff}{_ccColor4F=ffff}{_ccColor4F=ffff}fffffI(?={?={CGPoint=ff}ff}{?=ffff})}' name='particle' declared_type='tCCParticle*' index='0'/>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='updateWithNoTime'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCParticleSystemQuad'>
<method selector='initIndices'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initTexCoordsWithRect:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDisplayFrame:'>
<arg type='@' name='spriteFrame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:withRect:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCPlace'>
<method selector='actionWithPosition:' class_method='true'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithPosition:'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCPointArray'>
<method selector='addControlPoint:'>
<arg type='{CGPoint=ff}' name='controlPoint' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='arrayWithCapacity:' class_method='true'>
<arg type='I' name='capacity' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='controlPoints'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='count'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='getControlPointAtIndex:'>
<arg type='i' name='index' declared_type='NSInteger' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='initWithCapacity:'>
<arg type='I' name='capacity' declared_type='NSUInteger' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='insertControlPoint:atIndex:'>
<arg type='{CGPoint=ff}' name='controlPoint' declared_type='CGPoint' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeControlPointAtIndex:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='replaceControlPoint:atIndex:'>
<arg type='{CGPoint=ff}' name='controlPoint' declared_type='CGPoint' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='reverse'>
<retval type='@' declared_type='CCPointArray*'/>
</method>
<method selector='reverseInline'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setControlPoints:'>
<arg type='@' name='controlPoints' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCProfiler'>
<method selector='createAndAddTimerWithName:'>
<arg type='@' name='timerName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCProfilingTimer*'/>
</method>
<method selector='displayTimers'>
<retval type='v' declared_type='void'/>
</method>
<method selector='releaseAllTimers'>
<retval type='v' declared_type='void'/>
</method>
<method selector='releaseTimer:'>
<arg type='@' name='timerName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedProfiler' class_method='true'>
<retval type='@' declared_type='CCProfiler*'/>
</method>
</class>
<class name='CCProfilingTimer'>
<method selector='reset'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCProgressFromTo'>
<method selector='actionWithDuration:from:to:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='fromPercentage' declared_type='float' index='1'/>
<arg type='f' name='toPercentage' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:from:to:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='fromPercentage' declared_type='float' index='1'/>
<arg type='f' name='toPercentage' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCProgressTimer'>
<method selector='barChangeRate'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='initWithSprite:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='midpoint'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='percentage'>
<retval type='f' declared_type='float'/>
</method>
<method selector='progressWithSprite:' class_method='true'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='reverseDirection'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setBarChangeRate:'>
<arg type='{CGPoint=ff}' name='barChangeRate' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMidpoint:'>
<arg type='{CGPoint=ff}' name='midpoint' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPercentage:'>
<arg type='f' name='percentage' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setReverseDirection:'>
<arg type='B' name='reverseDirection' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSprite:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setType:'>
<arg type='i' name='type' declared_type='CCProgressTimerType' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sprite'>
<retval type='@' declared_type='CCSprite*'/>
</method>
<method selector='type'>
<retval type='i' declared_type='CCProgressTimerType'/>
</method>
<method selector='vertexData'>
<retval type='^{_ccV2F_C4B_T2F={_ccVertex2F=ff}{_ccColor4B=CCCC}{_ccTex2F=ff}}' declared_type='ccV2F_C4B_T2F*'/>
</method>
<method selector='vertexDataCount'>
<retval type='i' declared_type='int'/>
</method>
</class>
<class name='CCProgressTo'>
<method selector='actionWithDuration:percent:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='percent' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:percent:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='percent' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCRenderTexture'>
<method selector='begin'>
<retval type='v' declared_type='void'/>
</method>
<method selector='beginWithClear:g:b:a:'>
<arg type='f' name='r' declared_type='float' index='0'/>
<arg type='f' name='g' declared_type='float' index='1'/>
<arg type='f' name='b' declared_type='float' index='2'/>
<arg type='f' name='a' declared_type='float' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='clear:g:b:a:'>
<arg type='f' name='r' declared_type='float' index='0'/>
<arg type='f' name='g' declared_type='float' index='1'/>
<arg type='f' name='b' declared_type='float' index='2'/>
<arg type='f' name='a' declared_type='float' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='end'>
<retval type='v' declared_type='void'/>
</method>
<method selector='getUIImage'>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='getUIImageFromBuffer'>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='initWithWidth:height:pixelFormat:'>
<arg type='i' name='w' declared_type='int' index='0'/>
<arg type='i' name='h' declared_type='int' index='1'/>
<arg type='i' name='format' declared_type='CCTexture2DPixelFormat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='newCGImage'>
<retval type='^{CGImage=}' declared_type='CGImageRef'/>
</method>
<method selector='renderTextureWithWidth:height:' class_method='true'>
<arg type='i' name='w' declared_type='int' index='0'/>
<arg type='i' name='h' declared_type='int' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='renderTextureWithWidth:height:pixelFormat:' class_method='true'>
<arg type='i' name='w' declared_type='int' index='0'/>
<arg type='i' name='h' declared_type='int' index='1'/>
<arg type='i' name='format' declared_type='CCTexture2DPixelFormat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='saveBuffer:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='saveBuffer:format:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<arg type='i' name='format' declared_type='int' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='saveToFile:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='saveToFile:format:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<arg type='i' name='format' declared_type='tCCImageFormat' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setSprite:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sprite'>
<retval type='@' declared_type='CCSprite*'/>
</method>
</class>
<class name='CCRepeat'>
<method selector='actionWithAction:times:' class_method='true'>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='I' name='times' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:times:'>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='I' name='times' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='innerAction'>
<retval type='@' declared_type='CCFiniteTimeAction*'/>
</method>
<method selector='setInnerAction:'>
<arg type='@' name='innerAction' declared_type='CCFiniteTimeAction*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCRepeatForever'>
<method selector='actionWithAction:' class_method='true'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='innerAction'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='setInnerAction:'>
<arg type='@' name='innerAction' declared_type='CCActionInterval*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCReuseGrid'>
<method selector='actionWithTimes:' class_method='true'>
<arg type='i' name='times' declared_type='int' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTimes:'>
<arg type='i' name='times' declared_type='int' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCReverseTime'>
<method selector='actionWithAction:' class_method='true'>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:'>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCRipple3D'>
<method selector='actionWithPosition:radius:waves:amplitude:grid:duration:' class_method='true'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='i' name='wav' declared_type='int' index='2'/>
<arg type='f' name='amp' declared_type='float' index='3'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='4'/>
<arg type='f' name='d' declared_type='ccTime' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithPosition:radius:waves:amplitude:grid:duration:'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='f' name='r' declared_type='float' index='1'/>
<arg type='i' name='wav' declared_type='int' index='2'/>
<arg type='f' name='amp' declared_type='float' index='3'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='4'/>
<arg type='f' name='d' declared_type='ccTime' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosition:'>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCRotateBy'>
<method selector='actionWithDuration:angle:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='deltaAngle' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:angle:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='deltaAngle' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCRotateTo'>
<method selector='actionWithDuration:angle:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='angle' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:angle:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='angle' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCScaleTo'>
<method selector='actionWithDuration:scale:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='s' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionWithDuration:scaleX:scaleY:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='sx' declared_type='float' index='1'/>
<arg type='f' name='sy' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:scale:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='s' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:scaleX:scaleY:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='f' name='sx' declared_type='float' index='1'/>
<arg type='f' name='sy' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCScheduler'>
<method selector='isTargetPaused:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='pauseAllTargets'>
<retval type='@' declared_type='NSSet*'/>
</method>
<method selector='pauseAllTargetsWithMinPriority:'>
<arg type='i' name='minPriority' declared_type='NSInteger' index='0'/>
<retval type='@' declared_type='NSSet*'/>
</method>
<method selector='pauseTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeTargets:'>
<arg type='@' name='targetsToResume' declared_type='NSSet*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleSelector:forTarget:interval:paused:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type='f' name='interval' declared_type='ccTime' index='2'/>
<arg type='B' name='paused' declared_type='BOOL' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleSelector:forTarget:interval:paused:repeat:delay:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type='f' name='interval' declared_type='ccTime' index='2'/>
<arg type='B' name='paused' declared_type='BOOL' index='3'/>
<arg type='I' name='repeat' declared_type='uint' index='4'/>
<arg type='f' name='delay' declared_type='ccTime' index='5'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='scheduleUpdateForTarget:priority:paused:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='NSInteger' index='1'/>
<arg type='B' name='paused' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTimeScale:'>
<arg type='f' name='timeScale' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedScheduler' class_method='true'>
<retval type='@' declared_type='CCScheduler*'/>
</method>
<method selector='timeScale'>
<retval type='f' declared_type='ccTime'/>
</method>
<method selector='unscheduleAllSelectors'>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleAllSelectorsForTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleAllSelectorsWithMinPriority:'>
<arg type='i' name='minPriority' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleSelector:forTarget:'>
<arg type=':' name='selector' declared_type='SEL' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unscheduleUpdateForTarget:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='update:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCSequence'>
<method selector='actionOne:two:' class_method='true'>
<arg type='@' name='actionOne' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='@' name='actionTwo' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method variadic='true' sentinel='0' selector='actions:' class_method='true'>
<arg type='@' name='action1' declared_type='CCFiniteTimeAction*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionsWithArray:' class_method='true'>
<arg type='@' name='actions' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initOne:two:'>
<arg type='@' name='actionOne' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='@' name='actionTwo' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCShaderCache'>
<method selector='addProgram:forKey:'>
<arg type='@' name='program' declared_type='CCGLProgram*' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='loadDefaultShaders'>
<retval type='v' declared_type='void'/>
</method>
<method selector='programForKey:'>
<arg type='@' name='key' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCGLProgram*'/>
</method>
<method selector='purgeSharedShaderCache' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedShaderCache' class_method='true'>
<retval type='@' declared_type='CCShaderCache*'/>
</method>
</class>
<class name='CCShaky3D'>
<method selector='actionWithRange:shakeZ:grid:duration:' class_method='true'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shakeZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithRange:shakeZ:grid:duration:'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shakeZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCShakyTiles3D'>
<method selector='actionWithRange:shakeZ:grid:duration:' class_method='true'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shakeZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithRange:shakeZ:grid:duration:'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shakeZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCShatteredTiles3D'>
<method selector='actionWithRange:shatterZ:grid:duration:' class_method='true'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shatterZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithRange:shatterZ:grid:duration:'>
<arg type='i' name='range' declared_type='int' index='0'/>
<arg type='B' name='shatterZ' declared_type='BOOL' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCShuffleTiles'>
<method selector='actionWithSeed:grid:duration:' class_method='true'>
<arg type='i' name='s' declared_type='int' index='0'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='1'/>
<arg type='f' name='d' declared_type='ccTime' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSeed:grid:duration:'>
<arg type='i' name='s' declared_type='int' index='0'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='1'/>
<arg type='f' name='d' declared_type='ccTime' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCSkewTo'>
<method selector='actionWithDuration:skewX:skewY:' class_method='true'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='f' name='sx' declared_type='float' index='1'/>
<arg type='f' name='sy' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:skewX:skewY:'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='f' name='sx' declared_type='float' index='1'/>
<arg type='f' name='sy' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCSpawn'>
<method selector='actionOne:two:' class_method='true'>
<arg type='@' name='one' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='@' name='two' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method variadic='true' sentinel='0' selector='actions:' class_method='true'>
<arg type='@' name='action1' declared_type='CCFiniteTimeAction*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='actionsWithArray:' class_method='true'>
<arg type='@' name='actions' declared_type='NSArray*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initOne:two:'>
<arg type='@' name='one' declared_type='CCFiniteTimeAction*' index='0'/>
<arg type='@' name='two' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCSpeed'>
<method selector='actionWithAction:speed:' class_method='true'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='value' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithAction:speed:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<arg type='f' name='value' declared_type='float' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='innerAction'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='setInnerAction:'>
<arg type='@' name='innerAction' declared_type='CCActionInterval*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSpeed:'>
<arg type='f' name='speed' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='speed'>
<retval type='f' declared_type='float'/>
</method>
</class>
<class name='CCSplitCols'>
<method selector='actionWithCols:duration:' class_method='true'>
<arg type='i' name='cols' declared_type='int' index='0'/>
<arg type='f' name='duration' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCols:duration:'>
<arg type='i' name='cols' declared_type='int' index='0'/>
<arg type='f' name='duration' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCSplitRows'>
<method selector='actionWithRows:duration:' class_method='true'>
<arg type='i' name='rows' declared_type='int' index='0'/>
<arg type='f' name='duration' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithRows:duration:'>
<arg type='i' name='rows' declared_type='int' index='0'/>
<arg type='f' name='duration' declared_type='ccTime' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCSprite'>
<method selector='atlasIndex'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='batchNode'>
<retval type='@' declared_type='CCSpriteBatchNode*'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='dirty'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='displayFrame'>
<retval type='@' declared_type='CCSpriteFrame*'/>
</method>
<method selector='displayedFrame'>
<retval type='@' declared_type='CCSpriteFrame*'/>
</method>
<method selector='flipX'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='flipY'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithBatchNode:rect:'>
<arg type='@' name='node' declared_type='CCSpriteBatchNode*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCGImage:key:'>
<arg type='^{CGImage=}' name='image' declared_type='CGImageRef' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFile:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFile:rect:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSpriteFrame:'>
<arg type='@' name='spriteFrame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSpriteFrameName:'>
<arg type='@' name='spriteFrameName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:rect:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:rect:rotated:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<arg type='B' name='rotated' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isFrameDisplayed:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='offsetPosition'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='quad'>
<retval type='{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' declared_type='ccV3F_C4B_T2F_Quad'/>
</method>
<method selector='setAtlasIndex:'>
<arg type='I' name='atlasIndex' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBatchNode:'>
<arg type='@' name='batchNode' declared_type='CCSpriteBatchNode*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDirty:'>
<arg type='B' name='dirty' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDisplayFrame:'>
<arg type='@' name='newFrame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDisplayFrameWithAnimationName:index:'>
<arg type='@' name='animationName' declared_type='NSString*' index='0'/>
<arg type='i' name='frameIndex' declared_type='int' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFlipX:'>
<arg type='B' name='flipX' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFlipY:'>
<arg type='B' name='flipY' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureAtlas:'>
<arg type='@' name='textureAtlas' declared_type='CCTextureAtlas*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureRect:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureRect:rotated:untrimmedSize:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<arg type='B' name='rotated' declared_type='BOOL' index='1'/>
<arg type='{CGSize=ff}' name='size' declared_type='CGSize' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVertexRect:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='spriteWithBatchNode:rect:' class_method='true'>
<arg type='@' name='node' declared_type='CCSpriteBatchNode*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithCGImage:key:' class_method='true'>
<arg type='^{CGImage=}' name='image' declared_type='CGImageRef' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithFile:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithFile:rect:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithSpriteFrame:' class_method='true'>
<arg type='@' name='spriteFrame' declared_type='CCSpriteFrame*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithSpriteFrameName:' class_method='true'>
<arg type='@' name='spriteFrameName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithTexture:' class_method='true'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='spriteWithTexture:rect:' class_method='true'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='textureAtlas'>
<retval type='@' declared_type='CCTextureAtlas*'/>
</method>
<method selector='textureRect'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='textureRectRotated'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='updateTransform'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCSpriteBatchNode'>
<method selector='addQuadFromSprite:quadIndex:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteWithoutQuad:z:tag:'>
<arg type='@' name='child' declared_type='CCSprite*' index='0'/>
<arg type='I' name='z' declared_type='NSUInteger' index='1'/>
<arg type='i' name='aTag' declared_type='NSInteger' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='appendChild:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='atlasIndexForChild:atZ:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='batchNodeWithFile:' class_method='true'>
<arg type='@' name='fileImage' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithFile:capacity:' class_method='true'>
<arg type='@' name='fileImage' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithTexture:' class_method='true'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='batchNodeWithTexture:capacity:' class_method='true'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='descendants'>
<retval type='@' declared_type='CCArray*'/>
</method>
<method selector='increaseAtlasCapacity'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithFile:capacity:'>
<arg type='@' name='fileImage' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='insertChild:inAtlasAtIndex:'>
<arg type='@' name='child' declared_type='CCSprite*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='rebuildIndexInOrder:atlasIndex:'>
<arg type='@' name='parent' declared_type='CCSprite*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='removeChild:cleanup:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<arg type='B' name='doCleanup' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeChildAtIndex:cleanup:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<arg type='B' name='doCleanup' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFromAtlas:'>
<arg type='@' name='sprite' declared_type='CCSprite*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='reorderBatch:'>
<arg type='B' name='reorder' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTextureAtlas:'>
<arg type='@' name='textureAtlas' declared_type='CCTextureAtlas*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='textureAtlas'>
<retval type='@' declared_type='CCTextureAtlas*'/>
</method>
</class>
<class name='CCSpriteFrame'>
<method selector='frameWithTexture:rect:' class_method='true'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='frameWithTexture:rectInPixels:rotated:offset:originalSize:' class_method='true'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<arg type='B' name='rotated' declared_type='BOOL' index='2'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='3'/>
<arg type='{CGSize=ff}' name='originalSize' declared_type='CGSize' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='frameWithTextureFilename:rect:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='frameWithTextureFilename:rectInPixels:rotated:offset:originalSize:' class_method='true'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<arg type='B' name='rotated' declared_type='BOOL' index='2'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='3'/>
<arg type='{CGSize=ff}' name='originalSize' declared_type='CGSize' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:rect:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:rectInPixels:rotated:offset:originalSize:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<arg type='B' name='rotated' declared_type='BOOL' index='2'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='3'/>
<arg type='{CGSize=ff}' name='originalSize' declared_type='CGSize' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTextureFilename:rect:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTextureFilename:rectInPixels:rotated:offset:originalSize:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='1'/>
<arg type='B' name='rotated' declared_type='BOOL' index='2'/>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='3'/>
<arg type='{CGSize=ff}' name='originalSize' declared_type='CGSize' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='offset'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='offsetInPixels'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='originalSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='originalSizeInPixels'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='rect'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='rectInPixels'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='rotated'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setOffset:'>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOffsetInPixels:'>
<arg type='{CGPoint=ff}' name='offsetInPixels' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOriginalSize:'>
<arg type='{CGSize=ff}' name='originalSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOriginalSizeInPixels:'>
<arg type='{CGSize=ff}' name='originalSizeInPixels' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRect:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRectInPixels:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rectInPixels' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRotated:'>
<arg type='B' name='rotated' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='textureFilename'>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
<class name='CCSpriteFrameCache'>
<method selector='addSpriteFrame:name:'>
<arg type='@' name='frame' declared_type='CCSpriteFrame*' index='0'/>
<arg type='@' name='frameName' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithDictionary:texture:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithDictionary:textureFile:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<arg type='@' name='filename' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithDictionary:textureFilename:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<arg type='@' name='filename' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithFile:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithFile:texture:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithFile:textureFile:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<arg type='@' name='filename' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addSpriteFramesWithFile:textureFilename:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<arg type='@' name='filename' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='purgeSharedSpriteFrameCache' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFrameByName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFrames'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFramesFromDictionary:'>
<arg type='@' name='dictionary' declared_type='NSDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFramesFromFile:'>
<arg type='@' name='plist' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeSpriteFramesFromTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeUnusedSpriteFrames'>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedSpriteFrameCache' class_method='true'>
<retval type='@' declared_type='CCSpriteFrameCache*'/>
</method>
<method selector='spriteFrameByName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCSpriteFrame*'/>
</method>
</class>
<class name='CCTMXLayer'>
<method selector='addChild:z:tag:'>
<arg type='@' name='node' declared_type='CCNode*' index='0'/>
<arg type='i' name='z' declared_type='NSInteger' index='1'/>
<arg type='i' name='tag' declared_type='NSInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithTilesetInfo:layerInfo:mapInfo:'>
<arg type='@' name='tilesetInfo' declared_type='CCTMXTilesetInfo*' index='0'/>
<arg type='@' name='layerInfo' declared_type='CCTMXLayerInfo*' index='1'/>
<arg type='@' name='mapInfo' declared_type='CCTMXMapInfo*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerName'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='layerOrientation'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='layerSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='layerWithTilesetInfo:layerInfo:mapInfo:' class_method='true'>
<arg type='@' name='tilesetInfo' declared_type='CCTMXTilesetInfo*' index='0'/>
<arg type='@' name='layerInfo' declared_type='CCTMXLayerInfo*' index='1'/>
<arg type='@' name='mapInfo' declared_type='CCTMXMapInfo*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='mapTileSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='positionAt:'>
<arg type='{CGPoint=ff}' name='tileCoordinate' declared_type='CGPoint' index='0'/>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='properties'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='propertyNamed:'>
<arg type='@' name='propertyName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='releaseMap'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeTileAt:'>
<arg type='{CGPoint=ff}' name='tileCoordinate' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLayerName:'>
<arg type='@' name='layerName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLayerOrientation:'>
<arg type='I' name='layerOrientation' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLayerSize:'>
<arg type='{CGSize=ff}' name='layerSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMapTileSize:'>
<arg type='{CGSize=ff}' name='mapTileSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProperties:'>
<arg type='@' name='properties' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileGID:at:'>
<arg type='I' name='gid' declared_type='uint32_t' index='0'/>
<arg type='{CGPoint=ff}' name='tileCoordinate' declared_type='CGPoint' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileGID:at:withFlags:'>
<arg type='I' name='gid' declared_type='uint32_t' index='0'/>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='1'/>
<arg type='i' name='flags' declared_type='ccTMXTileFlags' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTiles:'>
<arg type='^I' name='tiles' declared_type='uint32_t*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileset:'>
<arg type='@' name='tileset' declared_type='CCTMXTilesetInfo*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setupTiles'>
<retval type='v' declared_type='void'/>
</method>
<method selector='tileAt:'>
<arg type='{CGPoint=ff}' name='tileCoordinate' declared_type='CGPoint' index='0'/>
<retval type='@' declared_type='CCSprite*'/>
</method>
<method selector='tileGIDAt:'>
<arg type='{CGPoint=ff}' name='tileCoordinate' declared_type='CGPoint' index='0'/>
<retval type='I' declared_type='uint32_t'/>
</method>
<method selector='tileGIDAt:withFlags:'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='^i' name='flags' declared_type='ccTMXTileFlags*' index='1'/>
<retval type='I' declared_type='uint32_t'/>
</method>
<method selector='tiles'>
<retval type='^I' declared_type='uint32_t*'/>
</method>
<method selector='tileset'>
<retval type='@' declared_type='CCTMXTilesetInfo*'/>
</method>
</class>
<class name='CCTMXLayerInfo'>
<method selector='layerSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='maxGID'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='minGID'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='name'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='offset'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='unsigned char'/>
</method>
<method selector='ownTiles'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='properties'>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='setLayerSize:'>
<arg type='{CGSize=ff}' name='layerSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxGID:'>
<arg type='I' name='maxGID' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMinGID:'>
<arg type='I' name='minGID' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOffset:'>
<arg type='{CGPoint=ff}' name='offset' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='unsigned char' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOwnTiles:'>
<arg type='B' name='ownTiles' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProperties:'>
<arg type='@' name='properties' declared_type='NSMutableDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTiles:'>
<arg type='^I' name='tiles' declared_type='unsigned int*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVisible:'>
<arg type='B' name='visible' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tiles'>
<retval type='^I' declared_type='unsigned int*'/>
</method>
<method selector='visible'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CCTMXMapInfo'>
<method selector='filename'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='formatWithTMXFile:' class_method='true'>
<arg type='@' name='tmxFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='formatWithXML:resourcePath:' class_method='true'>
<arg type='@' name='tmxString' declared_type='NSString*' index='0'/>
<arg type='@' name='resourcePath' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTMXFile:'>
<arg type='@' name='tmxFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithXML:resourcePath:'>
<arg type='@' name='tmxString' declared_type='NSString*' index='0'/>
<arg type='@' name='resourcePath' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layers'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='mapSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='objectGroups'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='orientation'>
<retval type='i' declared_type='int'/>
</method>
<method selector='properties'>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='resources'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='setFilename:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLayers:'>
<arg type='@' name='layers' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMapSize:'>
<arg type='{CGSize=ff}' name='mapSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setObjectGroups:'>
<arg type='@' name='objectGroups' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOrientation:'>
<arg type='i' name='orientation' declared_type='int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProperties:'>
<arg type='@' name='properties' declared_type='NSMutableDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setResources:'>
<arg type='@' name='resources' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileProperties:'>
<arg type='@' name='tileProperties' declared_type='NSMutableDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileSize:'>
<arg type='{CGSize=ff}' name='tileSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTilesets:'>
<arg type='@' name='tilesets' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tileProperties'>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='tileSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='tilesets'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
</class>
<class name='CCTMXObjectGroup'>
<method selector='groupName'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='objectNamed:'>
<arg type='@' name='objectName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='objects'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='positionOffset'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='properties'>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='propertyNamed:'>
<arg type='@' name='propertyName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setGroupName:'>
<arg type='@' name='groupName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setObjects:'>
<arg type='@' name='objects' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPositionOffset:'>
<arg type='{CGPoint=ff}' name='positionOffset' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProperties:'>
<arg type='@' name='properties' declared_type='NSMutableDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTMXTiledMap'>
<method selector='initWithTMXFile:'>
<arg type='@' name='tmxFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithXML:resourcePath:'>
<arg type='@' name='tmxString' declared_type='NSString*' index='0'/>
<arg type='@' name='resourcePath' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='layerNamed:'>
<arg type='@' name='layerName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCTMXLayer*'/>
</method>
<method selector='mapOrientation'>
<retval type='i' declared_type='int'/>
</method>
<method selector='mapSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='objectGroupNamed:'>
<arg type='@' name='groupName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCTMXObjectGroup*'/>
</method>
<method selector='objectGroups'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='properties'>
<retval type='@' declared_type='NSMutableDictionary*'/>
</method>
<method selector='propertiesForGID:'>
<arg type='I' name='GID' declared_type='unsigned int' index='0'/>
<retval type='@' declared_type='NSDictionary*'/>
</method>
<method selector='propertyNamed:'>
<arg type='@' name='propertyName' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setObjectGroups:'>
<arg type='@' name='objectGroups' declared_type='NSMutableArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setProperties:'>
<arg type='@' name='properties' declared_type='NSMutableDictionary*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tileSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='tiledMapWithTMXFile:' class_method='true'>
<arg type='@' name='tmxFile' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='tiledMapWithXML:resourcePath:' class_method='true'>
<arg type='@' name='tmxString' declared_type='NSString*' index='0'/>
<arg type='@' name='resourcePath' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTMXTilesetInfo'>
<method selector='firstGid'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='imageSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='margin'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='name'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='rectForGID:'>
<arg type='I' name='gid' declared_type='unsigned int' index='0'/>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='setFirstGid:'>
<arg type='I' name='firstGid' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageSize:'>
<arg type='{CGSize=ff}' name='imageSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMargin:'>
<arg type='I' name='margin' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setName:'>
<arg type='@' name='name' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSourceImage:'>
<arg type='@' name='sourceImage' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSpacing:'>
<arg type='I' name='spacing' declared_type='unsigned int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTileSize:'>
<arg type='{CGSize=ff}' name='tileSize' declared_type='CGSize' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sourceImage'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='spacing'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='tileSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
</class>
<class name='CCTargetedAction'>
<method selector='actionWithTarget:action:' class_method='true'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='forcedTarget'>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:action:'>
<arg type='@' name='target' declared_type='id' index='0'/>
<arg type='@' name='action' declared_type='CCFiniteTimeAction*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setForcedTarget:'>
<arg type='@' name='forcedTarget' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTargetedTouchHandler'>
<method selector='claimedTouches'>
<retval type='@' declared_type='NSMutableSet*'/>
</method>
<method selector='handlerWithDelegate:priority:swallowsTouches:' class_method='true'>
<arg type='@' name='aDelegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<arg type='B' name='swallowsTouches' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDelegate:priority:swallowsTouches:'>
<arg type='@' name='aDelegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<arg type='B' name='swallowsTouches' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setSwallowsTouches:'>
<arg type='B' name='swallowsTouches' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='swallowsTouches'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CCTexture2D'>
<method selector='PVRImagesHavePremultipliedAlpha:' class_method='true'>
<arg type='B' name='haveAlphaPremultiplied' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='bitsPerPixelForFormat'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='contentSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='contentSizeInPixels'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='defaultAlphaPixelFormat' class_method='true'>
<retval type='i' declared_type='CCTexture2DPixelFormat'/>
</method>
<method selector='drawAtPoint:'>
<arg type='{CGPoint=ff}' name='point' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='drawInRect:'>
<arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect' declared_type='CGRect' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='generateMipmap'>
<retval type='v' declared_type='void'/>
</method>
<method selector='hasPremultipliedAlpha'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithCGImage:resolutionType:'>
<arg type='^{CGImage=}' name='cgImage' declared_type='CGImageRef' index='0'/>
<arg type='i' name='resolution' declared_type='ccResolutionType' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithData:pixelFormat:pixelsWide:pixelsHigh:contentSize:'>
<arg const='true' type='^v' name='data' declared_type='void*' index='0'/>
<arg type='i' name='pixelFormat' declared_type='CCTexture2DPixelFormat' index='1'/>
<arg type='I' name='width' declared_type='NSUInteger' index='2'/>
<arg type='I' name='height' declared_type='NSUInteger' index='3'/>
<arg type='{CGSize=ff}' name='size' declared_type='CGSize' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithPVRFile:'>
<arg type='@' name='file' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:alignment:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='@' name='name' declared_type='NSString*' index='3'/>
<arg type='f' name='size' declared_type='CGFloat' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vertAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='@' name='name' declared_type='NSString*' index='4'/>
<arg type='f' name='size' declared_type='CGFloat' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='{CGSize=ff}' name='dimensions' declared_type='CGSize' index='1'/>
<arg type='i' name='alignment' declared_type='CCTextAlignment' index='2'/>
<arg type='i' name='vertAlignment' declared_type='CCVerticalTextAlignment' index='3'/>
<arg type='i' name='lineBreakMode' declared_type='CCLineBreakMode' index='4'/>
<arg type='@' name='name' declared_type='NSString*' index='5'/>
<arg type='f' name='size' declared_type='CGFloat' index='6'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithString:fontName:fontSize:'>
<arg type='@' name='string' declared_type='NSString*' index='0'/>
<arg type='@' name='name' declared_type='NSString*' index='1'/>
<arg type='f' name='size' declared_type='CGFloat' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='keepData:length:'>
<arg type='^v' name='data' declared_type='void*' index='0'/>
<arg type='I' name='length' declared_type='NSUInteger' index='1'/>
<retval type='^v' declared_type='void*'/>
</method>
<method selector='maxS'>
<retval type='f' declared_type='GLfloat'/>
</method>
<method selector='maxT'>
<retval type='f' declared_type='GLfloat'/>
</method>
<method selector='name'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='pixelFormat'>
<retval type='i' declared_type='CCTexture2DPixelFormat'/>
</method>
<method selector='pixelsHigh'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='pixelsWide'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='releaseData:'>
<arg type='^v' name='data' declared_type='void*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resolutionType'>
<retval type='i' declared_type='ccResolutionType'/>
</method>
<method selector='setAliasTexParameters'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAntiAliasTexParameters'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDefaultAlphaPixelFormat:' class_method='true'>
<arg type='i' name='format' declared_type='CCTexture2DPixelFormat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxS:'>
<arg type='f' name='maxS' declared_type='GLfloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxT:'>
<arg type='f' name='maxT' declared_type='GLfloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setResolutionType:'>
<arg type='i' name='resolutionType' declared_type='ccResolutionType' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShaderProgram:'>
<arg type='@' name='shaderProgram' declared_type='CCGLProgram*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexParameters:'>
<arg type='^{_ccTexParams=IIII}' name='texParams' declared_type='ccTexParams*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shaderProgram'>
<retval type='@' declared_type='CCGLProgram*'/>
</method>
</class>
<class name='CCTextureAtlas'>
<method selector='capacity'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='drawNumberOfQuads:'>
<arg type='I' name='n' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='drawNumberOfQuads:fromIndex:'>
<arg type='I' name='n' declared_type='NSUInteger' index='0'/>
<arg type='I' name='start' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='drawQuads'>
<retval type='v' declared_type='void'/>
</method>
<method selector='fillWithEmptyQuadsFromIndex:amount:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<arg type='I' name='amount' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='increaseTotalQuadsWith:'>
<arg type='I' name='amount' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithFile:capacity:'>
<arg type='@' name='file' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='insertQuad:atIndex:'>
<arg type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' name='quad' declared_type='ccV3F_C4B_T2F_Quad*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='insertQuadFromIndex:atIndex:'>
<arg type='I' name='fromIndex' declared_type='NSUInteger' index='0'/>
<arg type='I' name='newIndex' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='insertQuads:atIndex:amount:'>
<arg type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' name='quads' declared_type='ccV3F_C4B_T2F_Quad*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<arg type='I' name='amount' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='moveQuadsFromIndex:amount:atIndex:'>
<arg type='I' name='oldIndex' declared_type='NSUInteger' index='0'/>
<arg type='I' name='amount' declared_type='NSUInteger' index='1'/>
<arg type='I' name='newIndex' declared_type='NSUInteger' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='moveQuadsFromIndex:to:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<arg type='I' name='newIndex' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='quads'>
<retval type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' declared_type='ccV3F_C4B_T2F_Quad*'/>
</method>
<method selector='removeAllQuads'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeQuadAtIndex:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeQuadsAtIndex:amount:'>
<arg type='I' name='index' declared_type='NSUInteger' index='0'/>
<arg type='I' name='amount' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resizeCapacity:'>
<arg type='I' name='n' declared_type='NSUInteger' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setQuads:'>
<arg type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' name='quads' declared_type='ccV3F_C4B_T2F_Quad*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='textureAtlasWithFile:capacity:' class_method='true'>
<arg type='@' name='file' declared_type='NSString*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='textureAtlasWithTexture:capacity:' class_method='true'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<arg type='I' name='capacity' declared_type='NSUInteger' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='totalQuads'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='updateQuad:atIndex:'>
<arg type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}' name='quad' declared_type='ccV3F_C4B_T2F_Quad*' index='0'/>
<arg type='I' name='index' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTextureCache'>
<method selector='addCGImage:forKey:'>
<arg type='^{CGImage=}' name='image' declared_type='CGImageRef' index='0'/>
<arg type='@' name='key' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='addImage:'>
<arg type='@' name='fileimage' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='addImageAsync:target:selector:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='@' name='target' declared_type='id' index='1'/>
<arg type=':' name='selector' declared_type='SEL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addImageAsync:withBlock:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<arg type='@?' name='block' declared_type='void (^)(CCTexture2D *)' function_pointer='true' index='1'>
<arg type='@' declared_type='CCTexture2D*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='addPVRImage:'>
<arg type='@' name='filename' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='dumpCachedTextureInfo'>
<retval type='v' declared_type='void'/>
</method>
<method selector='purgeSharedTextureCache' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAllTextures'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeTexture:'>
<arg type='@' name='tex' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeTextureForKey:'>
<arg type='@' name='textureKeyName' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeUnusedTextures'>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedTextureCache' class_method='true'>
<retval type='@' declared_type='CCTextureCache*'/>
</method>
<method selector='textureForKey:'>
<arg type='@' name='key' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
</class>
<class name='CCTexturePVR'>
<method selector='format'>
<retval type='i' declared_type='CCTexture2DPixelFormat'/>
</method>
<method selector='hasAlpha'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='height'>
<retval type='I' declared_type='uint32_t'/>
</method>
<method selector='initWithContentsOfFile:'>
<arg type='@' name='path' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithContentsOfURL:'>
<arg type='@' name='url' declared_type='NSURL*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='name'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='numberOfMipmaps'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='pvrTextureWithContentsOfFile:' class_method='true'>
<arg type='@' name='path' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='pvrTextureWithContentsOfURL:' class_method='true'>
<arg type='@' name='url' declared_type='NSURL*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='retainName'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setRetainName:'>
<arg type='B' name='retainName' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='width'>
<retval type='I' declared_type='uint32_t'/>
</method>
</class>
<class name='CCTileMapAtlas'>
<method selector='initWithTileFile:mapFile:tileWidth:tileHeight:'>
<arg type='@' name='tile' declared_type='NSString*' index='0'/>
<arg type='@' name='map' declared_type='NSString*' index='1'/>
<arg type='i' name='w' declared_type='int' index='2'/>
<arg type='i' name='h' declared_type='int' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='releaseMap'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTile:at:'>
<arg type='{_ccColor3B=CCC}' name='tile' declared_type='ccColor3B' index='0'/>
<arg type='{_ccGridSize=ii}' name='position' declared_type='ccGridSize' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tgaInfo'>
<retval type='^{sImageTGA=iCCss*i}' declared_type='tImageTGA*'/>
</method>
<method selector='tileAt:'>
<arg type='{_ccGridSize=ii}' name='position' declared_type='ccGridSize' index='0'/>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='tileMapAtlasWithTileFile:mapFile:tileWidth:tileHeight:' class_method='true'>
<arg type='@' name='tile' declared_type='NSString*' index='0'/>
<arg type='@' name='map' declared_type='NSString*' index='1'/>
<arg type='i' name='w' declared_type='int' index='2'/>
<arg type='i' name='h' declared_type='int' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTiledGrid3D'>
<method selector='originalTile:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' declared_type='ccQuad3'/>
</method>
<method selector='setTile:coords:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<arg type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' name='coords' declared_type='ccQuad3' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tile:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' declared_type='ccQuad3'/>
</method>
</class>
<class name='CCTiledGrid3DAction'>
<method selector='originalTile:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' declared_type='ccQuad3'/>
</method>
<method selector='setTile:coords:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<arg type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' name='coords' declared_type='ccQuad3' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tile:'>
<arg type='{_ccGridSize=ii}' name='pos' declared_type='ccGridSize' index='0'/>
<retval type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}' declared_type='ccQuad3'/>
</method>
</class>
<class name='CCTimer'>
<method selector='initWithTarget:selector:'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithTarget:selector:interval:repeat:delay:'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='f' name='seconds' declared_type='ccTime' index='2'/>
<arg type='I' name='r' declared_type='uint' index='3'/>
<arg type='f' name='d' declared_type='ccTime' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='interval'>
<retval type='f' declared_type='ccTime'/>
</method>
<method selector='setInterval:'>
<arg type='f' name='interval' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='timerWithTarget:selector:' class_method='true'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='timerWithTarget:selector:interval:' class_method='true'>
<arg type='@' name='t' declared_type='id' index='0'/>
<arg type=':' name='s' declared_type='SEL' index='1'/>
<arg type='f' name='seconds' declared_type='ccTime' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='update:'>
<arg type='f' name='dt' declared_type='ccTime' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTintBy'>
<method selector='actionWithDuration:red:green:blue:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='s' name='deltaRed' declared_type='GLshort' index='1'/>
<arg type='s' name='deltaGreen' declared_type='GLshort' index='2'/>
<arg type='s' name='deltaBlue' declared_type='GLshort' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:red:green:blue:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='s' name='deltaRed' declared_type='GLshort' index='1'/>
<arg type='s' name='deltaGreen' declared_type='GLshort' index='2'/>
<arg type='s' name='deltaBlue' declared_type='GLshort' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTintTo'>
<method selector='actionWithDuration:red:green:blue:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='C' name='red' declared_type='GLubyte' index='1'/>
<arg type='C' name='green' declared_type='GLubyte' index='2'/>
<arg type='C' name='blue' declared_type='GLubyte' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDuration:red:green:blue:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='C' name='red' declared_type='GLubyte' index='1'/>
<arg type='C' name='green' declared_type='GLubyte' index='2'/>
<arg type='C' name='blue' declared_type='GLubyte' index='3'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTouchDispatcher'>
<method selector='addStandardDelegate:priority:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addTargetedDelegate:priority:swallowsTouches:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<arg type='B' name='swallowsTouches' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='dispatchEvents'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='removeAllDelegates'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeDelegate:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDispatchEvents:'>
<arg type='B' name='dispatchEvents' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPriority:forDelegate:'>
<arg type='i' name='priority' declared_type='int' index='0'/>
<arg type='@' name='delegate' declared_type='id' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedDispatcher' class_method='true'>
<retval type='@' declared_type='CCTouchDispatcher*'/>
</method>
</class>
<class name='CCTouchHandler'>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='enabledSelectors'>
<retval type='i' declared_type='ccTouchSelectorFlag'/>
</method>
<method selector='handlerWithDelegate:priority:' class_method='true'>
<arg type='@' name='aDelegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithDelegate:priority:'>
<arg type='@' name='aDelegate' declared_type='id' index='0'/>
<arg type='i' name='priority' declared_type='int' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='priority'>
<retval type='i' declared_type='int'/>
</method>
<method selector='setDelegate:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEnabledSelectors:'>
<arg type='i' name='enabledSelectors' declared_type='ccTouchSelectorFlag' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPriority:'>
<arg type='i' name='priority' declared_type='int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTransitionFade'>
<method selector='initWithDuration:scene:withColor:'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='scene' declared_type='CCScene*' index='1'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='transitionWithDuration:scene:withColor:' class_method='true'>
<arg type='f' name='duration' declared_type='ccTime' index='0'/>
<arg type='@' name='scene' declared_type='CCScene*' index='1'/>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTransitionFadeTR'>
<method selector='actionWithSize:'>
<arg type='{_ccGridSize=ii}' name='vector' declared_type='ccGridSize' index='0'/>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
</class>
<class name='CCTransitionMoveInL'>
<method selector='action'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='initScenes'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTransitionPageTurn'>
<method selector='actionWithSize:'>
<arg type='{_ccGridSize=ii}' name='vector' declared_type='ccGridSize' index='0'/>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='initWithDuration:scene:backwards:'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<arg type='B' name='back' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='transitionWithDuration:scene:backwards:' class_method='true'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<arg type='B' name='back' declared_type='BOOL' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTransitionScene'>
<method selector='finish'>
<retval type='v' declared_type='void'/>
</method>
<method selector='hideOutShowIn'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithDuration:scene:'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='transitionWithDuration:scene:' class_method='true'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTransitionSceneOriented'>
<method selector='initWithDuration:scene:orientation:'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<arg type='i' name='o' declared_type='tOrientation' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='transitionWithDuration:scene:orientation:' class_method='true'>
<arg type='f' name='t' declared_type='ccTime' index='0'/>
<arg type='@' name='s' declared_type='CCScene*' index='1'/>
<arg type='i' name='o' declared_type='tOrientation' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTransitionSlideInL'>
<method selector='action'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='initScenes'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCTransitionSplitCols'>
<method selector='action'>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
</class>
<class name='CCTurnOffTiles'>
<method selector='actionWithSeed:grid:duration:' class_method='true'>
<arg type='i' name='s' declared_type='int' index='0'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='1'/>
<arg type='f' name='d' declared_type='ccTime' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithSeed:grid:duration:'>
<arg type='i' name='s' declared_type='int' index='0'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='1'/>
<arg type='f' name='d' declared_type='ccTime' index='2'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CCTwirl'>
<method selector='actionWithPosition:twirls:amplitude:grid:duration:' class_method='true'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='i' name='t' declared_type='int' index='1'/>
<arg type='f' name='amp' declared_type='float' index='2'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='3'/>
<arg type='f' name='d' declared_type='ccTime' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithPosition:twirls:amplitude:grid:duration:'>
<arg type='{CGPoint=ff}' name='pos' declared_type='CGPoint' index='0'/>
<arg type='i' name='t' declared_type='int' index='1'/>
<arg type='f' name='amp' declared_type='float' index='2'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='3'/>
<arg type='f' name='d' declared_type='ccTime' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosition:'>
<arg type='{CGPoint=ff}' name='position' declared_type='CGPoint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCWaves'>
<method selector='actionWithWaves:amplitude:horizontal:vertical:grid:duration:' class_method='true'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='B' name='h' declared_type='BOOL' index='2'/>
<arg type='B' name='v' declared_type='BOOL' index='3'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='4'/>
<arg type='f' name='d' declared_type='ccTime' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithWaves:amplitude:horizontal:vertical:grid:duration:'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='B' name='h' declared_type='BOOL' index='2'/>
<arg type='B' name='v' declared_type='BOOL' index='3'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='4'/>
<arg type='f' name='d' declared_type='ccTime' index='5'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCWaves3D'>
<method selector='actionWithWaves:amplitude:grid:duration:' class_method='true'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CCWavesTiles3D'>
<method selector='actionWithWaves:amplitude:grid:duration:' class_method='true'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='amplitude'>
<retval type='f' declared_type='float'/>
</method>
<method selector='amplitudeRate'>
<retval type='f' declared_type='float'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg type='i' name='wav' declared_type='int' index='0'/>
<arg type='f' name='amp' declared_type='float' index='1'/>
<arg type='{_ccGridSize=ii}' name='gridSize' declared_type='ccGridSize' index='2'/>
<arg type='f' name='d' declared_type='ccTime' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setAmplitude:'>
<arg type='f' name='amplitude' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAmplitudeRate:'>
<arg type='f' name='amplitudeRate' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CDAsynchBufferLoader'>
<method selector='init:soundEngine:'>
<arg type='@' name='loadRequests' declared_type='NSArray*' index='0'/>
<arg type='@' name='theSoundEngine' declared_type='CDSoundEngine*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='CDAudioInterruptTargetGroup'>
<method selector='addAudioInterruptTarget:'>
<arg type='@' name='interruptibleTarget' declared_type='NSObject*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CDAudioManager'>
<method selector='applicationDidBecomeActive'>
<retval type='v' declared_type='void'/>
</method>
<method selector='applicationWillResignActive'>
<retval type='v' declared_type='void'/>
</method>
<method selector='audioSessionInterrupted'>
<retval type='v' declared_type='void'/>
</method>
<method selector='audioSessionResumed'>
<retval type='v' declared_type='void'/>
</method>
<method selector='audioSourceForChannel:'>
<arg type='i' name='channel' declared_type='tAudioSourceChannel' index='0'/>
<retval type='@' declared_type='CDLongAudioSource*'/>
</method>
<method selector='audioSourceLoad:channel:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<arg type='i' name='channel' declared_type='tAudioSourceChannel' index='1'/>
<retval type='@' declared_type='CDLongAudioSource*'/>
</method>
<method selector='backgroundMusic'>
<retval type='@' declared_type='CDLongAudioSource*'/>
</method>
<method selector='configure:' class_method='true'>
<arg type='i' name='mode' declared_type='tAudioManagerMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='end' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='init:'>
<arg type='i' name='mode' declared_type='tAudioManagerMode' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initAsynchronously:' class_method='true'>
<arg type='i' name='mode' declared_type='tAudioManagerMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='isBackgroundMusicPlaying'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isDeviceMuted'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isOtherAudioPlaying'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='pauseBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='playBackgroundMusic:loop:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<arg type='B' name='loop' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='preloadBackgroundMusic:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rewindBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundMusicCompletionListener:selector:'>
<arg type='@' name='listener' declared_type='id' index='0'/>
<arg type=':' name='selector' declared_type='SEL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMode:'>
<arg type='i' name='mode' declared_type='tAudioManagerMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setResignBehavior:autoHandle:'>
<arg type='i' name='resignBehavior' declared_type='tAudioManagerResignBehavior' index='0'/>
<arg type='B' name='autoHandle' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedManager' class_method='true'>
<retval type='@' declared_type='CDAudioManager*'/>
</method>
<method selector='sharedManagerState' class_method='true'>
<retval type='i' declared_type='tAudioManagerState'/>
</method>
<method selector='soundEngine'>
<retval type='@' declared_type='CDSoundEngine*'/>
</method>
<method selector='stopBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='willPlayBackgroundMusic'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CDBufferLoadRequest'>
<method selector='filePath'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='init:filePath:'>
<arg type='i' name='theSoundId' declared_type='int' index='0'/>
<arg const='true' type='@' name='theFilePath' declared_type='NSString*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='soundId'>
<retval type='i' declared_type='int'/>
</method>
</class>
<class name='CDBufferManager'>
<method selector='bufferForFile:create:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<arg type='B' name='create' declared_type='BOOL' index='1'/>
<retval type='i' declared_type='int'/>
</method>
<method selector='initWithEngine:'>
<arg type='@' name='theSoundEngine' declared_type='CDSoundEngine*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='releaseBufferForFile:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='CDFloatInterpolator'>
<method selector='end'>
<retval type='f' declared_type='float'/>
</method>
<method selector='init:startVal:endVal:'>
<arg type='i' name='type' declared_type='tCDInterpolationType' index='0'/>
<arg type='f' name='startVal' declared_type='float' index='1'/>
<arg type='f' name='endVal' declared_type='float' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='interpolate:'>
<arg type='f' name='t' declared_type='float' index='0'/>
<retval type='f' declared_type='float'/>
</method>
<method selector='interpolationType'>
<retval type='i' declared_type='tCDInterpolationType'/>
</method>
<method selector='setEnd:'>
<arg type='f' name='end' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInterpolationType:'>
<arg type='i' name='interpolationType' declared_type='tCDInterpolationType' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStart:'>
<arg type='f' name='start' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='start'>
<retval type='f' declared_type='float'/>
</method>
</class>
<class name='CDLongAudioSource'>
<method selector='audioSourceFilePath'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='audioSourcePlayer'>
<retval type='@' declared_type='AVAudioPlayer*'/>
</method>
<method selector='backgroundMusic'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='isPlaying'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='load:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='numberOfLoops'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='pause'>
<retval type='v' declared_type='void'/>
</method>
<method selector='play'>
<retval type='v' declared_type='void'/>
</method>
<method selector='resume'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rewind'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundMusic:'>
<arg type='B' name='backgroundMusic' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegate:'>
<arg type='@' name='delegate' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNumberOfLoops:'>
<arg type='i' name='numberOfLoops' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVolume:'>
<arg type='f' name='volume' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stop'>
<retval type='v' declared_type='void'/>
</method>
<method selector='volume'>
<retval type='f' declared_type='float'/>
</method>
</class>
<class name='CDPropertyModifier'>
<method selector='_allowableType'>
<retval type='#' declared_type='Class'/>
</method>
<method selector='_getTargetProperty'>
<retval type='f' declared_type='float'/>
</method>
<method selector='_setTargetProperty:'>
<arg type='f' name='newVal' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='_stopTarget'>
<retval type='v' declared_type='void'/>
</method>
<method selector='endValue'>
<retval type='f' declared_type='float'/>
</method>
<method selector='init:interpolationType:startVal:endVal:'>
<arg type='@' name='theTarget' declared_type='id' index='0'/>
<arg type='i' name='type' declared_type='tCDInterpolationType' index='1'/>
<arg type='f' name='startVal' declared_type='float' index='2'/>
<arg type='f' name='endVal' declared_type='float' index='3'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='interpolationType'>
<retval type='i' declared_type='tCDInterpolationType'/>
</method>
<method selector='modify:'>
<arg type='f' name='t' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndValue:'>
<arg type='f' name='endValue' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInterpolationType:'>
<arg type='i' name='interpolationType' declared_type='tCDInterpolationType' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStartValue:'>
<arg type='f' name='startValue' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setStopTargetWhenComplete:'>
<arg type='B' name='stopTargetWhenComplete' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='startValue'>
<retval type='f' declared_type='float'/>
</method>
<method selector='stopTargetWhenComplete'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CDSoundEngine'>
<method selector='_soundSourcePreRelease:'>
<arg type='@' name='soundSource' declared_type='CDSoundSource*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='asynchLoadProgress'>
<retval type='f' declared_type='float'/>
</method>
<method selector='bufferDurationInSeconds:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<retval type='f' declared_type='float'/>
</method>
<method selector='bufferFrequencyInHertz:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<retval type='i' declared_type='ALsizei'/>
</method>
<method selector='bufferSizeInBytes:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<retval type='i' declared_type='ALsizei'/>
</method>
<method selector='defineSourceGroups:'>
<arg type='@' name='sourceGroupDefinitions' declared_type='NSArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='defineSourceGroups:total:'>
<arg type='^i' name='sourceGroupDefinitions' declared_type='int*' index='0'/>
<arg type='I' name='total' declared_type='NSUInteger' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='functioning'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='getGainWorks'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='init'>
<retval type='@' declared_type='id'/>
</method>
<method selector='lastErrorCode'>
<retval type='i' declared_type='ALenum'/>
</method>
<method selector='loadBuffer:filePath:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<arg type='@' name='filePath' declared_type='NSString*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='loadBufferFromData:soundData:format:size:freq:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<arg type='^v' name='soundData' declared_type='ALvoid*' index='1'/>
<arg type='i' name='format' declared_type='ALenum' index='2'/>
<arg type='i' name='size' declared_type='ALsizei' index='3'/>
<arg type='i' name='freq' declared_type='ALsizei' index='4'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='loadBuffersAsynchronously:'>
<arg type='@' name='loadRequests' declared_type='NSArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='masterGain'>
<retval type='f' declared_type='ALfloat'/>
</method>
<method selector='openALContext'>
<retval type='^{ALCcontext_struct=}' declared_type='ALCcontext*'/>
</method>
<method selector='playSound:sourceGroupId:pitch:pan:gain:loop:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<arg type='i' name='sourceGroupId' declared_type='int' index='1'/>
<arg type='f' name='pitch' declared_type='float' index='2'/>
<arg type='f' name='pan' declared_type='float' index='3'/>
<arg type='f' name='gain' declared_type='float' index='4'/>
<arg type='B' name='loop' declared_type='BOOL' index='5'/>
<retval type='I' declared_type='ALuint'/>
</method>
<method selector='setAsynchLoadProgress:'>
<arg type='f' name='asynchLoadProgress' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMasterGain:'>
<arg type='f' name='masterGain' declared_type='ALfloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMixerSampleRate:' class_method='true'>
<arg type='f' name='sampleRate' declared_type='Float32' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSourceGroupEnabled:enabled:'>
<arg type='i' name='sourceGroupId' declared_type='int' index='0'/>
<arg type='B' name='enabled' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSourceGroupNonInterruptible:isNonInterruptible:'>
<arg type='i' name='sourceGroupId' declared_type='int' index='0'/>
<arg type='B' name='isNonInterruptible' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='soundSourceForSound:sourceGroupId:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<arg type='i' name='sourceGroupId' declared_type='int' index='1'/>
<retval type='@' declared_type='CDSoundSource*'/>
</method>
<method selector='sourceGroupEnabled:'>
<arg type='i' name='sourceGroupId' declared_type='int' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='sourceGroupTotal'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='sourceTotal'>
<retval type='i' declared_type='int'/>
</method>
<method selector='stopAllSounds'>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopSound:'>
<arg type='I' name='sourceId' declared_type='ALuint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopSourceGroup:'>
<arg type='i' name='sourceGroupId' declared_type='int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unloadBuffer:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='CDSoundSource'>
<method selector='durationInSeconds'>
<retval type='f' declared_type='float'/>
</method>
<method selector='gain'>
<retval type='f' declared_type='float'/>
</method>
<method selector='init:sourceIndex:soundEngine:'>
<arg type='I' name='theSourceId' declared_type='ALuint' index='0'/>
<arg type='i' name='index' declared_type='int' index='1'/>
<arg type='@' name='engine' declared_type='CDSoundEngine*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isPlaying'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='lastError'>
<retval type='i' declared_type='ALenum'/>
</method>
<method selector='looping'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='pan'>
<retval type='f' declared_type='float'/>
</method>
<method selector='pitch'>
<retval type='f' declared_type='float'/>
</method>
<method selector='setGain:'>
<arg type='f' name='gain' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLooping:'>
<arg type='B' name='looping' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPan:'>
<arg type='f' name='pan' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPitch:'>
<arg type='f' name='pitch' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSoundId:'>
<arg type='i' name='soundId' declared_type='int' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='soundId'>
<retval type='i' declared_type='int'/>
</method>
</class>
<class name='CDUtilities'>
<method selector='fullPathFromRelativePath:' class_method='true'>
<arg type='@' name='relPath' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
<class name='NSObject'>
<method selector='backingSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method selector='ccTouchBegan:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='ccTouchCancelled:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchEnded:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchMoved:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchesBegan:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchesCancelled:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchesEnded:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='ccTouchesMoved:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='cdAudioSourceDidFinishPlaying:'>
<arg type='@' name='audioSource' declared_type='CDLongAudioSource*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='cdAudioSourceFileDidChange:'>
<arg type='@' name='audioSource' declared_type='CDLongAudioSource*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method selector='colorRenderBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='context'>
<retval type='@' declared_type='EAGLContext*'/>
</method>
<method selector='defaultFrameBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='doesOpacityModifyRGB'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='easeActionWithAction:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
<method selector='enabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithDepthFormat:withPixelFormat:withSharegroup:withMultiSampling:withNumberOfSamples:'>
<arg type='I' name='depthFormat' declared_type='unsigned int' index='0'/>
<arg type='I' name='pixelFormat' declared_type='unsigned int' index='1'/>
<arg type='@' name='sharegroup' declared_type='EAGLSharegroup*' index='2'/>
<arg type='B' name='multiSampling' declared_type='BOOL' index='3'/>
<arg type='I' name='requestedSamples' declared_type='unsigned int' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='msaaColorBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='msaaFrameBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method selector='mute'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method selector='pause'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='play'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='resizeFromLayer:'>
<arg type='@' name='layer' declared_type='CAEAGLLayer*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='rewind'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCString:'>
<arg type='*' name='label' declared_type='char*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEnabled:'>
<arg type='B' name='enabledValue' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMute:'>
<arg type='B' name='muteValue' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpacityModifyRGB:'>
<arg type='B' name='boolean' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setString:'>
<arg type='@' name='label' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shouldAutorotateToInterfaceOrientation:'>
<arg type='i' name='interfaceOrientation' declared_type='UIInterfaceOrientation' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='stop'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='string'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
<method selector='touchesBegan:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='touchesCancelled:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='touchesEnded:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='touchesMoved:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='updateProjection'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='NSThread'>
<method selector='performBlock:'>
<arg type='@?' name='block' declared_type='void (^)(void)' function_pointer='true' index='0'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='performBlock:waitUntilDone:'>
<arg type='@?' name='block' declared_type='void (^)(void)' function_pointer='true' index='0'>
<retval type='v' declared_type='void'/>
</arg>
<arg type='B' name='wait' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='performBlock:withObject:waitUntilDone:'>
<arg type='@?' name='block' declared_type='void (^)(id)' function_pointer='true' index='0'>
<arg type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='@' name='object' declared_type='id' index='1'/>
<arg type='B' name='wait' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='SimpleAudioEngine'>
<method selector='backgroundMusicVolume'>
<retval type='f' declared_type='float'/>
</method>
<method selector='effectsVolume'>
<retval type='f' declared_type='float'/>
</method>
<method selector='end' class_method='true'>
<retval type='v' declared_type='void'/>
</method>
<method selector='isBackgroundMusicPlaying'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='pauseBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='playBackgroundMusic:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='playBackgroundMusic:loop:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<arg type='B' name='loop' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='playEffect:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='I' declared_type='ALuint'/>
</method>
<method selector='playEffect:pitch:pan:gain:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<arg type='f' name='pitch' declared_type='Float32' index='1'/>
<arg type='f' name='pan' declared_type='Float32' index='2'/>
<arg type='f' name='gain' declared_type='Float32' index='3'/>
<retval type='I' declared_type='ALuint'/>
</method>
<method selector='preloadBackgroundMusic:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='preloadEffect:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rewindBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundMusicVolume:'>
<arg type='f' name='backgroundMusicVolume' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEffectsVolume:'>
<arg type='f' name='effectsVolume' declared_type='float' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedEngine' class_method='true'>
<retval type='@' declared_type='SimpleAudioEngine*'/>
</method>
<method selector='soundSourceForFile:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='CDSoundSource*'/>
</method>
<method selector='stopBackgroundMusic'>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopEffect:'>
<arg type='I' name='soundId' declared_type='ALuint' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='unloadEffect:'>
<arg type='@' name='filePath' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='willPlayBackgroundMusic'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<informal_protocol name='CCBlendProtocol'>
<method type='{_ccBlendFunc=II}8@0:4' selector='blendFunc'>
<retval type='{_ccBlendFunc=II}' declared_type='ccBlendFunc'/>
</method>
<method type='v16@0:4{_ccBlendFunc=II}8' selector='setBlendFunc:'>
<arg type='{_ccBlendFunc=II}' name='blendFunc' declared_type='ccBlendFunc' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCDirectorDelegate'>
<method type='B12@0:4i8' selector='shouldAutorotateToInterfaceOrientation:'>
<arg type='i' name='interfaceOrientation' declared_type='UIInterfaceOrientation' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='v8@0:4' selector='updateProjection'>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCESRenderer'>
<method type='{CGSize=ff}8@0:4' selector='backingSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method type='I8@0:4' selector='colorRenderBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method type='@8@0:4' selector='context'>
<retval type='@' declared_type='EAGLContext*'/>
</method>
<method type='I8@0:4' selector='defaultFrameBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method type='@28@0:4I8I12@16B20I24' selector='initWithDepthFormat:withPixelFormat:withSharegroup:withMultiSampling:withNumberOfSamples:'>
<arg type='I' name='depthFormat' declared_type='unsigned int' index='0'/>
<arg type='I' name='pixelFormat' declared_type='unsigned int' index='1'/>
<arg type='@' name='sharegroup' declared_type='EAGLSharegroup*' index='2'/>
<arg type='B' name='multiSampling' declared_type='BOOL' index='3'/>
<arg type='I' name='requestedSamples' declared_type='unsigned int' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method type='I8@0:4' selector='msaaColorBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method type='I8@0:4' selector='msaaFrameBuffer'>
<retval type='I' declared_type='unsigned int'/>
</method>
<method type='B12@0:4@8' selector='resizeFromLayer:'>
<arg type='@' name='layer' declared_type='CAEAGLLayer*' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
</informal_protocol>
<informal_protocol name='CCLabelProtocol'>
<method type='v12@0:4*8' selector='setCString:'>
<arg type='*' name='label' declared_type='char*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4@8' selector='setString:'>
<arg type='@' name='label' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='@8@0:4' selector='string'>
<retval type='@' declared_type='NSString*'/>
</method>
</informal_protocol>
<informal_protocol name='CCRGBAProtocol'>
<method type='{_ccColor3B=CCC}8@0:4' selector='color'>
<retval type='{_ccColor3B=CCC}' declared_type='ccColor3B'/>
</method>
<method type='B8@0:4' selector='doesOpacityModifyRGB'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='C8@0:4' selector='opacity'>
<retval type='C' declared_type='GLubyte'/>
</method>
<method type='v11@0:4{_ccColor3B=CCC}8' selector='setColor:'>
<arg type='{_ccColor3B=CCC}' name='color' declared_type='ccColor3B' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4C8' selector='setOpacity:'>
<arg type='C' name='opacity' declared_type='GLubyte' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4B8' selector='setOpacityModifyRGB:'>
<arg type='B' name='boolean' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCStandardTouchDelegate'>
<method type='v16@0:4@8@12' selector='ccTouchesBegan:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchesCancelled:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchesEnded:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchesMoved:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCTargetedTouchDelegate'>
<method type='B16@0:4@8@12' selector='ccTouchBegan:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchCancelled:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchEnded:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='ccTouchMoved:withEvent:'>
<arg type='@' name='touch' declared_type='UITouch*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCTextureProtocol'>
<method type='v12@0:4@8' selector='setTexture:'>
<arg type='@' name='texture' declared_type='CCTexture2D*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='@8@0:4' selector='texture'>
<retval type='@' declared_type='CCTexture2D*'/>
</method>
</informal_protocol>
<informal_protocol name='CCTouchDelegate'>
<method type='v16@0:4@8@12' selector='touchesBegan:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='touchesCancelled:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='touchesEnded:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4@8@12' selector='touchesMoved:withEvent:'>
<arg type='@' name='touches' declared_type='NSSet*' index='0'/>
<arg type='@' name='event' declared_type='UIEvent*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CCTransitionEaseScene'>
<method type='@12@0:4@8' selector='easeActionWithAction:'>
<arg type='@' name='action' declared_type='CCActionInterval*' index='0'/>
<retval type='@' declared_type='CCActionInterval*'/>
</method>
</informal_protocol>
<informal_protocol name='CDAudioInterruptProtocol'>
<method type='B8@0:4' selector='enabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='B8@0:4' selector='mute'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='v12@0:4B8' selector='setEnabled:'>
<arg type='B' name='enabledValue' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4B8' selector='setMute:'>
<arg type='B' name='muteValue' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='CDAudioTransportProtocol'>
<method type='B8@0:4' selector='pause'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='B8@0:4' selector='play'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='B8@0:4' selector='rewind'>
<retval type='B' declared_type='BOOL'/>
</method>
<method type='B8@0:4' selector='stop'>
<retval type='B' declared_type='BOOL'/>
</method>
</informal_protocol>
<informal_protocol name='CDLongAudioSourceDelegate'>
<method type='v12@0:4@8' selector='cdAudioSourceDidFinishPlaying:'>
<arg type='@' name='audioSource' declared_type='CDLongAudioSource*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4@8' selector='cdAudioSourceFileDidChange:'>
<arg type='@' name='audioSource' declared_type='CDLongAudioSource*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
</signatures>
